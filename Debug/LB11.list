
LB11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000487c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d6c  08004a2c  08004a2c  00014a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007798  08007798  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08007798  08007798  00017798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077a0  080077a0  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077a0  080077a0  000177a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077a4  080077a4  000177a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080077a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          000001f4  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000027c  2000027c  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d64c  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002346  00000000  00000000  0002d704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d68  00000000  00000000  0002fa50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c20  00000000  00000000  000307b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025ac3  00000000  00000000  000313d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f61a  00000000  00000000  00056e9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbf4a  00000000  00000000  000664b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001423ff  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004068  00000000  00000000  00142450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  001464b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  001464dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004a14 	.word	0x08004a14

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	08004a14 	.word	0x08004a14

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <disp1color_FillScreenbuff>:

//==============================================================================
// Процедура заполняет буфер кадра значением FillValue
//==============================================================================
void disp1color_FillScreenbuff(uint8_t FillValue)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
  memset(disp1color_buff, FillValue, sizeof(disp1color_buff));
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	2240      	movs	r2, #64	; 0x40
 80005a2:	4619      	mov	r1, r3
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <disp1color_FillScreenbuff+0x20>)
 80005a6:	f003 f991 	bl	80038cc <memset>
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000124 	.word	0x20000124

080005b8 <disp1color_UpdateFromBuff>:

//==============================================================================
// Процедура обновляет состояние индикаторов в соответствии с буфером кадра disp1color_buff
//==============================================================================
void disp1color_UpdateFromBuff(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  DMD_1COLOR_DisplayFullUpdate(disp1color_buff, sizeof(disp1color_buff));
 80005bc:	2140      	movs	r1, #64	; 0x40
 80005be:	4802      	ldr	r0, [pc, #8]	; (80005c8 <disp1color_UpdateFromBuff+0x10>)
 80005c0:	f000 fa27 	bl	8000a12 <DMD_1COLOR_DisplayFullUpdate>

  //printf("BUF horz:\n");
  //print_buf(DMD_1COLOR_Buff, sizeof(DMD_1COLOR_Buff));
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000124 	.word	0x20000124

080005cc <disp1color_DrawPixel>:

//==============================================================================
// Процедура устанавливает состояние 1 пикселя дисплея
//==============================================================================
void disp1color_DrawPixel(int16_t X, int16_t Y, uint8_t State)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
 80005d6:	460b      	mov	r3, r1
 80005d8:	80bb      	strh	r3, [r7, #4]
 80005da:	4613      	mov	r3, r2
 80005dc:	70fb      	strb	r3, [r7, #3]
  //Х и У координаты пикселя, отсчитываются слева направо (Х) сверху вниз (У) с 0
  // Проверяем, находится ли точка в поле отрисовки дисплея
  if ((X >= DISP1COLOR_Width) || (Y >= DISP1COLOR_Height) || (X < 0) || (Y < 0))
 80005de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005e2:	2b1f      	cmp	r3, #31
 80005e4:	dc48      	bgt.n	8000678 <disp1color_DrawPixel+0xac>
 80005e6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005ea:	2b0f      	cmp	r3, #15
 80005ec:	dc44      	bgt.n	8000678 <disp1color_DrawPixel+0xac>
 80005ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	db40      	blt.n	8000678 <disp1color_DrawPixel+0xac>
 80005f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	db3c      	blt.n	8000678 <disp1color_DrawPixel+0xac>
    return;
  
  //Байты относительно матрицы расположены вертикально, в 2 ряда
  uint16_t ByteIdx = Y >> 3;
 80005fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000602:	10db      	asrs	r3, r3, #3
 8000604:	b21b      	sxth	r3, r3
 8000606:	81fb      	strh	r3, [r7, #14]
  uint8_t BitIdx = Y - (ByteIdx << 3); // Высота относительно строки байт (0<=Y<=7)
 8000608:	88bb      	ldrh	r3, [r7, #4]
 800060a:	b2da      	uxtb	r2, r3
 800060c:	89fb      	ldrh	r3, [r7, #14]
 800060e:	b2db      	uxtb	r3, r3
 8000610:	00db      	lsls	r3, r3, #3
 8000612:	b2db      	uxtb	r3, r3
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	737b      	strb	r3, [r7, #13]
  ByteIdx *= DISP1COLOR_Width;  
 8000618:	89fb      	ldrh	r3, [r7, #14]
 800061a:	015b      	lsls	r3, r3, #5
 800061c:	81fb      	strh	r3, [r7, #14]
  ByteIdx += X;
 800061e:	88fa      	ldrh	r2, [r7, #6]
 8000620:	89fb      	ldrh	r3, [r7, #14]
 8000622:	4413      	add	r3, r2
 8000624:	81fb      	strh	r3, [r7, #14]
  
  //Заполнение буфера данных для отрисовки
  if (State)
 8000626:	78fb      	ldrb	r3, [r7, #3]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d00f      	beq.n	800064c <disp1color_DrawPixel+0x80>
    disp1color_buff[ByteIdx] |= (1 << BitIdx);
 800062c:	89fb      	ldrh	r3, [r7, #14]
 800062e:	4a15      	ldr	r2, [pc, #84]	; (8000684 <disp1color_DrawPixel+0xb8>)
 8000630:	5cd3      	ldrb	r3, [r2, r3]
 8000632:	b25a      	sxtb	r2, r3
 8000634:	7b7b      	ldrb	r3, [r7, #13]
 8000636:	2101      	movs	r1, #1
 8000638:	fa01 f303 	lsl.w	r3, r1, r3
 800063c:	b25b      	sxtb	r3, r3
 800063e:	4313      	orrs	r3, r2
 8000640:	b25a      	sxtb	r2, r3
 8000642:	89fb      	ldrh	r3, [r7, #14]
 8000644:	b2d1      	uxtb	r1, r2
 8000646:	4a0f      	ldr	r2, [pc, #60]	; (8000684 <disp1color_DrawPixel+0xb8>)
 8000648:	54d1      	strb	r1, [r2, r3]
 800064a:	e010      	b.n	800066e <disp1color_DrawPixel+0xa2>
  else
    disp1color_buff[ByteIdx] &= ~(1 << BitIdx);
 800064c:	89fb      	ldrh	r3, [r7, #14]
 800064e:	4a0d      	ldr	r2, [pc, #52]	; (8000684 <disp1color_DrawPixel+0xb8>)
 8000650:	5cd3      	ldrb	r3, [r2, r3]
 8000652:	b25a      	sxtb	r2, r3
 8000654:	7b7b      	ldrb	r3, [r7, #13]
 8000656:	2101      	movs	r1, #1
 8000658:	fa01 f303 	lsl.w	r3, r1, r3
 800065c:	b25b      	sxtb	r3, r3
 800065e:	43db      	mvns	r3, r3
 8000660:	b25b      	sxtb	r3, r3
 8000662:	4013      	ands	r3, r2
 8000664:	b25a      	sxtb	r2, r3
 8000666:	89fb      	ldrh	r3, [r7, #14]
 8000668:	b2d1      	uxtb	r1, r2
 800066a:	4a06      	ldr	r2, [pc, #24]	; (8000684 <disp1color_DrawPixel+0xb8>)
 800066c:	54d1      	strb	r1, [r2, r3]

 // printf("PIX:%d%s", disp1color_buff[ByteIdx], "\n");
  uint8_t buf = disp1color_buff[ByteIdx];
 800066e:	89fb      	ldrh	r3, [r7, #14]
 8000670:	4a04      	ldr	r2, [pc, #16]	; (8000684 <disp1color_DrawPixel+0xb8>)
 8000672:	5cd3      	ldrb	r3, [r2, r3]
 8000674:	733b      	strb	r3, [r7, #12]
 8000676:	e000      	b.n	800067a <disp1color_DrawPixel+0xae>
    return;
 8000678:	bf00      	nop
//  for (int i = 0; i < 8; i++) {
//	  printf("%c", (buf & 0x80) ? '1' : '0');
//	  buf <<= 1;
//  }
//  printf("\n");
}
 800067a:	3714      	adds	r7, #20
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	20000124 	.word	0x20000124

08000688 <disp1color_DrawLine>:

//==============================================================================
// Процедура рисует прямую линию в буфере кадра дисплея
//==============================================================================
void disp1color_DrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2) 
{
 8000688:	b590      	push	{r4, r7, lr}
 800068a:	b087      	sub	sp, #28
 800068c:	af00      	add	r7, sp, #0
 800068e:	4604      	mov	r4, r0
 8000690:	4608      	mov	r0, r1
 8000692:	4611      	mov	r1, r2
 8000694:	461a      	mov	r2, r3
 8000696:	4623      	mov	r3, r4
 8000698:	80fb      	strh	r3, [r7, #6]
 800069a:	4603      	mov	r3, r0
 800069c:	80bb      	strh	r3, [r7, #4]
 800069e:	460b      	mov	r3, r1
 80006a0:	807b      	strh	r3, [r7, #2]
 80006a2:	4613      	mov	r3, r2
 80006a4:	803b      	strh	r3, [r7, #0]
  const int16_t deltaX = abs(x2 - x1);
 80006a6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80006aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006ae:	1ad3      	subs	r3, r2, r3
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	bfb8      	it	lt
 80006b4:	425b      	neglt	r3, r3
 80006b6:	82bb      	strh	r3, [r7, #20]
  const int16_t deltaY = abs(y2 - y1);
 80006b8:	f9b7 2000 	ldrsh.w	r2, [r7]
 80006bc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006c0:	1ad3      	subs	r3, r2, r3
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	bfb8      	it	lt
 80006c6:	425b      	neglt	r3, r3
 80006c8:	827b      	strh	r3, [r7, #18]
  const int16_t signX = x1 < x2 ? 1 : -1;
 80006ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80006ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	da01      	bge.n	80006da <disp1color_DrawLine+0x52>
 80006d6:	2301      	movs	r3, #1
 80006d8:	e001      	b.n	80006de <disp1color_DrawLine+0x56>
 80006da:	f04f 33ff 	mov.w	r3, #4294967295
 80006de:	823b      	strh	r3, [r7, #16]
  const int16_t signY = y1 < y2 ? 1 : -1;
 80006e0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80006e4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	da01      	bge.n	80006f0 <disp1color_DrawLine+0x68>
 80006ec:	2301      	movs	r3, #1
 80006ee:	e001      	b.n	80006f4 <disp1color_DrawLine+0x6c>
 80006f0:	f04f 33ff 	mov.w	r3, #4294967295
 80006f4:	81fb      	strh	r3, [r7, #14]

  int16_t error = deltaX - deltaY;
 80006f6:	8aba      	ldrh	r2, [r7, #20]
 80006f8:	8a7b      	ldrh	r3, [r7, #18]
 80006fa:	1ad3      	subs	r3, r2, r3
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	82fb      	strh	r3, [r7, #22]

  disp1color_DrawPixel(x2, y2, 1);
 8000700:	f9b7 1000 	ldrsh.w	r1, [r7]
 8000704:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000708:	2201      	movs	r2, #1
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff ff5e 	bl	80005cc <disp1color_DrawPixel>

  while (x1 != x2 || y1 != y2) 
 8000710:	e02c      	b.n	800076c <disp1color_DrawLine+0xe4>
  {
    disp1color_DrawPixel(x1, y1, 1);
 8000712:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000716:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800071a:	2201      	movs	r2, #1
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff ff55 	bl	80005cc <disp1color_DrawPixel>
    const int16_t error2 = error * 2;
 8000722:	8afb      	ldrh	r3, [r7, #22]
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	b29b      	uxth	r3, r3
 8000728:	81bb      	strh	r3, [r7, #12]
 
    if (error2 > -deltaY) 
 800072a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800072e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000732:	425b      	negs	r3, r3
 8000734:	429a      	cmp	r2, r3
 8000736:	dd09      	ble.n	800074c <disp1color_DrawLine+0xc4>
    {
      error -= deltaY;
 8000738:	8afa      	ldrh	r2, [r7, #22]
 800073a:	8a7b      	ldrh	r3, [r7, #18]
 800073c:	1ad3      	subs	r3, r2, r3
 800073e:	b29b      	uxth	r3, r3
 8000740:	82fb      	strh	r3, [r7, #22]
      x1 += signX;
 8000742:	88fa      	ldrh	r2, [r7, #6]
 8000744:	8a3b      	ldrh	r3, [r7, #16]
 8000746:	4413      	add	r3, r2
 8000748:	b29b      	uxth	r3, r3
 800074a:	80fb      	strh	r3, [r7, #6]
    }
    if (error2 < deltaX)
 800074c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000750:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000754:	429a      	cmp	r2, r3
 8000756:	da09      	bge.n	800076c <disp1color_DrawLine+0xe4>
    {
      error += deltaX;
 8000758:	8afa      	ldrh	r2, [r7, #22]
 800075a:	8abb      	ldrh	r3, [r7, #20]
 800075c:	4413      	add	r3, r2
 800075e:	b29b      	uxth	r3, r3
 8000760:	82fb      	strh	r3, [r7, #22]
      y1 += signY;
 8000762:	88ba      	ldrh	r2, [r7, #4]
 8000764:	89fb      	ldrh	r3, [r7, #14]
 8000766:	4413      	add	r3, r2
 8000768:	b29b      	uxth	r3, r3
 800076a:	80bb      	strh	r3, [r7, #4]
  while (x1 != x2 || y1 != y2) 
 800076c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000770:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000774:	429a      	cmp	r2, r3
 8000776:	d1cc      	bne.n	8000712 <disp1color_DrawLine+0x8a>
 8000778:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800077c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000780:	429a      	cmp	r2, r3
 8000782:	d1c6      	bne.n	8000712 <disp1color_DrawLine+0x8a>
    }
  }
}
 8000784:	bf00      	nop
 8000786:	bf00      	nop
 8000788:	371c      	adds	r7, #28
 800078a:	46bd      	mov	sp, r7
 800078c:	bd90      	pop	{r4, r7, pc}

0800078e <disp1color_DrawRectangle>:

//==============================================================================
// Процедура рисует прямоугольник в буфере кадра дисплея
//==============================================================================
void disp1color_DrawRectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2) 
{
 800078e:	b590      	push	{r4, r7, lr}
 8000790:	b083      	sub	sp, #12
 8000792:	af00      	add	r7, sp, #0
 8000794:	4604      	mov	r4, r0
 8000796:	4608      	mov	r0, r1
 8000798:	4611      	mov	r1, r2
 800079a:	461a      	mov	r2, r3
 800079c:	4623      	mov	r3, r4
 800079e:	80fb      	strh	r3, [r7, #6]
 80007a0:	4603      	mov	r3, r0
 80007a2:	80bb      	strh	r3, [r7, #4]
 80007a4:	460b      	mov	r3, r1
 80007a6:	807b      	strh	r3, [r7, #2]
 80007a8:	4613      	mov	r3, r2
 80007aa:	803b      	strh	r3, [r7, #0]
  disp1color_DrawLine(x1, y1, x1, y2);
 80007ac:	f9b7 3000 	ldrsh.w	r3, [r7]
 80007b0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80007b4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80007b8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80007bc:	f7ff ff64 	bl	8000688 <disp1color_DrawLine>
  disp1color_DrawLine(x2, y1, x2, y2);
 80007c0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80007c4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80007c8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80007cc:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80007d0:	f7ff ff5a 	bl	8000688 <disp1color_DrawLine>
  disp1color_DrawLine(x1, y1, x2, y1);
 80007d4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80007d8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80007dc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80007e0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80007e4:	f7ff ff50 	bl	8000688 <disp1color_DrawLine>
  disp1color_DrawLine(x1, y2, x2, y2);
 80007e8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80007ec:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80007f0:	f9b7 1000 	ldrsh.w	r1, [r7]
 80007f4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80007f8:	f7ff ff46 	bl	8000688 <disp1color_DrawLine>
}
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	bd90      	pop	{r4, r7, pc}

08000804 <disp1color_DrawChar>:

//==============================================================================
// Функция вывода символа Char на дисплей. Возвращает ширину выведенного символа
//==============================================================================
uint8_t disp1color_DrawChar(int16_t X, int16_t Y, uint8_t FontID, uint8_t Char)
{
 8000804:	b590      	push	{r4, r7, lr}
 8000806:	b087      	sub	sp, #28
 8000808:	af00      	add	r7, sp, #0
 800080a:	4604      	mov	r4, r0
 800080c:	4608      	mov	r0, r1
 800080e:	4611      	mov	r1, r2
 8000810:	461a      	mov	r2, r3
 8000812:	4623      	mov	r3, r4
 8000814:	80fb      	strh	r3, [r7, #6]
 8000816:	4603      	mov	r3, r0
 8000818:	80bb      	strh	r3, [r7, #4]
 800081a:	460b      	mov	r3, r1
 800081c:	70fb      	strb	r3, [r7, #3]
 800081e:	4613      	mov	r3, r2
 8000820:	70bb      	strb	r3, [r7, #2]

  // Указатель на подтабличку конкретного символа шрифта
  uint8_t *pCharTable = font_GetFontStruct(FontID, Char);
 8000822:	78ba      	ldrb	r2, [r7, #2]
 8000824:	78fb      	ldrb	r3, [r7, #3]
 8000826:	4611      	mov	r1, r2
 8000828:	4618      	mov	r0, r3
 800082a:	f000 fa85 	bl	8000d38 <font_GetFontStruct>
 800082e:	6138      	str	r0, [r7, #16]
  uint8_t CharWidth = font_GetCharWidth(pCharTable);    // Ширина символа
 8000830:	6938      	ldr	r0, [r7, #16]
 8000832:	f000 fa97 	bl	8000d64 <font_GetCharWidth>
 8000836:	4603      	mov	r3, r0
 8000838:	73fb      	strb	r3, [r7, #15]
  uint8_t CharHeight = font_GetCharHeight(pCharTable);  // Высота символа
 800083a:	6938      	ldr	r0, [r7, #16]
 800083c:	f000 fa9e 	bl	8000d7c <font_GetCharHeight>
 8000840:	4603      	mov	r3, r0
 8000842:	73bb      	strb	r3, [r7, #14]
  pCharTable += 2;
 8000844:	693b      	ldr	r3, [r7, #16]
 8000846:	3302      	adds	r3, #2
 8000848:	613b      	str	r3, [r7, #16]
  
  if (FontID == FONTID_6X8M)
 800084a:	78fb      	ldrb	r3, [r7, #3]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d132      	bne.n	80008b6 <disp1color_DrawChar+0xb2>
  {
    for (uint8_t row = 0; row < CharHeight; row++)
 8000850:	2300      	movs	r3, #0
 8000852:	75fb      	strb	r3, [r7, #23]
 8000854:	e02a      	b.n	80008ac <disp1color_DrawChar+0xa8>
    {
		for (uint8_t col = 0; col < CharWidth; col++) {
 8000856:	2300      	movs	r3, #0
 8000858:	75bb      	strb	r3, [r7, #22]
 800085a:	e020      	b.n	800089e <disp1color_DrawChar+0x9a>

			//printf("X+col=%d%s%d%s", X + col, " Y+row=", Y + row, "\n");
			disp1color_DrawPixel(X + col, Y + row, pCharTable[row] & (1 << (7 - col)));
 800085c:	7dbb      	ldrb	r3, [r7, #22]
 800085e:	b29a      	uxth	r2, r3
 8000860:	88fb      	ldrh	r3, [r7, #6]
 8000862:	4413      	add	r3, r2
 8000864:	b29b      	uxth	r3, r3
 8000866:	b218      	sxth	r0, r3
 8000868:	7dfb      	ldrb	r3, [r7, #23]
 800086a:	b29a      	uxth	r2, r3
 800086c:	88bb      	ldrh	r3, [r7, #4]
 800086e:	4413      	add	r3, r2
 8000870:	b29b      	uxth	r3, r3
 8000872:	b219      	sxth	r1, r3
 8000874:	7dfb      	ldrb	r3, [r7, #23]
 8000876:	693a      	ldr	r2, [r7, #16]
 8000878:	4413      	add	r3, r2
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	b25a      	sxtb	r2, r3
 800087e:	7dbb      	ldrb	r3, [r7, #22]
 8000880:	f1c3 0307 	rsb	r3, r3, #7
 8000884:	2401      	movs	r4, #1
 8000886:	fa04 f303 	lsl.w	r3, r4, r3
 800088a:	b25b      	sxtb	r3, r3
 800088c:	4013      	ands	r3, r2
 800088e:	b25b      	sxtb	r3, r3
 8000890:	b2db      	uxtb	r3, r3
 8000892:	461a      	mov	r2, r3
 8000894:	f7ff fe9a 	bl	80005cc <disp1color_DrawPixel>
		for (uint8_t col = 0; col < CharWidth; col++) {
 8000898:	7dbb      	ldrb	r3, [r7, #22]
 800089a:	3301      	adds	r3, #1
 800089c:	75bb      	strb	r3, [r7, #22]
 800089e:	7dba      	ldrb	r2, [r7, #22]
 80008a0:	7bfb      	ldrb	r3, [r7, #15]
 80008a2:	429a      	cmp	r2, r3
 80008a4:	d3da      	bcc.n	800085c <disp1color_DrawChar+0x58>
    for (uint8_t row = 0; row < CharHeight; row++)
 80008a6:	7dfb      	ldrb	r3, [r7, #23]
 80008a8:	3301      	adds	r3, #1
 80008aa:	75fb      	strb	r3, [r7, #23]
 80008ac:	7dfa      	ldrb	r2, [r7, #23]
 80008ae:	7bbb      	ldrb	r3, [r7, #14]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d3d0      	bcc.n	8000856 <disp1color_DrawChar+0x52>
 80008b4:	e057      	b.n	8000966 <disp1color_DrawChar+0x162>
		}
    }
  }
  else
  {
    for (uint8_t row = 0; row < CharHeight; row++)
 80008b6:	2300      	movs	r3, #0
 80008b8:	757b      	strb	r3, [r7, #21]
 80008ba:	e050      	b.n	800095e <disp1color_DrawChar+0x15a>
    {
      for (uint8_t col = 0; col < CharWidth; col++)
 80008bc:	2300      	movs	r3, #0
 80008be:	753b      	strb	r3, [r7, #20]
 80008c0:	e046      	b.n	8000950 <disp1color_DrawChar+0x14c>
      {
        if (col < 8)
 80008c2:	7d3b      	ldrb	r3, [r7, #20]
 80008c4:	2b07      	cmp	r3, #7
 80008c6:	d820      	bhi.n	800090a <disp1color_DrawChar+0x106>
          disp1color_DrawPixel(X + col, Y + row, pCharTable[row * 2] & (1 << (7 - col)));
 80008c8:	7d3b      	ldrb	r3, [r7, #20]
 80008ca:	b29a      	uxth	r2, r3
 80008cc:	88fb      	ldrh	r3, [r7, #6]
 80008ce:	4413      	add	r3, r2
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	b218      	sxth	r0, r3
 80008d4:	7d7b      	ldrb	r3, [r7, #21]
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	88bb      	ldrh	r3, [r7, #4]
 80008da:	4413      	add	r3, r2
 80008dc:	b29b      	uxth	r3, r3
 80008de:	b219      	sxth	r1, r3
 80008e0:	7d7b      	ldrb	r3, [r7, #21]
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	461a      	mov	r2, r3
 80008e6:	693b      	ldr	r3, [r7, #16]
 80008e8:	4413      	add	r3, r2
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	b25a      	sxtb	r2, r3
 80008ee:	7d3b      	ldrb	r3, [r7, #20]
 80008f0:	f1c3 0307 	rsb	r3, r3, #7
 80008f4:	2401      	movs	r4, #1
 80008f6:	fa04 f303 	lsl.w	r3, r4, r3
 80008fa:	b25b      	sxtb	r3, r3
 80008fc:	4013      	ands	r3, r2
 80008fe:	b25b      	sxtb	r3, r3
 8000900:	b2db      	uxtb	r3, r3
 8000902:	461a      	mov	r2, r3
 8000904:	f7ff fe62 	bl	80005cc <disp1color_DrawPixel>
 8000908:	e01f      	b.n	800094a <disp1color_DrawChar+0x146>
        else
          disp1color_DrawPixel(X + col, Y + row, pCharTable[(row * 2) + 1] & (1 << (15 - col)));
 800090a:	7d3b      	ldrb	r3, [r7, #20]
 800090c:	b29a      	uxth	r2, r3
 800090e:	88fb      	ldrh	r3, [r7, #6]
 8000910:	4413      	add	r3, r2
 8000912:	b29b      	uxth	r3, r3
 8000914:	b218      	sxth	r0, r3
 8000916:	7d7b      	ldrb	r3, [r7, #21]
 8000918:	b29a      	uxth	r2, r3
 800091a:	88bb      	ldrh	r3, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	b29b      	uxth	r3, r3
 8000920:	b219      	sxth	r1, r3
 8000922:	7d7b      	ldrb	r3, [r7, #21]
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	3301      	adds	r3, #1
 8000928:	693a      	ldr	r2, [r7, #16]
 800092a:	4413      	add	r3, r2
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	b25a      	sxtb	r2, r3
 8000930:	7d3b      	ldrb	r3, [r7, #20]
 8000932:	f1c3 030f 	rsb	r3, r3, #15
 8000936:	2401      	movs	r4, #1
 8000938:	fa04 f303 	lsl.w	r3, r4, r3
 800093c:	b25b      	sxtb	r3, r3
 800093e:	4013      	ands	r3, r2
 8000940:	b25b      	sxtb	r3, r3
 8000942:	b2db      	uxtb	r3, r3
 8000944:	461a      	mov	r2, r3
 8000946:	f7ff fe41 	bl	80005cc <disp1color_DrawPixel>
      for (uint8_t col = 0; col < CharWidth; col++)
 800094a:	7d3b      	ldrb	r3, [r7, #20]
 800094c:	3301      	adds	r3, #1
 800094e:	753b      	strb	r3, [r7, #20]
 8000950:	7d3a      	ldrb	r2, [r7, #20]
 8000952:	7bfb      	ldrb	r3, [r7, #15]
 8000954:	429a      	cmp	r2, r3
 8000956:	d3b4      	bcc.n	80008c2 <disp1color_DrawChar+0xbe>
    for (uint8_t row = 0; row < CharHeight; row++)
 8000958:	7d7b      	ldrb	r3, [r7, #21]
 800095a:	3301      	adds	r3, #1
 800095c:	757b      	strb	r3, [r7, #21]
 800095e:	7d7a      	ldrb	r2, [r7, #21]
 8000960:	7bbb      	ldrb	r3, [r7, #14]
 8000962:	429a      	cmp	r2, r3
 8000964:	d3aa      	bcc.n	80008bc <disp1color_DrawChar+0xb8>
      }
    }
  }
  
  return CharWidth;
 8000966:	7bfb      	ldrb	r3, [r7, #15]
}
 8000968:	4618      	mov	r0, r3
 800096a:	371c      	adds	r7, #28
 800096c:	46bd      	mov	sp, r7
 800096e:	bd90      	pop	{r4, r7, pc}

08000970 <disp1color_DrawString>:

//==============================================================================
// Функция вывода текста из строки Str на дисплей
//==============================================================================
void disp1color_DrawString(int16_t X, int16_t Y, uint8_t FontID, uint8_t *Str)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	4603      	mov	r3, r0
 800097a:	81fb      	strh	r3, [r7, #14]
 800097c:	460b      	mov	r3, r1
 800097e:	81bb      	strh	r3, [r7, #12]
 8000980:	4613      	mov	r3, r2
 8000982:	72fb      	strb	r3, [r7, #11]
  uint8_t done = 0;             // Флаг окончания вывода
 8000984:	2300      	movs	r3, #0
 8000986:	75fb      	strb	r3, [r7, #23]
  int16_t Xstart = X;           // Запоминаем куда будем переводить каретку при переходе на новую строку
 8000988:	89fb      	ldrh	r3, [r7, #14]
 800098a:	82bb      	strh	r3, [r7, #20]
  uint8_t StrHeight = 8;        // Высота символов в пикселях для перехода на слежующую строку
 800098c:	2308      	movs	r3, #8
 800098e:	75bb      	strb	r3, [r7, #22]

  // Вывод строки
  while (!done)
 8000990:	e037      	b.n	8000a02 <disp1color_DrawString+0x92>
  {
    switch (*Str)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b0d      	cmp	r3, #13
 8000998:	d010      	beq.n	80009bc <disp1color_DrawString+0x4c>
 800099a:	2b0d      	cmp	r3, #13
 800099c:	dc11      	bgt.n	80009c2 <disp1color_DrawString+0x52>
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d002      	beq.n	80009a8 <disp1color_DrawString+0x38>
 80009a2:	2b0a      	cmp	r3, #10
 80009a4:	d003      	beq.n	80009ae <disp1color_DrawString+0x3e>
 80009a6:	e00c      	b.n	80009c2 <disp1color_DrawString+0x52>
    {
    case '\0':  // Конец строки
      done = 1;
 80009a8:	2301      	movs	r3, #1
 80009aa:	75fb      	strb	r3, [r7, #23]
      break;
 80009ac:	e026      	b.n	80009fc <disp1color_DrawString+0x8c>
    case '\n':  // Переход на следующую строку
      Y += StrHeight;
 80009ae:	7dbb      	ldrb	r3, [r7, #22]
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	89bb      	ldrh	r3, [r7, #12]
 80009b4:	4413      	add	r3, r2
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	81bb      	strh	r3, [r7, #12]
      break;
 80009ba:	e01f      	b.n	80009fc <disp1color_DrawString+0x8c>
    case '\r':  // Переход в начало строки
      X = Xstart;
 80009bc:	8abb      	ldrh	r3, [r7, #20]
 80009be:	81fb      	strh	r3, [r7, #14]
      break;
 80009c0:	e01c      	b.n	80009fc <disp1color_DrawString+0x8c>
    default:    // Отображаемый символ
		//printf("Symbol:%c\n", *Str);
		//printf("X=%d%s%d%s", X, " Y=", Y, "\n");
      X += disp1color_DrawChar(X, Y, FontID, *Str);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	7afa      	ldrb	r2, [r7, #11]
 80009c8:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80009cc:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80009d0:	f7ff ff18 	bl	8000804 <disp1color_DrawChar>
 80009d4:	4603      	mov	r3, r0
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	89fb      	ldrh	r3, [r7, #14]
 80009da:	4413      	add	r3, r2
 80009dc:	b29b      	uxth	r3, r3
 80009de:	81fb      	strh	r3, [r7, #14]
	  ///////
	  //setlocale(LC_ALL, "ru_UA.UTF-8");
	 // printf("BUF vert:\n");
	// print_buf(disp1color_buff, sizeof(disp1color_buff));
	  ///////
      StrHeight = font_GetCharHeight(font_GetFontStruct(FontID, *Str));
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	781a      	ldrb	r2, [r3, #0]
 80009e4:	7afb      	ldrb	r3, [r7, #11]
 80009e6:	4611      	mov	r1, r2
 80009e8:	4618      	mov	r0, r3
 80009ea:	f000 f9a5 	bl	8000d38 <font_GetFontStruct>
 80009ee:	4603      	mov	r3, r0
 80009f0:	4618      	mov	r0, r3
 80009f2:	f000 f9c3 	bl	8000d7c <font_GetCharHeight>
 80009f6:	4603      	mov	r3, r0
 80009f8:	75bb      	strb	r3, [r7, #22]
      break;
 80009fa:	bf00      	nop
    }
    Str++;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3301      	adds	r3, #1
 8000a00:	607b      	str	r3, [r7, #4]
  while (!done)
 8000a02:	7dfb      	ldrb	r3, [r7, #23]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d0c4      	beq.n	8000992 <disp1color_DrawString+0x22>
  }
}
 8000a08:	bf00      	nop
 8000a0a:	bf00      	nop
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <DMD_1COLOR_DisplayFullUpdate>:

//==============================================================================
// Процедура подготавливает буфер на передачу в экран в соответствии с буфером pBuff графической бибилиотеки
//==============================================================================
void DMD_1COLOR_DisplayFullUpdate(uint8_t *pBuff, uint16_t BuffLen)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b082      	sub	sp, #8
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
 8000a1a:	460b      	mov	r3, r1
 8000a1c:	807b      	strh	r3, [r7, #2]
	DMD_1COLOR_UpdateRow4(0, pBuff, BuffLen);
 8000a1e:	887b      	ldrh	r3, [r7, #2]
 8000a20:	461a      	mov	r2, r3
 8000a22:	6879      	ldr	r1, [r7, #4]
 8000a24:	2000      	movs	r0, #0
 8000a26:	f000 f817 	bl	8000a58 <DMD_1COLOR_UpdateRow4>
	DMD_1COLOR_UpdateRow4(1, pBuff, BuffLen);
 8000a2a:	887b      	ldrh	r3, [r7, #2]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	6879      	ldr	r1, [r7, #4]
 8000a30:	2001      	movs	r0, #1
 8000a32:	f000 f811 	bl	8000a58 <DMD_1COLOR_UpdateRow4>
	DMD_1COLOR_UpdateRow4(2, pBuff, BuffLen);
 8000a36:	887b      	ldrh	r3, [r7, #2]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	6879      	ldr	r1, [r7, #4]
 8000a3c:	2002      	movs	r0, #2
 8000a3e:	f000 f80b 	bl	8000a58 <DMD_1COLOR_UpdateRow4>
	DMD_1COLOR_UpdateRow4(3, pBuff, BuffLen);
 8000a42:	887b      	ldrh	r3, [r7, #2]
 8000a44:	461a      	mov	r2, r3
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	2003      	movs	r0, #3
 8000a4a:	f000 f805 	bl	8000a58 <DMD_1COLOR_UpdateRow4>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
	...

08000a58 <DMD_1COLOR_UpdateRow4>:

//==============================================================================
// Процедура обновляет поочерёдно все матрицы экрана
//==============================================================================
void DMD_1COLOR_UpdateRow4(uint8_t Row4, uint8_t *pBuff, uint16_t BuffLen)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b088      	sub	sp, #32
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	6039      	str	r1, [r7, #0]
 8000a62:	71fb      	strb	r3, [r7, #7]
 8000a64:	4613      	mov	r3, r2
 8000a66:	80bb      	strh	r3, [r7, #4]
	// Подготавливаем данные для передачи
	uint16_t MatrixInRow = DMD_1COLOR_ScreenWidth / DMD_1COLOR_MatrixWidth;
 8000a68:	4b2e      	ldr	r3, [pc, #184]	; (8000b24 <DMD_1COLOR_UpdateRow4+0xcc>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	095b      	lsrs	r3, r3, #5
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	81bb      	strh	r3, [r7, #12]
	uint16_t MatrixInCol = DMD_1COLOR_ScreenHeight / DMD_1COLOR_MatrixHeight;
 8000a72:	4b2d      	ldr	r3, [pc, #180]	; (8000b28 <DMD_1COLOR_UpdateRow4+0xd0>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	091b      	lsrs	r3, r3, #4
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	817b      	strh	r3, [r7, #10]
	uint8_t MatrixLines8 = DMD_1COLOR_MatrixHeight >> 3;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	727b      	strb	r3, [r7, #9]
	uint16_t StartIdxRow = 0, StartIdxCol = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	83fb      	strh	r3, [r7, #30]
 8000a84:	2300      	movs	r3, #0
 8000a86:	83bb      	strh	r3, [r7, #28]

	for (uint8_t Row = 0; Row < MatrixInRow; Row++)
 8000a88:	2300      	movs	r3, #0
 8000a8a:	76fb      	strb	r3, [r7, #27]
 8000a8c:	e040      	b.n	8000b10 <DMD_1COLOR_UpdateRow4+0xb8>
	{
		StartIdxCol = StartIdxRow;
 8000a8e:	8bfb      	ldrh	r3, [r7, #30]
 8000a90:	83bb      	strh	r3, [r7, #28]

		for (uint8_t Col = 0; Col < MatrixInCol; Col++)
 8000a92:	2300      	movs	r3, #0
 8000a94:	76bb      	strb	r3, [r7, #26]
 8000a96:	e028      	b.n	8000aea <DMD_1COLOR_UpdateRow4+0x92>
		{
			// Копируем буфер кадра одной матрицы
			uint8_t *pDst = DMD_1COLOR_MatrixBuff;
 8000a98:	4b24      	ldr	r3, [pc, #144]	; (8000b2c <DMD_1COLOR_UpdateRow4+0xd4>)
 8000a9a:	617b      	str	r3, [r7, #20]
			uint8_t *pSrc = &pBuff[StartIdxCol];
 8000a9c:	8bbb      	ldrh	r3, [r7, #28]
 8000a9e:	683a      	ldr	r2, [r7, #0]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]

			for (uint8_t Line8 = 0; Line8 < MatrixLines8; Line8++)
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	73fb      	strb	r3, [r7, #15]
 8000aa8:	e015      	b.n	8000ad6 <DMD_1COLOR_UpdateRow4+0x7e>
			{
				memcpy(pDst, pSrc, DMD_1COLOR_MatrixWidth);
 8000aaa:	2220      	movs	r2, #32
 8000aac:	6939      	ldr	r1, [r7, #16]
 8000aae:	6978      	ldr	r0, [r7, #20]
 8000ab0:	f002 fefe 	bl	80038b0 <memcpy>
				DMD_1COLOR_SendFromMatrixBuff(Row4, DMD_1COLOR_MatrixBuff);
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	491d      	ldr	r1, [pc, #116]	; (8000b2c <DMD_1COLOR_UpdateRow4+0xd4>)
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 f839 	bl	8000b30 <DMD_1COLOR_SendFromMatrixBuff>
				pDst += DMD_1COLOR_MatrixWidth;
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	3320      	adds	r3, #32
 8000ac2:	617b      	str	r3, [r7, #20]
				pSrc += DMD_1COLOR_ScreenWidth;
 8000ac4:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <DMD_1COLOR_UpdateRow4+0xcc>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	4413      	add	r3, r2
 8000ace:	613b      	str	r3, [r7, #16]
			for (uint8_t Line8 = 0; Line8 < MatrixLines8; Line8++)
 8000ad0:	7bfb      	ldrb	r3, [r7, #15]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	73fb      	strb	r3, [r7, #15]
 8000ad6:	7bfa      	ldrb	r2, [r7, #15]
 8000ad8:	7a7b      	ldrb	r3, [r7, #9]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	d3e5      	bcc.n	8000aaa <DMD_1COLOR_UpdateRow4+0x52>
			}

			StartIdxCol += DMD_1COLOR_MatrixWidth;
 8000ade:	8bbb      	ldrh	r3, [r7, #28]
 8000ae0:	3320      	adds	r3, #32
 8000ae2:	83bb      	strh	r3, [r7, #28]
		for (uint8_t Col = 0; Col < MatrixInCol; Col++)
 8000ae4:	7ebb      	ldrb	r3, [r7, #26]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	76bb      	strb	r3, [r7, #26]
 8000aea:	7ebb      	ldrb	r3, [r7, #26]
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	897a      	ldrh	r2, [r7, #10]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d8d1      	bhi.n	8000a98 <DMD_1COLOR_UpdateRow4+0x40>
		}
		StartIdxRow += MatrixLines8 * DMD_1COLOR_ScreenWidth;
 8000af4:	7a7b      	ldrb	r3, [r7, #9]
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <DMD_1COLOR_UpdateRow4+0xcc>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	fb12 f303 	smulbb	r3, r2, r3
 8000b02:	b29a      	uxth	r2, r3
 8000b04:	8bfb      	ldrh	r3, [r7, #30]
 8000b06:	4413      	add	r3, r2
 8000b08:	83fb      	strh	r3, [r7, #30]
	for (uint8_t Row = 0; Row < MatrixInRow; Row++)
 8000b0a:	7efb      	ldrb	r3, [r7, #27]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	76fb      	strb	r3, [r7, #27]
 8000b10:	7efb      	ldrb	r3, [r7, #27]
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	89ba      	ldrh	r2, [r7, #12]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d8b9      	bhi.n	8000a8e <DMD_1COLOR_UpdateRow4+0x36>
	}
}
 8000b1a:	bf00      	nop
 8000b1c:	bf00      	nop
 8000b1e:	3720      	adds	r7, #32
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000001 	.word	0x20000001
 8000b28:	20000000 	.word	0x20000000
 8000b2c:	200000a4 	.word	0x200000a4

08000b30 <DMD_1COLOR_SendFromMatrixBuff>:

//==============================================================================
// Процедура обновляет 1 матрицу
//==============================================================================
void DMD_1COLOR_SendFromMatrixBuff(uint8_t Row4, uint8_t *pBuff)
{
 8000b30:	b590      	push	{r4, r7, lr}
 8000b32:	b087      	sub	sp, #28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	6039      	str	r1, [r7, #0]
 8000b3a:	71fb      	strb	r3, [r7, #7]
	uint8_t MatrixRows8bit = DMD_1COLOR_MatrixHeight >> 3;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	747b      	strb	r3, [r7, #17]
	uint8_t MatrixCols8bit = DMD_1COLOR_MatrixWidth >> 3;
 8000b40:	2304      	movs	r3, #4
 8000b42:	743b      	strb	r3, [r7, #16]
	uint8_t *pPart = (uint8_t *) &(DMD_1COLOR_Buff[Row4][0]);
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	011b      	lsls	r3, r3, #4
 8000b48:	4a22      	ldr	r2, [pc, #136]	; (8000bd4 <DMD_1COLOR_SendFromMatrixBuff+0xa4>)
 8000b4a:	4413      	add	r3, r2
 8000b4c:	617b      	str	r3, [r7, #20]

	for (uint8_t Col = 0; Col < MatrixCols8bit; Col++)
 8000b4e:	2300      	movs	r3, #0
 8000b50:	74fb      	strb	r3, [r7, #19]
 8000b52:	e035      	b.n	8000bc0 <DMD_1COLOR_SendFromMatrixBuff+0x90>
	{
		for (uint8_t Row = MatrixRows8bit; Row; Row--)
 8000b54:	7c7b      	ldrb	r3, [r7, #17]
 8000b56:	74bb      	strb	r3, [r7, #18]
 8000b58:	e02c      	b.n	8000bb4 <DMD_1COLOR_SendFromMatrixBuff+0x84>
		{
			uint8_t *p8Bytes = pBuff + ((Row - 1) * DMD_1COLOR_MatrixWidth);
 8000b5a:	7cbb      	ldrb	r3, [r7, #18]
 8000b5c:	3b01      	subs	r3, #1
 8000b5e:	015b      	lsls	r3, r3, #5
 8000b60:	461a      	mov	r2, r3
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	4413      	add	r3, r2
 8000b66:	60fb      	str	r3, [r7, #12]
			p8Bytes += (Col << 3);
 8000b68:	7cfb      	ldrb	r3, [r7, #19]
 8000b6a:	00db      	lsls	r3, r3, #3
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	4413      	add	r3, r2
 8000b72:	60fb      	str	r3, [r7, #12]

			*(pPart++) = DMD_1COLOR_GetFrom8ScreenBytes(1 << (Row4 + 4), p8Bytes);
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	3304      	adds	r3, #4
 8000b78:	2201      	movs	r2, #1
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	697c      	ldr	r4, [r7, #20]
 8000b82:	1c63      	adds	r3, r4, #1
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	68f9      	ldr	r1, [r7, #12]
 8000b88:	4610      	mov	r0, r2
 8000b8a:	f000 f825 	bl	8000bd8 <DMD_1COLOR_GetFrom8ScreenBytes>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	7023      	strb	r3, [r4, #0]
			*(pPart++) = DMD_1COLOR_GetFrom8ScreenBytes(1 << Row4, p8Bytes);
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	2201      	movs	r2, #1
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	697c      	ldr	r4, [r7, #20]
 8000b9e:	1c63      	adds	r3, r4, #1
 8000ba0:	617b      	str	r3, [r7, #20]
 8000ba2:	68f9      	ldr	r1, [r7, #12]
 8000ba4:	4610      	mov	r0, r2
 8000ba6:	f000 f817 	bl	8000bd8 <DMD_1COLOR_GetFrom8ScreenBytes>
 8000baa:	4603      	mov	r3, r0
 8000bac:	7023      	strb	r3, [r4, #0]
		for (uint8_t Row = MatrixRows8bit; Row; Row--)
 8000bae:	7cbb      	ldrb	r3, [r7, #18]
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	74bb      	strb	r3, [r7, #18]
 8000bb4:	7cbb      	ldrb	r3, [r7, #18]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d1cf      	bne.n	8000b5a <DMD_1COLOR_SendFromMatrixBuff+0x2a>
	for (uint8_t Col = 0; Col < MatrixCols8bit; Col++)
 8000bba:	7cfb      	ldrb	r3, [r7, #19]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	74fb      	strb	r3, [r7, #19]
 8000bc0:	7cfa      	ldrb	r2, [r7, #19]
 8000bc2:	7c3b      	ldrb	r3, [r7, #16]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d3c5      	bcc.n	8000b54 <DMD_1COLOR_SendFromMatrixBuff+0x24>
		}
	}
}
 8000bc8:	bf00      	nop
 8000bca:	bf00      	nop
 8000bcc:	371c      	adds	r7, #28
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd90      	pop	{r4, r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200000e4 	.word	0x200000e4

08000bd8 <DMD_1COLOR_GetFrom8ScreenBytes>:
//==============================================================================
// Функция возвращает байт (строку из 8 светодиодов) по 8-байтному фрагменту буфера
// графической библиотеки и маске соответствующей строки светодиодов во фрагменте
//==============================================================================
uint8_t DMD_1COLOR_GetFrom8ScreenBytes(uint8_t Mask, uint8_t *pBuff)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	6039      	str	r1, [r7, #0]
 8000be2:	71fb      	strb	r3, [r7, #7]
	uint8_t Byte = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	73fb      	strb	r3, [r7, #15]
	//Переводим "вертикальные" байты из массива в горизонтальные
	//в соответствии с текущей строкой.
	//В итоге получается массив, где биты расположены горизонтально,
	//Первый бит слева внизу, счет увеличивается вверх и вправо.
	//Но строки в секторе расположены сверху вниз
	for (uint8_t BitMask = 0x80; BitMask; BitMask >>= 1, pBuff++)
 8000be8:	2380      	movs	r3, #128	; 0x80
 8000bea:	73bb      	strb	r3, [r7, #14]
 8000bec:	e010      	b.n	8000c10 <DMD_1COLOR_GetFrom8ScreenBytes+0x38>
	{
		if (*pBuff & Mask)
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	781a      	ldrb	r2, [r3, #0]
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d003      	beq.n	8000c04 <DMD_1COLOR_GetFrom8ScreenBytes+0x2c>
			Byte |= BitMask;
 8000bfc:	7bfa      	ldrb	r2, [r7, #15]
 8000bfe:	7bbb      	ldrb	r3, [r7, #14]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	73fb      	strb	r3, [r7, #15]
	for (uint8_t BitMask = 0x80; BitMask; BitMask >>= 1, pBuff++)
 8000c04:	7bbb      	ldrb	r3, [r7, #14]
 8000c06:	085b      	lsrs	r3, r3, #1
 8000c08:	73bb      	strb	r3, [r7, #14]
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	7bbb      	ldrb	r3, [r7, #14]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d1eb      	bne.n	8000bee <DMD_1COLOR_GetFrom8ScreenBytes+0x16>
	}

//#if (DMD_1COLOR_Inverse == 1)
	//Инвертируем данные (так как LED панель горит при 0)
	Byte ^= 0xFF;
 8000c16:	7bfb      	ldrb	r3, [r7, #15]
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	73fb      	strb	r3, [r7, #15]
//#endif

	return Byte;
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
	...

08000c2c <prepare_data>:
//==============================================================================


//Копирование из подготовленного буфера в массивиы для построчного вводы в матрицу
void prepare_data() {
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
	//Идем по строкам
	for (uint8_t i = 0; i < sizeof(DMD_1COLOR_Buff) / sizeof(DMD_1COLOR_Buff[0]); i++) {
 8000c32:	2300      	movs	r3, #0
 8000c34:	71fb      	strb	r3, [r7, #7]
 8000c36:	e042      	b.n	8000cbe <prepare_data+0x92>
		//По столбцам
		for (uint8_t k = 0; k < sizeof(DMD_1COLOR_Buff[0]); k++) {
 8000c38:	2300      	movs	r3, #0
 8000c3a:	71bb      	strb	r3, [r7, #6]
 8000c3c:	e039      	b.n	8000cb2 <prepare_data+0x86>
			if (i == 0) {
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d10a      	bne.n	8000c5a <prepare_data+0x2e>
				data1[k] = DMD_1COLOR_Buff[i][k];
 8000c44:	79f9      	ldrb	r1, [r7, #7]
 8000c46:	79ba      	ldrb	r2, [r7, #6]
 8000c48:	79bb      	ldrb	r3, [r7, #6]
 8000c4a:	4822      	ldr	r0, [pc, #136]	; (8000cd4 <prepare_data+0xa8>)
 8000c4c:	0109      	lsls	r1, r1, #4
 8000c4e:	4401      	add	r1, r0
 8000c50:	440a      	add	r2, r1
 8000c52:	7811      	ldrb	r1, [r2, #0]
 8000c54:	4a20      	ldr	r2, [pc, #128]	; (8000cd8 <prepare_data+0xac>)
 8000c56:	54d1      	strb	r1, [r2, r3]
 8000c58:	e028      	b.n	8000cac <prepare_data+0x80>
			}
			else if (i == 1) {
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d10a      	bne.n	8000c76 <prepare_data+0x4a>
				data2[k] = DMD_1COLOR_Buff[i][k];
 8000c60:	79f9      	ldrb	r1, [r7, #7]
 8000c62:	79ba      	ldrb	r2, [r7, #6]
 8000c64:	79bb      	ldrb	r3, [r7, #6]
 8000c66:	481b      	ldr	r0, [pc, #108]	; (8000cd4 <prepare_data+0xa8>)
 8000c68:	0109      	lsls	r1, r1, #4
 8000c6a:	4401      	add	r1, r0
 8000c6c:	440a      	add	r2, r1
 8000c6e:	7811      	ldrb	r1, [r2, #0]
 8000c70:	4a1a      	ldr	r2, [pc, #104]	; (8000cdc <prepare_data+0xb0>)
 8000c72:	54d1      	strb	r1, [r2, r3]
 8000c74:	e01a      	b.n	8000cac <prepare_data+0x80>
			}
			else if (i == 2) {
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	d10a      	bne.n	8000c92 <prepare_data+0x66>
				data3[k] = DMD_1COLOR_Buff[i][k];
 8000c7c:	79f9      	ldrb	r1, [r7, #7]
 8000c7e:	79ba      	ldrb	r2, [r7, #6]
 8000c80:	79bb      	ldrb	r3, [r7, #6]
 8000c82:	4814      	ldr	r0, [pc, #80]	; (8000cd4 <prepare_data+0xa8>)
 8000c84:	0109      	lsls	r1, r1, #4
 8000c86:	4401      	add	r1, r0
 8000c88:	440a      	add	r2, r1
 8000c8a:	7811      	ldrb	r1, [r2, #0]
 8000c8c:	4a14      	ldr	r2, [pc, #80]	; (8000ce0 <prepare_data+0xb4>)
 8000c8e:	54d1      	strb	r1, [r2, r3]
 8000c90:	e00c      	b.n	8000cac <prepare_data+0x80>
			}
			else if (i == 3) {
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	2b03      	cmp	r3, #3
 8000c96:	d109      	bne.n	8000cac <prepare_data+0x80>
				data4[k] = DMD_1COLOR_Buff[i][k];
 8000c98:	79f9      	ldrb	r1, [r7, #7]
 8000c9a:	79ba      	ldrb	r2, [r7, #6]
 8000c9c:	79bb      	ldrb	r3, [r7, #6]
 8000c9e:	480d      	ldr	r0, [pc, #52]	; (8000cd4 <prepare_data+0xa8>)
 8000ca0:	0109      	lsls	r1, r1, #4
 8000ca2:	4401      	add	r1, r0
 8000ca4:	440a      	add	r2, r1
 8000ca6:	7811      	ldrb	r1, [r2, #0]
 8000ca8:	4a0e      	ldr	r2, [pc, #56]	; (8000ce4 <prepare_data+0xb8>)
 8000caa:	54d1      	strb	r1, [r2, r3]
		for (uint8_t k = 0; k < sizeof(DMD_1COLOR_Buff[0]); k++) {
 8000cac:	79bb      	ldrb	r3, [r7, #6]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	71bb      	strb	r3, [r7, #6]
 8000cb2:	79bb      	ldrb	r3, [r7, #6]
 8000cb4:	2b0f      	cmp	r3, #15
 8000cb6:	d9c2      	bls.n	8000c3e <prepare_data+0x12>
	for (uint8_t i = 0; i < sizeof(DMD_1COLOR_Buff) / sizeof(DMD_1COLOR_Buff[0]); i++) {
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	71fb      	strb	r3, [r7, #7]
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	2b03      	cmp	r3, #3
 8000cc2:	d9b9      	bls.n	8000c38 <prepare_data+0xc>
			}
		}
	}
}
 8000cc4:	bf00      	nop
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	200000e4 	.word	0x200000e4
 8000cd8:	20000164 	.word	0x20000164
 8000cdc:	20000174 	.word	0x20000174
 8000ce0:	20000184 	.word	0x20000184
 8000ce4:	20000194 	.word	0x20000194

08000ce8 <f10x16f_GetCharTable>:

//==============================================================================
// Функция возвращает указатель на подтаблицу символа Char
//==============================================================================
uint8_t *f10x16f_GetCharTable(uint8_t Char)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
  return (uint8_t *)(&f10x16f_table[Char][0]);
 8000cf2:	79fa      	ldrb	r2, [r7, #7]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	011b      	lsls	r3, r3, #4
 8000cf8:	4413      	add	r3, r2
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	4a03      	ldr	r2, [pc, #12]	; (8000d0c <f10x16f_GetCharTable+0x24>)
 8000cfe:	4413      	add	r3, r2
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	08004a38 	.word	0x08004a38

08000d10 <f6x8m_GetCharTable>:

//==============================================================================
// Функция возвращает указатель на подтаблицу символа Char
//==============================================================================
uint8_t *f6x8m_GetCharTable(uint8_t Char)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
  return (uint8_t *)(&f6x8m_table[Char][0]);
 8000d1a:	79fa      	ldrb	r2, [r7, #7]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	4413      	add	r3, r2
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	4a03      	ldr	r2, [pc, #12]	; (8000d34 <f6x8m_GetCharTable+0x24>)
 8000d26:	4413      	add	r3, r2
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	08006c38 	.word	0x08006c38

08000d38 <font_GetFontStruct>:

//==============================================================================
// Функция возвращает указатель на структуру, описывающую символ Char
//==============================================================================
uint8_t *font_GetFontStruct(uint8_t FontID, uint8_t Char)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	460a      	mov	r2, r1
 8000d42:	71fb      	strb	r3, [r7, #7]
 8000d44:	4613      	mov	r3, r2
 8000d46:	71bb      	strb	r3, [r7, #6]
  return font_table_funcs[FontID](Char);
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	4a05      	ldr	r2, [pc, #20]	; (8000d60 <font_GetFontStruct+0x28>)
 8000d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d50:	79ba      	ldrb	r2, [r7, #6]
 8000d52:	4610      	mov	r0, r2
 8000d54:	4798      	blx	r3
 8000d56:	4603      	mov	r3, r0
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	08007638 	.word	0x08007638

08000d64 <font_GetCharWidth>:

//==============================================================================
// Функция возвращает ширину символа
//==============================================================================
uint8_t font_GetCharWidth(uint8_t *pCharTable)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  return *pCharTable;  // Ширина символа
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	781b      	ldrb	r3, [r3, #0]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <font_GetCharHeight>:

//==============================================================================
// Функция возвращает высоту символа
//==============================================================================
uint8_t font_GetCharHeight(uint8_t *pCharTable)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  pCharTable++;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3301      	adds	r3, #1
 8000d88:	607b      	str	r3, [r7, #4]
  return *pCharTable;  // Высота символа
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	781b      	ldrb	r3, [r3, #0]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
	...

08000d9c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	; 0x28
 8000da0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
 8000db0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	4b38      	ldr	r3, [pc, #224]	; (8000e98 <MX_GPIO_Init+0xfc>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a37      	ldr	r2, [pc, #220]	; (8000e98 <MX_GPIO_Init+0xfc>)
 8000dbc:	f043 0304 	orr.w	r3, r3, #4
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b35      	ldr	r3, [pc, #212]	; (8000e98 <MX_GPIO_Init+0xfc>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0304 	and.w	r3, r3, #4
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	4b31      	ldr	r3, [pc, #196]	; (8000e98 <MX_GPIO_Init+0xfc>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4a30      	ldr	r2, [pc, #192]	; (8000e98 <MX_GPIO_Init+0xfc>)
 8000dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dde:	4b2e      	ldr	r3, [pc, #184]	; (8000e98 <MX_GPIO_Init+0xfc>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	4b2a      	ldr	r3, [pc, #168]	; (8000e98 <MX_GPIO_Init+0xfc>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a29      	ldr	r2, [pc, #164]	; (8000e98 <MX_GPIO_Init+0xfc>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4b27      	ldr	r3, [pc, #156]	; (8000e98 <MX_GPIO_Init+0xfc>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	4b23      	ldr	r3, [pc, #140]	; (8000e98 <MX_GPIO_Init+0xfc>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a22      	ldr	r2, [pc, #136]	; (8000e98 <MX_GPIO_Init+0xfc>)
 8000e10:	f043 0302 	orr.w	r3, r3, #2
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b20      	ldr	r3, [pc, #128]	; (8000e98 <MX_GPIO_Init+0xfc>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nOE_GPIO_Port, nOE_Pin, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2110      	movs	r1, #16
 8000e26:	481d      	ldr	r0, [pc, #116]	; (8000e9c <MX_GPIO_Init+0x100>)
 8000e28:	f001 f9be 	bl	80021a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCLK_Pin|A_Pin|B_Pin, GPIO_PIN_RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f44f 7142 	mov.w	r1, #776	; 0x308
 8000e32:	481b      	ldr	r0, [pc, #108]	; (8000ea0 <MX_GPIO_Init+0x104>)
 8000e34:	f001 f9b8 	bl	80021a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = button1_Pin;
 8000e38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e3e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button1_GPIO_Port, &GPIO_InitStruct);
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4815      	ldr	r0, [pc, #84]	; (8000ea4 <MX_GPIO_Init+0x108>)
 8000e50:	f000 ffe6 	bl	8001e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nOE_Pin;
 8000e54:	2310      	movs	r3, #16
 8000e56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(nOE_GPIO_Port, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	480c      	ldr	r0, [pc, #48]	; (8000e9c <MX_GPIO_Init+0x100>)
 8000e6c:	f000 ffd8 	bl	8001e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SCLK_Pin|A_Pin|B_Pin;
 8000e70:	f44f 7342 	mov.w	r3, #776	; 0x308
 8000e74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e76:	2301      	movs	r3, #1
 8000e78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	4619      	mov	r1, r3
 8000e88:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <MX_GPIO_Init+0x104>)
 8000e8a:	f000 ffc9 	bl	8001e20 <HAL_GPIO_Init>

}
 8000e8e:	bf00      	nop
 8000e90:	3728      	adds	r7, #40	; 0x28
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020000 	.word	0x40020000
 8000ea0:	40020400 	.word	0x40020400
 8000ea4:	40020800 	.word	0x40020800

08000ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b09a      	sub	sp, #104	; 0x68
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eae:	f000 fe33 	bl	8001b18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb2:	f000 f9d9 	bl	8001268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb6:	f7ff ff71 	bl	8000d9c <MX_GPIO_Init>
  MX_SPI2_Init();
 8000eba:	f000 fbb5 	bl	8001628 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000ebe:	f000 fd89 	bl	80019d4 <MX_TIM1_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 8000ec2:	488f      	ldr	r0, [pc, #572]	; (8001100 <main+0x258>)
 8000ec4:	f002 f88e 	bl	8002fe4 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(nOE_GPIO_Port, nOE_Pin, GPIO_PIN_RESET);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2110      	movs	r1, #16
 8000ecc:	488d      	ldr	r0, [pc, #564]	; (8001104 <main+0x25c>)
 8000ece:	f001 f96b 	bl	80021a8 <HAL_GPIO_WritePin>
  srand(time(NULL));
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f002 fd6e 	bl	80039b4 <time>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	460b      	mov	r3, r1
 8000edc:	4613      	mov	r3, r2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f002 fcfc 	bl	80038dc <srand>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin))
 8000ee4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ee8:	4887      	ldr	r0, [pc, #540]	; (8001108 <main+0x260>)
 8000eea:	f001 f945 	bl	8002178 <HAL_GPIO_ReadPin>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d004      	beq.n	8000efe <main+0x56>
		{
			direction = -1;
 8000ef4:	4b85      	ldr	r3, [pc, #532]	; (800110c <main+0x264>)
 8000ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	e002      	b.n	8000f04 <main+0x5c>
		}
		else
		{
			direction = 1;
 8000efe:	4b83      	ldr	r3, [pc, #524]	; (800110c <main+0x264>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	601a      	str	r2, [r3, #0]
		}
// внутри ветвления изменения 60 раз в 1 секунду
		if ((flag == 1) &&(Pisdead == 0)){
 8000f04:	4b82      	ldr	r3, [pc, #520]	; (8001110 <main+0x268>)
 8000f06:	881b      	ldrh	r3, [r3, #0]
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	f040 816f 	bne.w	80011ee <main+0x346>
 8000f10:	4b80      	ldr	r3, [pc, #512]	; (8001114 <main+0x26c>)
 8000f12:	881b      	ldrh	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	f040 816a 	bne.w	80011ee <main+0x346>
			enemy_shot_tim++;
 8000f1a:	4b7f      	ldr	r3, [pc, #508]	; (8001118 <main+0x270>)
 8000f1c:	881b      	ldrh	r3, [r3, #0]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	4b7d      	ldr	r3, [pc, #500]	; (8001118 <main+0x270>)
 8000f24:	801a      	strh	r2, [r3, #0]
			shot_tim++;
 8000f26:	4b7d      	ldr	r3, [pc, #500]	; (800111c <main+0x274>)
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	4b7b      	ldr	r3, [pc, #492]	; (800111c <main+0x274>)
 8000f30:	801a      	strh	r2, [r3, #0]
			ys = ys + direction;
 8000f32:	4b76      	ldr	r3, [pc, #472]	; (800110c <main+0x264>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	4b79      	ldr	r3, [pc, #484]	; (8001120 <main+0x278>)
 8000f3a:	881b      	ldrh	r3, [r3, #0]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	4b77      	ldr	r3, [pc, #476]	; (8001120 <main+0x278>)
 8000f42:	801a      	strh	r2, [r3, #0]
			int arr_xs[12] = {xs, xs, xs+1, xs+2, xs+1, xs+2, xs+3, xs+4, xs+2, xs+1, xs, xs};
 8000f44:	4b77      	ldr	r3, [pc, #476]	; (8001124 <main+0x27c>)
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	603b      	str	r3, [r7, #0]
 8000f4a:	4b76      	ldr	r3, [pc, #472]	; (8001124 <main+0x27c>)
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	4b74      	ldr	r3, [pc, #464]	; (8001124 <main+0x27c>)
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	3301      	adds	r3, #1
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	4b72      	ldr	r3, [pc, #456]	; (8001124 <main+0x27c>)
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	3302      	adds	r3, #2
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	4b70      	ldr	r3, [pc, #448]	; (8001124 <main+0x27c>)
 8000f62:	881b      	ldrh	r3, [r3, #0]
 8000f64:	3301      	adds	r3, #1
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	4b6e      	ldr	r3, [pc, #440]	; (8001124 <main+0x27c>)
 8000f6a:	881b      	ldrh	r3, [r3, #0]
 8000f6c:	3302      	adds	r3, #2
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	4b6c      	ldr	r3, [pc, #432]	; (8001124 <main+0x27c>)
 8000f72:	881b      	ldrh	r3, [r3, #0]
 8000f74:	3303      	adds	r3, #3
 8000f76:	61bb      	str	r3, [r7, #24]
 8000f78:	4b6a      	ldr	r3, [pc, #424]	; (8001124 <main+0x27c>)
 8000f7a:	881b      	ldrh	r3, [r3, #0]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	61fb      	str	r3, [r7, #28]
 8000f80:	4b68      	ldr	r3, [pc, #416]	; (8001124 <main+0x27c>)
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	3302      	adds	r3, #2
 8000f86:	623b      	str	r3, [r7, #32]
 8000f88:	4b66      	ldr	r3, [pc, #408]	; (8001124 <main+0x27c>)
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f90:	4b64      	ldr	r3, [pc, #400]	; (8001124 <main+0x27c>)
 8000f92:	881b      	ldrh	r3, [r3, #0]
 8000f94:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f96:	4b63      	ldr	r3, [pc, #396]	; (8001124 <main+0x27c>)
 8000f98:	881b      	ldrh	r3, [r3, #0]
 8000f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
			int arr_ys[12] = {ys-2, ys-1,  ys-1, ys-1, ys, ys, ys, ys, ys+1, ys+1, ys+1, ys+2};
 8000f9c:	4b60      	ldr	r3, [pc, #384]	; (8001120 <main+0x278>)
 8000f9e:	881b      	ldrh	r3, [r3, #0]
 8000fa0:	3b02      	subs	r3, #2
 8000fa2:	633b      	str	r3, [r7, #48]	; 0x30
 8000fa4:	4b5e      	ldr	r3, [pc, #376]	; (8001120 <main+0x278>)
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	637b      	str	r3, [r7, #52]	; 0x34
 8000fac:	4b5c      	ldr	r3, [pc, #368]	; (8001120 <main+0x278>)
 8000fae:	881b      	ldrh	r3, [r3, #0]
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8000fb4:	4b5a      	ldr	r3, [pc, #360]	; (8001120 <main+0x278>)
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000fbc:	4b58      	ldr	r3, [pc, #352]	; (8001120 <main+0x278>)
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	643b      	str	r3, [r7, #64]	; 0x40
 8000fc2:	4b57      	ldr	r3, [pc, #348]	; (8001120 <main+0x278>)
 8000fc4:	881b      	ldrh	r3, [r3, #0]
 8000fc6:	647b      	str	r3, [r7, #68]	; 0x44
 8000fc8:	4b55      	ldr	r3, [pc, #340]	; (8001120 <main+0x278>)
 8000fca:	881b      	ldrh	r3, [r3, #0]
 8000fcc:	64bb      	str	r3, [r7, #72]	; 0x48
 8000fce:	4b54      	ldr	r3, [pc, #336]	; (8001120 <main+0x278>)
 8000fd0:	881b      	ldrh	r3, [r3, #0]
 8000fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000fd4:	4b52      	ldr	r3, [pc, #328]	; (8001120 <main+0x278>)
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	653b      	str	r3, [r7, #80]	; 0x50
 8000fdc:	4b50      	ldr	r3, [pc, #320]	; (8001120 <main+0x278>)
 8000fde:	881b      	ldrh	r3, [r3, #0]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	657b      	str	r3, [r7, #84]	; 0x54
 8000fe4:	4b4e      	ldr	r3, [pc, #312]	; (8001120 <main+0x278>)
 8000fe6:	881b      	ldrh	r3, [r3, #0]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	65bb      	str	r3, [r7, #88]	; 0x58
 8000fec:	4b4c      	ldr	r3, [pc, #304]	; (8001120 <main+0x278>)
 8000fee:	881b      	ldrh	r3, [r3, #0]
 8000ff0:	3302      	adds	r3, #2
 8000ff2:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (ys > 13) ys=13;
 8000ff4:	4b4a      	ldr	r3, [pc, #296]	; (8001120 <main+0x278>)
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	2b0d      	cmp	r3, #13
 8000ffa:	d902      	bls.n	8001002 <main+0x15a>
 8000ffc:	4b48      	ldr	r3, [pc, #288]	; (8001120 <main+0x278>)
 8000ffe:	220d      	movs	r2, #13
 8001000:	801a      	strh	r2, [r3, #0]
			if (ys < 2) ys = 2;
 8001002:	4b47      	ldr	r3, [pc, #284]	; (8001120 <main+0x278>)
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d802      	bhi.n	8001010 <main+0x168>
 800100a:	4b45      	ldr	r3, [pc, #276]	; (8001120 <main+0x278>)
 800100c:	2202      	movs	r2, #2
 800100e:	801a      	strh	r2, [r3, #0]
			//стрельба
			if (shot_tim == 10) {
 8001010:	4b42      	ldr	r3, [pc, #264]	; (800111c <main+0x274>)
 8001012:	881b      	ldrh	r3, [r3, #0]
 8001014:	2b0a      	cmp	r3, #10
 8001016:	d114      	bne.n	8001042 <main+0x19a>
				xm2 = xm1;
 8001018:	4b43      	ldr	r3, [pc, #268]	; (8001128 <main+0x280>)
 800101a:	881a      	ldrh	r2, [r3, #0]
 800101c:	4b43      	ldr	r3, [pc, #268]	; (800112c <main+0x284>)
 800101e:	801a      	strh	r2, [r3, #0]
				ym2 = ym1;
 8001020:	4b43      	ldr	r3, [pc, #268]	; (8001130 <main+0x288>)
 8001022:	881a      	ldrh	r2, [r3, #0]
 8001024:	4b43      	ldr	r3, [pc, #268]	; (8001134 <main+0x28c>)
 8001026:	801a      	strh	r2, [r3, #0]
				xm1 = xs + 4;
 8001028:	4b3e      	ldr	r3, [pc, #248]	; (8001124 <main+0x27c>)
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	3304      	adds	r3, #4
 800102e:	b29a      	uxth	r2, r3
 8001030:	4b3d      	ldr	r3, [pc, #244]	; (8001128 <main+0x280>)
 8001032:	801a      	strh	r2, [r3, #0]
				ym1 = ys;
 8001034:	4b3a      	ldr	r3, [pc, #232]	; (8001120 <main+0x278>)
 8001036:	881a      	ldrh	r2, [r3, #0]
 8001038:	4b3d      	ldr	r3, [pc, #244]	; (8001130 <main+0x288>)
 800103a:	801a      	strh	r2, [r3, #0]
				shot_tim = 0;
 800103c:	4b37      	ldr	r3, [pc, #220]	; (800111c <main+0x274>)
 800103e:	2200      	movs	r2, #0
 8001040:	801a      	strh	r2, [r3, #0]
			}
			if ((!isdead) && (enemy_shot_tim == 20)) {
 8001042:	4b3d      	ldr	r3, [pc, #244]	; (8001138 <main+0x290>)
 8001044:	881b      	ldrh	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d118      	bne.n	800107c <main+0x1d4>
 800104a:	4b33      	ldr	r3, [pc, #204]	; (8001118 <main+0x270>)
 800104c:	881b      	ldrh	r3, [r3, #0]
 800104e:	2b14      	cmp	r3, #20
 8001050:	d114      	bne.n	800107c <main+0x1d4>
				xem2 = xem1;
 8001052:	4b3a      	ldr	r3, [pc, #232]	; (800113c <main+0x294>)
 8001054:	881a      	ldrh	r2, [r3, #0]
 8001056:	4b3a      	ldr	r3, [pc, #232]	; (8001140 <main+0x298>)
 8001058:	801a      	strh	r2, [r3, #0]
				yem2 = yem1;
 800105a:	4b3a      	ldr	r3, [pc, #232]	; (8001144 <main+0x29c>)
 800105c:	881a      	ldrh	r2, [r3, #0]
 800105e:	4b3a      	ldr	r3, [pc, #232]	; (8001148 <main+0x2a0>)
 8001060:	801a      	strh	r2, [r3, #0]
				xem1 = xe;
 8001062:	4b3a      	ldr	r3, [pc, #232]	; (800114c <main+0x2a4>)
 8001064:	881a      	ldrh	r2, [r3, #0]
 8001066:	4b35      	ldr	r3, [pc, #212]	; (800113c <main+0x294>)
 8001068:	801a      	strh	r2, [r3, #0]
				yem1 = ye + 1;
 800106a:	4b39      	ldr	r3, [pc, #228]	; (8001150 <main+0x2a8>)
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	3301      	adds	r3, #1
 8001070:	b29a      	uxth	r2, r3
 8001072:	4b34      	ldr	r3, [pc, #208]	; (8001144 <main+0x29c>)
 8001074:	801a      	strh	r2, [r3, #0]
				enemy_shot_tim = 0;
 8001076:	4b28      	ldr	r3, [pc, #160]	; (8001118 <main+0x270>)
 8001078:	2200      	movs	r2, #0
 800107a:	801a      	strh	r2, [r3, #0]
			}
			//координаты выстрелов
			xm1 = xm1 + 2;
 800107c:	4b2a      	ldr	r3, [pc, #168]	; (8001128 <main+0x280>)
 800107e:	881b      	ldrh	r3, [r3, #0]
 8001080:	3302      	adds	r3, #2
 8001082:	b29a      	uxth	r2, r3
 8001084:	4b28      	ldr	r3, [pc, #160]	; (8001128 <main+0x280>)
 8001086:	801a      	strh	r2, [r3, #0]
			xm2 = xm2 + 2;
 8001088:	4b28      	ldr	r3, [pc, #160]	; (800112c <main+0x284>)
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	3302      	adds	r3, #2
 800108e:	b29a      	uxth	r2, r3
 8001090:	4b26      	ldr	r3, [pc, #152]	; (800112c <main+0x284>)
 8001092:	801a      	strh	r2, [r3, #0]
			xem1--;
 8001094:	4b29      	ldr	r3, [pc, #164]	; (800113c <main+0x294>)
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	3b01      	subs	r3, #1
 800109a:	b29a      	uxth	r2, r3
 800109c:	4b27      	ldr	r3, [pc, #156]	; (800113c <main+0x294>)
 800109e:	801a      	strh	r2, [r3, #0]
			xem2--;
 80010a0:	4b27      	ldr	r3, [pc, #156]	; (8001140 <main+0x298>)
 80010a2:	881b      	ldrh	r3, [r3, #0]
 80010a4:	3b01      	subs	r3, #1
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	4b25      	ldr	r3, [pc, #148]	; (8001140 <main+0x298>)
 80010aa:	801a      	strh	r2, [r3, #0]

			if (isdead){
 80010ac:	4b22      	ldr	r3, [pc, #136]	; (8001138 <main+0x290>)
 80010ae:	881b      	ldrh	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d05e      	beq.n	8001172 <main+0x2ca>
				uint16_t CordRand = rand()%3+1;
 80010b4:	f002 fc40 	bl	8003938 <rand>
 80010b8:	4602      	mov	r2, r0
 80010ba:	4b26      	ldr	r3, [pc, #152]	; (8001154 <main+0x2ac>)
 80010bc:	fb83 3102 	smull	r3, r1, r3, r2
 80010c0:	17d3      	asrs	r3, r2, #31
 80010c2:	1ac9      	subs	r1, r1, r3
 80010c4:	460b      	mov	r3, r1
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	440b      	add	r3, r1
 80010ca:	1ad1      	subs	r1, r2, r3
 80010cc:	b28b      	uxth	r3, r1
 80010ce:	3301      	adds	r3, #1
 80010d0:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
				if (CordRand == 1){
 80010d4:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d106      	bne.n	80010ea <main+0x242>
					xe = 28;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	; (800114c <main+0x2a4>)
 80010de:	221c      	movs	r2, #28
 80010e0:	801a      	strh	r2, [r3, #0]
					ye = 2;
 80010e2:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <main+0x2a8>)
 80010e4:	2202      	movs	r2, #2
 80010e6:	801a      	strh	r2, [r3, #0]
 80010e8:	e040      	b.n	800116c <main+0x2c4>
				}
				else if (CordRand == 2){
 80010ea:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d132      	bne.n	8001158 <main+0x2b0>
					xe = 28;
 80010f2:	4b16      	ldr	r3, [pc, #88]	; (800114c <main+0x2a4>)
 80010f4:	221c      	movs	r2, #28
 80010f6:	801a      	strh	r2, [r3, #0]
					ye = 6;
 80010f8:	4b15      	ldr	r3, [pc, #84]	; (8001150 <main+0x2a8>)
 80010fa:	2206      	movs	r2, #6
 80010fc:	801a      	strh	r2, [r3, #0]
 80010fe:	e035      	b.n	800116c <main+0x2c4>
 8001100:	20000220 	.word	0x20000220
 8001104:	40020000 	.word	0x40020000
 8001108:	40020800 	.word	0x40020800
 800110c:	20000010 	.word	0x20000010
 8001110:	20000218 	.word	0x20000218
 8001114:	200001bc 	.word	0x200001bc
 8001118:	200001b6 	.word	0x200001b6
 800111c:	200001b4 	.word	0x200001b4
 8001120:	2000000e 	.word	0x2000000e
 8001124:	2000000c 	.word	0x2000000c
 8001128:	200001a4 	.word	0x200001a4
 800112c:	200001a8 	.word	0x200001a8
 8001130:	200001a6 	.word	0x200001a6
 8001134:	200001aa 	.word	0x200001aa
 8001138:	20000014 	.word	0x20000014
 800113c:	200001ac 	.word	0x200001ac
 8001140:	200001b0 	.word	0x200001b0
 8001144:	200001ae 	.word	0x200001ae
 8001148:	200001b2 	.word	0x200001b2
 800114c:	200001b8 	.word	0x200001b8
 8001150:	200001ba 	.word	0x200001ba
 8001154:	55555556 	.word	0x55555556
				}
				else if (CordRand == 3){
 8001158:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800115c:	2b03      	cmp	r3, #3
 800115e:	d105      	bne.n	800116c <main+0x2c4>
					xe = 28;
 8001160:	4b38      	ldr	r3, [pc, #224]	; (8001244 <main+0x39c>)
 8001162:	221c      	movs	r2, #28
 8001164:	801a      	strh	r2, [r3, #0]
					ye = 11;
 8001166:	4b38      	ldr	r3, [pc, #224]	; (8001248 <main+0x3a0>)
 8001168:	220b      	movs	r2, #11
 800116a:	801a      	strh	r2, [r3, #0]
				}
				isdead = 0;
 800116c:	4b37      	ldr	r3, [pc, #220]	; (800124c <main+0x3a4>)
 800116e:	2200      	movs	r2, #0
 8001170:	801a      	strh	r2, [r3, #0]
			}

			if ((xm2+1>=xe)&&(ym2>=ye)&&(ym2<=ye+2)){
 8001172:	4b37      	ldr	r3, [pc, #220]	; (8001250 <main+0x3a8>)
 8001174:	881b      	ldrh	r3, [r3, #0]
 8001176:	3301      	adds	r3, #1
 8001178:	4a32      	ldr	r2, [pc, #200]	; (8001244 <main+0x39c>)
 800117a:	8812      	ldrh	r2, [r2, #0]
 800117c:	4293      	cmp	r3, r2
 800117e:	db10      	blt.n	80011a2 <main+0x2fa>
 8001180:	4b34      	ldr	r3, [pc, #208]	; (8001254 <main+0x3ac>)
 8001182:	881a      	ldrh	r2, [r3, #0]
 8001184:	4b30      	ldr	r3, [pc, #192]	; (8001248 <main+0x3a0>)
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	429a      	cmp	r2, r3
 800118a:	d30a      	bcc.n	80011a2 <main+0x2fa>
 800118c:	4b31      	ldr	r3, [pc, #196]	; (8001254 <main+0x3ac>)
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	461a      	mov	r2, r3
 8001192:	4b2d      	ldr	r3, [pc, #180]	; (8001248 <main+0x3a0>)
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	3302      	adds	r3, #2
 8001198:	429a      	cmp	r2, r3
 800119a:	dc02      	bgt.n	80011a2 <main+0x2fa>
				isdead = 1;
 800119c:	4b2b      	ldr	r3, [pc, #172]	; (800124c <main+0x3a4>)
 800119e:	2201      	movs	r2, #1
 80011a0:	801a      	strh	r2, [r3, #0]
			}

			for (int i = 0; i <5; i++){
 80011a2:	2300      	movs	r3, #0
 80011a4:	667b      	str	r3, [r7, #100]	; 0x64
 80011a6:	e01c      	b.n	80011e2 <main+0x33a>
				if ((xem2 == arr_xs[i])&&(yem2==arr_ys[i])){
 80011a8:	4b2b      	ldr	r3, [pc, #172]	; (8001258 <main+0x3b0>)
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	461a      	mov	r2, r3
 80011ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	3368      	adds	r3, #104	; 0x68
 80011b4:	443b      	add	r3, r7
 80011b6:	f853 3c68 	ldr.w	r3, [r3, #-104]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d10e      	bne.n	80011dc <main+0x334>
 80011be:	4b27      	ldr	r3, [pc, #156]	; (800125c <main+0x3b4>)
 80011c0:	881b      	ldrh	r3, [r3, #0]
 80011c2:	461a      	mov	r2, r3
 80011c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	3368      	adds	r3, #104	; 0x68
 80011ca:	443b      	add	r3, r7
 80011cc:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d103      	bne.n	80011dc <main+0x334>
					Pisdead = 1;
 80011d4:	4b22      	ldr	r3, [pc, #136]	; (8001260 <main+0x3b8>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	801a      	strh	r2, [r3, #0]
					break;
 80011da:	e005      	b.n	80011e8 <main+0x340>
			for (int i = 0; i <5; i++){
 80011dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011de:	3301      	adds	r3, #1
 80011e0:	667b      	str	r3, [r7, #100]	; 0x64
 80011e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011e4:	2b04      	cmp	r3, #4
 80011e6:	dddf      	ble.n	80011a8 <main+0x300>
				}
			}



			flag = 0;
 80011e8:	4b1e      	ldr	r3, [pc, #120]	; (8001264 <main+0x3bc>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	801a      	strh	r2, [r3, #0]
		}
		if (Pisdead == 0){
 80011ee:	4b1c      	ldr	r3, [pc, #112]	; (8001260 <main+0x3b8>)
 80011f0:	881b      	ldrh	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d101      	bne.n	80011fa <main+0x352>
			draw_game();
 80011f6:	f000 f961 	bl	80014bc <draw_game>
		}
		if (Pisdead){
 80011fa:	4b19      	ldr	r3, [pc, #100]	; (8001260 <main+0x3b8>)
 80011fc:	881b      	ldrh	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <main+0x35e>
			game_over();
 8001202:	f000 f9f1 	bl	80015e8 <game_over>
		}

		disp1color_UpdateFromBuff(); //Перевод рассчитанных данных в массив
 8001206:	f7ff f9d7 	bl	80005b8 <disp1color_UpdateFromBuff>
		prepare_data(); //Разбиение массива на массивы под каждую строку
 800120a:	f7ff fd0f 	bl	8000c2c <prepare_data>

		//Включение матрицы (построчно)
		for (uint8_t i = 0; i < 20; i++) {
 800120e:	2300      	movs	r3, #0
 8001210:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 8001214:	e010      	b.n	8001238 <main+0x390>
			disp_row(0);
 8001216:	2000      	movs	r0, #0
 8001218:	f000 f886 	bl	8001328 <disp_row>
			disp_row(1);
 800121c:	2001      	movs	r0, #1
 800121e:	f000 f883 	bl	8001328 <disp_row>
			disp_row(2);
 8001222:	2002      	movs	r0, #2
 8001224:	f000 f880 	bl	8001328 <disp_row>
			disp_row(3);
 8001228:	2003      	movs	r0, #3
 800122a:	f000 f87d 	bl	8001328 <disp_row>
		for (uint8_t i = 0; i < 20; i++) {
 800122e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001232:	3301      	adds	r3, #1
 8001234:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 8001238:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800123c:	2b13      	cmp	r3, #19
 800123e:	d9ea      	bls.n	8001216 <main+0x36e>
	while (1) {
 8001240:	e650      	b.n	8000ee4 <main+0x3c>
 8001242:	bf00      	nop
 8001244:	200001b8 	.word	0x200001b8
 8001248:	200001ba 	.word	0x200001ba
 800124c:	20000014 	.word	0x20000014
 8001250:	200001a8 	.word	0x200001a8
 8001254:	200001aa 	.word	0x200001aa
 8001258:	200001b0 	.word	0x200001b0
 800125c:	200001b2 	.word	0x200001b2
 8001260:	200001bc 	.word	0x200001bc
 8001264:	20000218 	.word	0x20000218

08001268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b094      	sub	sp, #80	; 0x50
 800126c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126e:	f107 0320 	add.w	r3, r7, #32
 8001272:	2230      	movs	r2, #48	; 0x30
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f002 fb28 	bl	80038cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800128c:	2300      	movs	r3, #0
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	4b23      	ldr	r3, [pc, #140]	; (8001320 <SystemClock_Config+0xb8>)
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	4a22      	ldr	r2, [pc, #136]	; (8001320 <SystemClock_Config+0xb8>)
 8001296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800129a:	6413      	str	r3, [r2, #64]	; 0x40
 800129c:	4b20      	ldr	r3, [pc, #128]	; (8001320 <SystemClock_Config+0xb8>)
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012a8:	2300      	movs	r3, #0
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	4b1d      	ldr	r3, [pc, #116]	; (8001324 <SystemClock_Config+0xbc>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012b4:	4a1b      	ldr	r2, [pc, #108]	; (8001324 <SystemClock_Config+0xbc>)
 80012b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ba:	6013      	str	r3, [r2, #0]
 80012bc:	4b19      	ldr	r3, [pc, #100]	; (8001324 <SystemClock_Config+0xbc>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012c8:	2302      	movs	r3, #2
 80012ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012cc:	2301      	movs	r3, #1
 80012ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012d0:	2310      	movs	r3, #16
 80012d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d8:	f107 0320 	add.w	r3, r7, #32
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 ff7d 	bl	80021dc <HAL_RCC_OscConfig>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <SystemClock_Config+0x84>
  {
    Error_Handler();
 80012e8:	f000 f998 	bl	800161c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ec:	230f      	movs	r3, #15
 80012ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012f0:	2300      	movs	r3, #0
 80012f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001300:	f107 030c 	add.w	r3, r7, #12
 8001304:	2100      	movs	r1, #0
 8001306:	4618      	mov	r0, r3
 8001308:	f001 f9e0 	bl	80026cc <HAL_RCC_ClockConfig>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001312:	f000 f983 	bl	800161c <Error_Handler>
  }
}
 8001316:	bf00      	nop
 8001318:	3750      	adds	r7, #80	; 0x50
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40023800 	.word	0x40023800
 8001324:	40007000 	.word	0x40007000

08001328 <disp_row>:
  */


/* USER CODE BEGIN 4 */

  void disp_row(int row){
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]


  	  if (row == 0){
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d124      	bne.n	8001380 <disp_row+0x58>

  		  for(uint8_t i=0; i<6; i++){
 8001336:	2300      	movs	r3, #0
 8001338:	73fb      	strb	r3, [r7, #15]
 800133a:	e008      	b.n	800134e <disp_row+0x26>
  		  		HAL_SPI_Transmit(&hspi2, &data1, 16, 10);
 800133c:	230a      	movs	r3, #10
 800133e:	2210      	movs	r2, #16
 8001340:	4957      	ldr	r1, [pc, #348]	; (80014a0 <disp_row+0x178>)
 8001342:	4858      	ldr	r0, [pc, #352]	; (80014a4 <disp_row+0x17c>)
 8001344:	f001 fbf7 	bl	8002b36 <HAL_SPI_Transmit>
  		  for(uint8_t i=0; i<6; i++){
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	3301      	adds	r3, #1
 800134c:	73fb      	strb	r3, [r7, #15]
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	2b05      	cmp	r3, #5
 8001352:	d9f3      	bls.n	800133c <disp_row+0x14>
  		  }

  		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8001354:	2200      	movs	r2, #0
 8001356:	2108      	movs	r1, #8
 8001358:	4853      	ldr	r0, [pc, #332]	; (80014a8 <disp_row+0x180>)
 800135a:	f000 ff25 	bl	80021a8 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 800135e:	2201      	movs	r2, #1
 8001360:	2108      	movs	r1, #8
 8001362:	4851      	ldr	r0, [pc, #324]	; (80014a8 <disp_row+0x180>)
 8001364:	f000 ff20 	bl	80021a8 <HAL_GPIO_WritePin>

  		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800136e:	484e      	ldr	r0, [pc, #312]	; (80014a8 <disp_row+0x180>)
 8001370:	f000 ff1a 	bl	80021a8 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 8001374:	2200      	movs	r2, #0
 8001376:	f44f 7100 	mov.w	r1, #512	; 0x200
 800137a:	484b      	ldr	r0, [pc, #300]	; (80014a8 <disp_row+0x180>)
 800137c:	f000 ff14 	bl	80021a8 <HAL_GPIO_WritePin>
  	  }
  	  if (row == 1){
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d124      	bne.n	80013d0 <disp_row+0xa8>

  		  for(uint8_t i=0; i<6; i++){
 8001386:	2300      	movs	r3, #0
 8001388:	73bb      	strb	r3, [r7, #14]
 800138a:	e008      	b.n	800139e <disp_row+0x76>
  		  		HAL_SPI_Transmit(&hspi2, &data2, 16, 10);
 800138c:	230a      	movs	r3, #10
 800138e:	2210      	movs	r2, #16
 8001390:	4946      	ldr	r1, [pc, #280]	; (80014ac <disp_row+0x184>)
 8001392:	4844      	ldr	r0, [pc, #272]	; (80014a4 <disp_row+0x17c>)
 8001394:	f001 fbcf 	bl	8002b36 <HAL_SPI_Transmit>
  		  for(uint8_t i=0; i<6; i++){
 8001398:	7bbb      	ldrb	r3, [r7, #14]
 800139a:	3301      	adds	r3, #1
 800139c:	73bb      	strb	r3, [r7, #14]
 800139e:	7bbb      	ldrb	r3, [r7, #14]
 80013a0:	2b05      	cmp	r3, #5
 80013a2:	d9f3      	bls.n	800138c <disp_row+0x64>
  		  }

  		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 80013a4:	2200      	movs	r2, #0
 80013a6:	2108      	movs	r1, #8
 80013a8:	483f      	ldr	r0, [pc, #252]	; (80014a8 <disp_row+0x180>)
 80013aa:	f000 fefd 	bl	80021a8 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 80013ae:	2201      	movs	r2, #1
 80013b0:	2108      	movs	r1, #8
 80013b2:	483d      	ldr	r0, [pc, #244]	; (80014a8 <disp_row+0x180>)
 80013b4:	f000 fef8 	bl	80021a8 <HAL_GPIO_WritePin>

  		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 80013b8:	2201      	movs	r2, #1
 80013ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013be:	483a      	ldr	r0, [pc, #232]	; (80014a8 <disp_row+0x180>)
 80013c0:	f000 fef2 	bl	80021a8 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 80013c4:	2200      	movs	r2, #0
 80013c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013ca:	4837      	ldr	r0, [pc, #220]	; (80014a8 <disp_row+0x180>)
 80013cc:	f000 feec 	bl	80021a8 <HAL_GPIO_WritePin>
  	  }

  	  if (row == 2){
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d124      	bne.n	8001420 <disp_row+0xf8>

  		  for(uint8_t i=0; i<6; i++){
 80013d6:	2300      	movs	r3, #0
 80013d8:	737b      	strb	r3, [r7, #13]
 80013da:	e008      	b.n	80013ee <disp_row+0xc6>
  		  		HAL_SPI_Transmit(&hspi2, &data3, 16, 10);
 80013dc:	230a      	movs	r3, #10
 80013de:	2210      	movs	r2, #16
 80013e0:	4933      	ldr	r1, [pc, #204]	; (80014b0 <disp_row+0x188>)
 80013e2:	4830      	ldr	r0, [pc, #192]	; (80014a4 <disp_row+0x17c>)
 80013e4:	f001 fba7 	bl	8002b36 <HAL_SPI_Transmit>
  		  for(uint8_t i=0; i<6; i++){
 80013e8:	7b7b      	ldrb	r3, [r7, #13]
 80013ea:	3301      	adds	r3, #1
 80013ec:	737b      	strb	r3, [r7, #13]
 80013ee:	7b7b      	ldrb	r3, [r7, #13]
 80013f0:	2b05      	cmp	r3, #5
 80013f2:	d9f3      	bls.n	80013dc <disp_row+0xb4>
  		  }

  		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 80013f4:	2200      	movs	r2, #0
 80013f6:	2108      	movs	r1, #8
 80013f8:	482b      	ldr	r0, [pc, #172]	; (80014a8 <disp_row+0x180>)
 80013fa:	f000 fed5 	bl	80021a8 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 80013fe:	2201      	movs	r2, #1
 8001400:	2108      	movs	r1, #8
 8001402:	4829      	ldr	r0, [pc, #164]	; (80014a8 <disp_row+0x180>)
 8001404:	f000 fed0 	bl	80021a8 <HAL_GPIO_WritePin>

  		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 8001408:	2200      	movs	r2, #0
 800140a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800140e:	4826      	ldr	r0, [pc, #152]	; (80014a8 <disp_row+0x180>)
 8001410:	f000 feca 	bl	80021a8 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8001414:	2201      	movs	r2, #1
 8001416:	f44f 7100 	mov.w	r1, #512	; 0x200
 800141a:	4823      	ldr	r0, [pc, #140]	; (80014a8 <disp_row+0x180>)
 800141c:	f000 fec4 	bl	80021a8 <HAL_GPIO_WritePin>
  	  }

  	  if (row == 3){
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b03      	cmp	r3, #3
 8001424:	d124      	bne.n	8001470 <disp_row+0x148>

  		  for(uint8_t i=0; i<6; i++){
 8001426:	2300      	movs	r3, #0
 8001428:	733b      	strb	r3, [r7, #12]
 800142a:	e008      	b.n	800143e <disp_row+0x116>
  		  		HAL_SPI_Transmit(&hspi2, &data4, 16, 10);
 800142c:	230a      	movs	r3, #10
 800142e:	2210      	movs	r2, #16
 8001430:	4920      	ldr	r1, [pc, #128]	; (80014b4 <disp_row+0x18c>)
 8001432:	481c      	ldr	r0, [pc, #112]	; (80014a4 <disp_row+0x17c>)
 8001434:	f001 fb7f 	bl	8002b36 <HAL_SPI_Transmit>
  		  for(uint8_t i=0; i<6; i++){
 8001438:	7b3b      	ldrb	r3, [r7, #12]
 800143a:	3301      	adds	r3, #1
 800143c:	733b      	strb	r3, [r7, #12]
 800143e:	7b3b      	ldrb	r3, [r7, #12]
 8001440:	2b05      	cmp	r3, #5
 8001442:	d9f3      	bls.n	800142c <disp_row+0x104>
  		  }

  		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8001444:	2200      	movs	r2, #0
 8001446:	2108      	movs	r1, #8
 8001448:	4817      	ldr	r0, [pc, #92]	; (80014a8 <disp_row+0x180>)
 800144a:	f000 fead 	bl	80021a8 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 800144e:	2201      	movs	r2, #1
 8001450:	2108      	movs	r1, #8
 8001452:	4815      	ldr	r0, [pc, #84]	; (80014a8 <disp_row+0x180>)
 8001454:	f000 fea8 	bl	80021a8 <HAL_GPIO_WritePin>

  		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8001458:	2201      	movs	r2, #1
 800145a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800145e:	4812      	ldr	r0, [pc, #72]	; (80014a8 <disp_row+0x180>)
 8001460:	f000 fea2 	bl	80021a8 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8001464:	2201      	movs	r2, #1
 8001466:	f44f 7100 	mov.w	r1, #512	; 0x200
 800146a:	480f      	ldr	r0, [pc, #60]	; (80014a8 <disp_row+0x180>)
 800146c:	f000 fe9c 	bl	80021a8 <HAL_GPIO_WritePin>
  	  }


  	  HAL_GPIO_WritePin(nOE_GPIO_Port, nOE_Pin, GPIO_PIN_SET);
 8001470:	2201      	movs	r2, #1
 8001472:	2110      	movs	r1, #16
 8001474:	4810      	ldr	r0, [pc, #64]	; (80014b8 <disp_row+0x190>)
 8001476:	f000 fe97 	bl	80021a8 <HAL_GPIO_WritePin>
  		  for(uint32_t x=0; x<=500; x++) {};
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	e002      	b.n	8001486 <disp_row+0x15e>
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	3301      	adds	r3, #1
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800148c:	d9f8      	bls.n	8001480 <disp_row+0x158>
  	 HAL_GPIO_WritePin(nOE_GPIO_Port, nOE_Pin, GPIO_PIN_RESET);
 800148e:	2200      	movs	r2, #0
 8001490:	2110      	movs	r1, #16
 8001492:	4809      	ldr	r0, [pc, #36]	; (80014b8 <disp_row+0x190>)
 8001494:	f000 fe88 	bl	80021a8 <HAL_GPIO_WritePin>
    }
 8001498:	bf00      	nop
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000164 	.word	0x20000164
 80014a4:	200001c0 	.word	0x200001c0
 80014a8:	40020400 	.word	0x40020400
 80014ac:	20000174 	.word	0x20000174
 80014b0:	20000184 	.word	0x20000184
 80014b4:	20000194 	.word	0x20000194
 80014b8:	40020000 	.word	0x40020000

080014bc <draw_game>:
void draw_game() {
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
	disp1color_FillScreenbuff(0); //очищение экрана перед выводом новых фигур
 80014c0:	2000      	movs	r0, #0
 80014c2:	f7ff f867 	bl	8000594 <disp1color_FillScreenbuff>

	disp1color_DrawLine((int) xm1, (int) ym1, (int) xm1 + 1, (int) ym1); //отрисовка снарядов нашего корабля
 80014c6:	4b3c      	ldr	r3, [pc, #240]	; (80015b8 <draw_game+0xfc>)
 80014c8:	881b      	ldrh	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	4b3b      	ldr	r3, [pc, #236]	; (80015bc <draw_game+0x100>)
 80014ce:	881b      	ldrh	r3, [r3, #0]
 80014d0:	4619      	mov	r1, r3
 80014d2:	4b39      	ldr	r3, [pc, #228]	; (80015b8 <draw_game+0xfc>)
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	1c5a      	adds	r2, r3, #1
 80014d8:	4b38      	ldr	r3, [pc, #224]	; (80015bc <draw_game+0x100>)
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	f7ff f8d4 	bl	8000688 <disp1color_DrawLine>
	disp1color_DrawLine((int) xm2, (int) ym2, (int) xm2 + 1, (int) ym2);
 80014e0:	4b37      	ldr	r3, [pc, #220]	; (80015c0 <draw_game+0x104>)
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	4b37      	ldr	r3, [pc, #220]	; (80015c4 <draw_game+0x108>)
 80014e8:	881b      	ldrh	r3, [r3, #0]
 80014ea:	4619      	mov	r1, r3
 80014ec:	4b34      	ldr	r3, [pc, #208]	; (80015c0 <draw_game+0x104>)
 80014ee:	881b      	ldrh	r3, [r3, #0]
 80014f0:	1c5a      	adds	r2, r3, #1
 80014f2:	4b34      	ldr	r3, [pc, #208]	; (80015c4 <draw_game+0x108>)
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	f7ff f8c7 	bl	8000688 <disp1color_DrawLine>

	disp1color_DrawPixel(xem1, yem1, 1); //отрисовка вражеских снарядов
 80014fa:	4b33      	ldr	r3, [pc, #204]	; (80015c8 <draw_game+0x10c>)
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	4b32      	ldr	r3, [pc, #200]	; (80015cc <draw_game+0x110>)
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	2201      	movs	r2, #1
 8001506:	4619      	mov	r1, r3
 8001508:	f7ff f860 	bl	80005cc <disp1color_DrawPixel>
	disp1color_DrawPixel(xem2, yem2, 1);
 800150c:	4b30      	ldr	r3, [pc, #192]	; (80015d0 <draw_game+0x114>)
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	4b30      	ldr	r3, [pc, #192]	; (80015d4 <draw_game+0x118>)
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	2201      	movs	r2, #1
 8001518:	4619      	mov	r1, r3
 800151a:	f7ff f857 	bl	80005cc <disp1color_DrawPixel>

	disp1color_DrawRectangle(xe, ye, xe + 2, ye + 2); //отрисовка вражеского прямоугольника
 800151e:	4b2e      	ldr	r3, [pc, #184]	; (80015d8 <draw_game+0x11c>)
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	4b2d      	ldr	r3, [pc, #180]	; (80015dc <draw_game+0x120>)
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	4619      	mov	r1, r3
 800152a:	4b2b      	ldr	r3, [pc, #172]	; (80015d8 <draw_game+0x11c>)
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	1c9a      	adds	r2, r3, #2
 8001530:	4b2a      	ldr	r3, [pc, #168]	; (80015dc <draw_game+0x120>)
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	3302      	adds	r3, #2
 8001536:	f7ff f92a 	bl	800078e <disp1color_DrawRectangle>

	disp1color_DrawPixel((int) xs, (int) ys - 2, 1);
 800153a:	4b29      	ldr	r3, [pc, #164]	; (80015e0 <draw_game+0x124>)
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	4b28      	ldr	r3, [pc, #160]	; (80015e4 <draw_game+0x128>)
 8001542:	881b      	ldrh	r3, [r3, #0]
 8001544:	3b02      	subs	r3, #2
 8001546:	2201      	movs	r2, #1
 8001548:	4619      	mov	r1, r3
 800154a:	f7ff f83f 	bl	80005cc <disp1color_DrawPixel>
	disp1color_DrawLine((int) xs, (int) ys - 1, (int) xs + 2, (int) ys - 1); //отрисовка данных для корабля
 800154e:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <draw_game+0x124>)
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	4b23      	ldr	r3, [pc, #140]	; (80015e4 <draw_game+0x128>)
 8001556:	881b      	ldrh	r3, [r3, #0]
 8001558:	1e59      	subs	r1, r3, #1
 800155a:	4b21      	ldr	r3, [pc, #132]	; (80015e0 <draw_game+0x124>)
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	1c9a      	adds	r2, r3, #2
 8001560:	4b20      	ldr	r3, [pc, #128]	; (80015e4 <draw_game+0x128>)
 8001562:	881b      	ldrh	r3, [r3, #0]
 8001564:	3b01      	subs	r3, #1
 8001566:	f7ff f88f 	bl	8000688 <disp1color_DrawLine>
	disp1color_DrawLine((int) xs + 1, (int) ys, (int) xs + 4, (int) ys);     //под отрисовкой понимается расчёт данных для массива
 800156a:	4b1d      	ldr	r3, [pc, #116]	; (80015e0 <draw_game+0x124>)
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	1c58      	adds	r0, r3, #1
 8001570:	4b1c      	ldr	r3, [pc, #112]	; (80015e4 <draw_game+0x128>)
 8001572:	881b      	ldrh	r3, [r3, #0]
 8001574:	4619      	mov	r1, r3
 8001576:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <draw_game+0x124>)
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	1d1a      	adds	r2, r3, #4
 800157c:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <draw_game+0x128>)
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	f7ff f882 	bl	8000688 <disp1color_DrawLine>
	disp1color_DrawLine((int) xs, (int) ys + 1, (int) xs + 2, (int) ys + 1); //который позже пойдёт в регистры матрицы и будет выводить изображение
 8001584:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <draw_game+0x124>)
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <draw_game+0x128>)
 800158c:	881b      	ldrh	r3, [r3, #0]
 800158e:	1c59      	adds	r1, r3, #1
 8001590:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <draw_game+0x124>)
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	1c9a      	adds	r2, r3, #2
 8001596:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <draw_game+0x128>)
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	3301      	adds	r3, #1
 800159c:	f7ff f874 	bl	8000688 <disp1color_DrawLine>
	disp1color_DrawPixel((int) xs, (int) ys + 2, 1);
 80015a0:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <draw_game+0x124>)
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <draw_game+0x128>)
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	3302      	adds	r3, #2
 80015ac:	2201      	movs	r2, #1
 80015ae:	4619      	mov	r1, r3
 80015b0:	f7ff f80c 	bl	80005cc <disp1color_DrawPixel>
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	200001a4 	.word	0x200001a4
 80015bc:	200001a6 	.word	0x200001a6
 80015c0:	200001a8 	.word	0x200001a8
 80015c4:	200001aa 	.word	0x200001aa
 80015c8:	200001ac 	.word	0x200001ac
 80015cc:	200001ae 	.word	0x200001ae
 80015d0:	200001b0 	.word	0x200001b0
 80015d4:	200001b2 	.word	0x200001b2
 80015d8:	200001b8 	.word	0x200001b8
 80015dc:	200001ba 	.word	0x200001ba
 80015e0:	2000000c 	.word	0x2000000c
 80015e4:	2000000e 	.word	0x2000000e

080015e8 <game_over>:
void game_over() {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
	disp1color_FillScreenbuff(0);
 80015ec:	2000      	movs	r0, #0
 80015ee:	f7fe ffd1 	bl	8000594 <disp1color_FillScreenbuff>

	disp1color_DrawString(7, 0, FONTID_6X8M, pMyStr);
 80015f2:	4b08      	ldr	r3, [pc, #32]	; (8001614 <game_over+0x2c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2200      	movs	r2, #0
 80015f8:	2100      	movs	r1, #0
 80015fa:	2007      	movs	r0, #7
 80015fc:	f7ff f9b8 	bl	8000970 <disp1color_DrawString>
	disp1color_DrawString(5, 8, FONTID_6X8M, pMyStr2);
 8001600:	4b05      	ldr	r3, [pc, #20]	; (8001618 <game_over+0x30>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2200      	movs	r2, #0
 8001606:	2108      	movs	r1, #8
 8001608:	2005      	movs	r0, #5
 800160a:	f7ff f9b1 	bl	8000970 <disp1color_DrawString>
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000004 	.word	0x20000004
 8001618:	20000008 	.word	0x20000008

0800161c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001620:	b672      	cpsid	i
}
 8001622:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001624:	e7fe      	b.n	8001624 <Error_Handler+0x8>
	...

08001628 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800162c:	4b17      	ldr	r3, [pc, #92]	; (800168c <MX_SPI2_Init+0x64>)
 800162e:	4a18      	ldr	r2, [pc, #96]	; (8001690 <MX_SPI2_Init+0x68>)
 8001630:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001632:	4b16      	ldr	r3, [pc, #88]	; (800168c <MX_SPI2_Init+0x64>)
 8001634:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001638:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800163a:	4b14      	ldr	r3, [pc, #80]	; (800168c <MX_SPI2_Init+0x64>)
 800163c:	2200      	movs	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001640:	4b12      	ldr	r3, [pc, #72]	; (800168c <MX_SPI2_Init+0x64>)
 8001642:	2200      	movs	r2, #0
 8001644:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001646:	4b11      	ldr	r3, [pc, #68]	; (800168c <MX_SPI2_Init+0x64>)
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800164c:	4b0f      	ldr	r3, [pc, #60]	; (800168c <MX_SPI2_Init+0x64>)
 800164e:	2200      	movs	r2, #0
 8001650:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001652:	4b0e      	ldr	r3, [pc, #56]	; (800168c <MX_SPI2_Init+0x64>)
 8001654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001658:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800165a:	4b0c      	ldr	r3, [pc, #48]	; (800168c <MX_SPI2_Init+0x64>)
 800165c:	2200      	movs	r2, #0
 800165e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001660:	4b0a      	ldr	r3, [pc, #40]	; (800168c <MX_SPI2_Init+0x64>)
 8001662:	2200      	movs	r2, #0
 8001664:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001666:	4b09      	ldr	r3, [pc, #36]	; (800168c <MX_SPI2_Init+0x64>)
 8001668:	2200      	movs	r2, #0
 800166a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800166c:	4b07      	ldr	r3, [pc, #28]	; (800168c <MX_SPI2_Init+0x64>)
 800166e:	2200      	movs	r2, #0
 8001670:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001672:	4b06      	ldr	r3, [pc, #24]	; (800168c <MX_SPI2_Init+0x64>)
 8001674:	220a      	movs	r2, #10
 8001676:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001678:	4804      	ldr	r0, [pc, #16]	; (800168c <MX_SPI2_Init+0x64>)
 800167a:	f001 f9d3 	bl	8002a24 <HAL_SPI_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001684:	f7ff ffca 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}
 800168c:	200001c0 	.word	0x200001c0
 8001690:	40003800 	.word	0x40003800

08001694 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08a      	sub	sp, #40	; 0x28
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a28      	ldr	r2, [pc, #160]	; (8001754 <HAL_SPI_MspInit+0xc0>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d14a      	bne.n	800174c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	4b27      	ldr	r3, [pc, #156]	; (8001758 <HAL_SPI_MspInit+0xc4>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	4a26      	ldr	r2, [pc, #152]	; (8001758 <HAL_SPI_MspInit+0xc4>)
 80016c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016c4:	6413      	str	r3, [r2, #64]	; 0x40
 80016c6:	4b24      	ldr	r3, [pc, #144]	; (8001758 <HAL_SPI_MspInit+0xc4>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ce:	613b      	str	r3, [r7, #16]
 80016d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	4b20      	ldr	r3, [pc, #128]	; (8001758 <HAL_SPI_MspInit+0xc4>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a1f      	ldr	r2, [pc, #124]	; (8001758 <HAL_SPI_MspInit+0xc4>)
 80016dc:	f043 0304 	orr.w	r3, r3, #4
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <HAL_SPI_MspInit+0xc4>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	4b19      	ldr	r3, [pc, #100]	; (8001758 <HAL_SPI_MspInit+0xc4>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a18      	ldr	r2, [pc, #96]	; (8001758 <HAL_SPI_MspInit+0xc4>)
 80016f8:	f043 0302 	orr.w	r3, r3, #2
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b16      	ldr	r3, [pc, #88]	; (8001758 <HAL_SPI_MspInit+0xc4>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800170a:	2308      	movs	r3, #8
 800170c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170e:	2302      	movs	r3, #2
 8001710:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001716:	2303      	movs	r3, #3
 8001718:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800171a:	2305      	movs	r3, #5
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	4619      	mov	r1, r3
 8001724:	480d      	ldr	r0, [pc, #52]	; (800175c <HAL_SPI_MspInit+0xc8>)
 8001726:	f000 fb7b 	bl	8001e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800172a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800172e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001738:	2303      	movs	r3, #3
 800173a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800173c:	2305      	movs	r3, #5
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	4806      	ldr	r0, [pc, #24]	; (8001760 <HAL_SPI_MspInit+0xcc>)
 8001748:	f000 fb6a 	bl	8001e20 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800174c:	bf00      	nop
 800174e:	3728      	adds	r7, #40	; 0x28
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40003800 	.word	0x40003800
 8001758:	40023800 	.word	0x40023800
 800175c:	40020800 	.word	0x40020800
 8001760:	40020400 	.word	0x40020400

08001764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	607b      	str	r3, [r7, #4]
 800176e:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <HAL_MspInit+0x4c>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001772:	4a0f      	ldr	r2, [pc, #60]	; (80017b0 <HAL_MspInit+0x4c>)
 8001774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001778:	6453      	str	r3, [r2, #68]	; 0x44
 800177a:	4b0d      	ldr	r3, [pc, #52]	; (80017b0 <HAL_MspInit+0x4c>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	603b      	str	r3, [r7, #0]
 800178a:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <HAL_MspInit+0x4c>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	4a08      	ldr	r2, [pc, #32]	; (80017b0 <HAL_MspInit+0x4c>)
 8001790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001794:	6413      	str	r3, [r2, #64]	; 0x40
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_MspInit+0x4c>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179e:	603b      	str	r3, [r7, #0]
 80017a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800

080017b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <NMI_Handler+0x4>

080017ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017be:	e7fe      	b.n	80017be <HardFault_Handler+0x4>

080017c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <MemManage_Handler+0x4>

080017c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ca:	e7fe      	b.n	80017ca <BusFault_Handler+0x4>

080017cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <UsageFault_Handler+0x4>

080017d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001800:	f000 f9dc 	bl	8001bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}

08001808 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800180c:	4803      	ldr	r0, [pc, #12]	; (800181c <TIM1_UP_TIM10_IRQHandler+0x14>)
 800180e:	f001 fc59 	bl	80030c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  flag = 1;
 8001812:	4b03      	ldr	r3, [pc, #12]	; (8001820 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001814:	2201      	movs	r2, #1
 8001816:	801a      	strh	r2, [r3, #0]

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000220 	.word	0x20000220
 8001820:	20000218 	.word	0x20000218

08001824 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  return 1;
 8001828:	2301      	movs	r3, #1
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <_kill>:

int _kill(int pid, int sig)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800183e:	f002 f80d 	bl	800385c <__errno>
 8001842:	4603      	mov	r3, r0
 8001844:	2216      	movs	r2, #22
 8001846:	601a      	str	r2, [r3, #0]
  return -1;
 8001848:	f04f 33ff 	mov.w	r3, #4294967295
}
 800184c:	4618      	mov	r0, r3
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <_exit>:

void _exit (int status)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800185c:	f04f 31ff 	mov.w	r1, #4294967295
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff ffe7 	bl	8001834 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001866:	e7fe      	b.n	8001866 <_exit+0x12>

08001868 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	e00a      	b.n	8001890 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800187a:	f3af 8000 	nop.w
 800187e:	4601      	mov	r1, r0
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	60ba      	str	r2, [r7, #8]
 8001886:	b2ca      	uxtb	r2, r1
 8001888:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	3301      	adds	r3, #1
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	429a      	cmp	r2, r3
 8001896:	dbf0      	blt.n	800187a <_read+0x12>
  }

  return len;
 8001898:	687b      	ldr	r3, [r7, #4]
}
 800189a:	4618      	mov	r0, r3
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b086      	sub	sp, #24
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	60f8      	str	r0, [r7, #12]
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	e009      	b.n	80018c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	1c5a      	adds	r2, r3, #1
 80018b8:	60ba      	str	r2, [r7, #8]
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	3301      	adds	r3, #1
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	697a      	ldr	r2, [r7, #20]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	dbf1      	blt.n	80018b4 <_write+0x12>
  }
  return len;
 80018d0:	687b      	ldr	r3, [r7, #4]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <_close>:

int _close(int file)
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
 80018fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001902:	605a      	str	r2, [r3, #4]
  return 0;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <_isatty>:

int _isatty(int file)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800191a:	2301      	movs	r3, #1
}
 800191c:	4618      	mov	r0, r3
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
	...

08001944 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800194c:	4a14      	ldr	r2, [pc, #80]	; (80019a0 <_sbrk+0x5c>)
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <_sbrk+0x60>)
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001958:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <_sbrk+0x64>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d102      	bne.n	8001966 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001960:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <_sbrk+0x64>)
 8001962:	4a12      	ldr	r2, [pc, #72]	; (80019ac <_sbrk+0x68>)
 8001964:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <_sbrk+0x64>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4413      	add	r3, r2
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	429a      	cmp	r2, r3
 8001972:	d207      	bcs.n	8001984 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001974:	f001 ff72 	bl	800385c <__errno>
 8001978:	4603      	mov	r3, r0
 800197a:	220c      	movs	r2, #12
 800197c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800197e:	f04f 33ff 	mov.w	r3, #4294967295
 8001982:	e009      	b.n	8001998 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001984:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <_sbrk+0x64>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800198a:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <_sbrk+0x64>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4413      	add	r3, r2
 8001992:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <_sbrk+0x64>)
 8001994:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001996:	68fb      	ldr	r3, [r7, #12]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20030000 	.word	0x20030000
 80019a4:	00000400 	.word	0x00000400
 80019a8:	2000021c 	.word	0x2000021c
 80019ac:	20000280 	.word	0x20000280

080019b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <SystemInit+0x20>)
 80019b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ba:	4a05      	ldr	r2, [pc, #20]	; (80019d0 <SystemInit+0x20>)
 80019bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019da:	f107 0308 	add.w	r3, r7, #8
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]
 80019e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e8:	463b      	mov	r3, r7
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019f0:	4b1e      	ldr	r3, [pc, #120]	; (8001a6c <MX_TIM1_Init+0x98>)
 80019f2:	4a1f      	ldr	r2, [pc, #124]	; (8001a70 <MX_TIM1_Init+0x9c>)
 80019f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 80019f6:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <MX_TIM1_Init+0x98>)
 80019f8:	22c7      	movs	r2, #199	; 0xc7
 80019fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019fc:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <MX_TIM1_Init+0x98>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 8001a02:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <MX_TIM1_Init+0x98>)
 8001a04:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001a08:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a0a:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <MX_TIM1_Init+0x98>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a10:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <MX_TIM1_Init+0x98>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a16:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <MX_TIM1_Init+0x98>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a1c:	4813      	ldr	r0, [pc, #76]	; (8001a6c <MX_TIM1_Init+0x98>)
 8001a1e:	f001 fa91 	bl	8002f44 <HAL_TIM_Base_Init>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001a28:	f7ff fdf8 	bl	800161c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a32:	f107 0308 	add.w	r3, r7, #8
 8001a36:	4619      	mov	r1, r3
 8001a38:	480c      	ldr	r0, [pc, #48]	; (8001a6c <MX_TIM1_Init+0x98>)
 8001a3a:	f001 fc4b 	bl	80032d4 <HAL_TIM_ConfigClockSource>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001a44:	f7ff fdea 	bl	800161c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a50:	463b      	mov	r3, r7
 8001a52:	4619      	mov	r1, r3
 8001a54:	4805      	ldr	r0, [pc, #20]	; (8001a6c <MX_TIM1_Init+0x98>)
 8001a56:	f001 fe71 	bl	800373c <HAL_TIMEx_MasterConfigSynchronization>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001a60:	f7ff fddc 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a64:	bf00      	nop
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000220 	.word	0x20000220
 8001a70:	40010000 	.word	0x40010000

08001a74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a0e      	ldr	r2, [pc, #56]	; (8001abc <HAL_TIM_Base_MspInit+0x48>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d115      	bne.n	8001ab2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ac0 <HAL_TIM_Base_MspInit+0x4c>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	4a0c      	ldr	r2, [pc, #48]	; (8001ac0 <HAL_TIM_Base_MspInit+0x4c>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6453      	str	r3, [r2, #68]	; 0x44
 8001a96:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <HAL_TIM_Base_MspInit+0x4c>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	2019      	movs	r0, #25
 8001aa8:	f000 f983 	bl	8001db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001aac:	2019      	movs	r0, #25
 8001aae:	f000 f99c 	bl	8001dea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40010000 	.word	0x40010000
 8001ac0:	40023800 	.word	0x40023800

08001ac4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001ac4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001afc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ac8:	480d      	ldr	r0, [pc, #52]	; (8001b00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001aca:	490e      	ldr	r1, [pc, #56]	; (8001b04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001acc:	4a0e      	ldr	r2, [pc, #56]	; (8001b08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ad0:	e002      	b.n	8001ad8 <LoopCopyDataInit>

08001ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ad6:	3304      	adds	r3, #4

08001ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001adc:	d3f9      	bcc.n	8001ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ade:	4a0b      	ldr	r2, [pc, #44]	; (8001b0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ae0:	4c0b      	ldr	r4, [pc, #44]	; (8001b10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae4:	e001      	b.n	8001aea <LoopFillZerobss>

08001ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae8:	3204      	adds	r2, #4

08001aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aec:	d3fb      	bcc.n	8001ae6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001aee:	f7ff ff5f 	bl	80019b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001af2:	f001 feb9 	bl	8003868 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001af6:	f7ff f9d7 	bl	8000ea8 <main>
  bx  lr    
 8001afa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001afc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001b00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b04:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001b08:	080077a8 	.word	0x080077a8
  ldr r2, =_sbss
 8001b0c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001b10:	2000027c 	.word	0x2000027c

08001b14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b14:	e7fe      	b.n	8001b14 <ADC_IRQHandler>
	...

08001b18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b1c:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <HAL_Init+0x40>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a0d      	ldr	r2, [pc, #52]	; (8001b58 <HAL_Init+0x40>)
 8001b22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b28:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <HAL_Init+0x40>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <HAL_Init+0x40>)
 8001b2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b34:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <HAL_Init+0x40>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a07      	ldr	r2, [pc, #28]	; (8001b58 <HAL_Init+0x40>)
 8001b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b40:	2003      	movs	r0, #3
 8001b42:	f000 f92b 	bl	8001d9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b46:	200f      	movs	r0, #15
 8001b48:	f000 f808 	bl	8001b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b4c:	f7ff fe0a 	bl	8001764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40023c00 	.word	0x40023c00

08001b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_InitTick+0x54>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <HAL_InitTick+0x58>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 f943 	bl	8001e06 <HAL_SYSTICK_Config>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e00e      	b.n	8001ba8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b0f      	cmp	r3, #15
 8001b8e:	d80a      	bhi.n	8001ba6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b90:	2200      	movs	r2, #0
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	f04f 30ff 	mov.w	r0, #4294967295
 8001b98:	f000 f90b 	bl	8001db2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b9c:	4a06      	ldr	r2, [pc, #24]	; (8001bb8 <HAL_InitTick+0x5c>)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	e000      	b.n	8001ba8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000018 	.word	0x20000018
 8001bb4:	20000020 	.word	0x20000020
 8001bb8:	2000001c 	.word	0x2000001c

08001bbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_IncTick+0x20>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_IncTick+0x24>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4413      	add	r3, r2
 8001bcc:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <HAL_IncTick+0x24>)
 8001bce:	6013      	str	r3, [r2, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	20000020 	.word	0x20000020
 8001be0:	20000268 	.word	0x20000268

08001be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return uwTick;
 8001be8:	4b03      	ldr	r3, [pc, #12]	; (8001bf8 <HAL_GetTick+0x14>)
 8001bea:	681b      	ldr	r3, [r3, #0]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	20000268 	.word	0x20000268

08001bfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c0c:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <__NVIC_SetPriorityGrouping+0x44>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c18:	4013      	ands	r3, r2
 8001c1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c2e:	4a04      	ldr	r2, [pc, #16]	; (8001c40 <__NVIC_SetPriorityGrouping+0x44>)
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	60d3      	str	r3, [r2, #12]
}
 8001c34:	bf00      	nop
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c48:	4b04      	ldr	r3, [pc, #16]	; (8001c5c <__NVIC_GetPriorityGrouping+0x18>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	0a1b      	lsrs	r3, r3, #8
 8001c4e:	f003 0307 	and.w	r3, r3, #7
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	db0b      	blt.n	8001c8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	f003 021f 	and.w	r2, r3, #31
 8001c78:	4907      	ldr	r1, [pc, #28]	; (8001c98 <__NVIC_EnableIRQ+0x38>)
 8001c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7e:	095b      	lsrs	r3, r3, #5
 8001c80:	2001      	movs	r0, #1
 8001c82:	fa00 f202 	lsl.w	r2, r0, r2
 8001c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	e000e100 	.word	0xe000e100

08001c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	6039      	str	r1, [r7, #0]
 8001ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	db0a      	blt.n	8001cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	490c      	ldr	r1, [pc, #48]	; (8001ce8 <__NVIC_SetPriority+0x4c>)
 8001cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cba:	0112      	lsls	r2, r2, #4
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc4:	e00a      	b.n	8001cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	4908      	ldr	r1, [pc, #32]	; (8001cec <__NVIC_SetPriority+0x50>)
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	3b04      	subs	r3, #4
 8001cd4:	0112      	lsls	r2, r2, #4
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	440b      	add	r3, r1
 8001cda:	761a      	strb	r2, [r3, #24]
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000e100 	.word	0xe000e100
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b089      	sub	sp, #36	; 0x24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	f1c3 0307 	rsb	r3, r3, #7
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	bf28      	it	cs
 8001d0e:	2304      	movcs	r3, #4
 8001d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	3304      	adds	r3, #4
 8001d16:	2b06      	cmp	r3, #6
 8001d18:	d902      	bls.n	8001d20 <NVIC_EncodePriority+0x30>
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3b03      	subs	r3, #3
 8001d1e:	e000      	b.n	8001d22 <NVIC_EncodePriority+0x32>
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d24:	f04f 32ff 	mov.w	r2, #4294967295
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43da      	mvns	r2, r3
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	401a      	ands	r2, r3
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d38:	f04f 31ff 	mov.w	r1, #4294967295
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d42:	43d9      	mvns	r1, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d48:	4313      	orrs	r3, r2
         );
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3724      	adds	r7, #36	; 0x24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
	...

08001d58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d68:	d301      	bcc.n	8001d6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e00f      	b.n	8001d8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d6e:	4a0a      	ldr	r2, [pc, #40]	; (8001d98 <SysTick_Config+0x40>)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d76:	210f      	movs	r1, #15
 8001d78:	f04f 30ff 	mov.w	r0, #4294967295
 8001d7c:	f7ff ff8e 	bl	8001c9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d80:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <SysTick_Config+0x40>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d86:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <SysTick_Config+0x40>)
 8001d88:	2207      	movs	r2, #7
 8001d8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	e000e010 	.word	0xe000e010

08001d9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f7ff ff29 	bl	8001bfc <__NVIC_SetPriorityGrouping>
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b086      	sub	sp, #24
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	4603      	mov	r3, r0
 8001dba:	60b9      	str	r1, [r7, #8]
 8001dbc:	607a      	str	r2, [r7, #4]
 8001dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc4:	f7ff ff3e 	bl	8001c44 <__NVIC_GetPriorityGrouping>
 8001dc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	68b9      	ldr	r1, [r7, #8]
 8001dce:	6978      	ldr	r0, [r7, #20]
 8001dd0:	f7ff ff8e 	bl	8001cf0 <NVIC_EncodePriority>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dda:	4611      	mov	r1, r2
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff ff5d 	bl	8001c9c <__NVIC_SetPriority>
}
 8001de2:	bf00      	nop
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	4603      	mov	r3, r0
 8001df2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff ff31 	bl	8001c60 <__NVIC_EnableIRQ>
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff ffa2 	bl	8001d58 <SysTick_Config>
 8001e14:	4603      	mov	r3, r0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b089      	sub	sp, #36	; 0x24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
 8001e3a:	e177      	b.n	800212c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	f040 8166 	bne.w	8002126 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d005      	beq.n	8001e72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d130      	bne.n	8001ed4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43db      	mvns	r3, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4013      	ands	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	68da      	ldr	r2, [r3, #12]
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	091b      	lsrs	r3, r3, #4
 8001ebe:	f003 0201 	and.w	r2, r3, #1
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 0303 	and.w	r3, r3, #3
 8001edc:	2b03      	cmp	r3, #3
 8001ede:	d017      	beq.n	8001f10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	2203      	movs	r2, #3
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 0303 	and.w	r3, r3, #3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d123      	bne.n	8001f64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	08da      	lsrs	r2, r3, #3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3208      	adds	r2, #8
 8001f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	220f      	movs	r2, #15
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	691a      	ldr	r2, [r3, #16]
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	08da      	lsrs	r2, r3, #3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3208      	adds	r2, #8
 8001f5e:	69b9      	ldr	r1, [r7, #24]
 8001f60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	2203      	movs	r2, #3
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 0203 	and.w	r2, r3, #3
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 80c0 	beq.w	8002126 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	4b66      	ldr	r3, [pc, #408]	; (8002144 <HAL_GPIO_Init+0x324>)
 8001fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fae:	4a65      	ldr	r2, [pc, #404]	; (8002144 <HAL_GPIO_Init+0x324>)
 8001fb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fb6:	4b63      	ldr	r3, [pc, #396]	; (8002144 <HAL_GPIO_Init+0x324>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fc2:	4a61      	ldr	r2, [pc, #388]	; (8002148 <HAL_GPIO_Init+0x328>)
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	089b      	lsrs	r3, r3, #2
 8001fc8:	3302      	adds	r3, #2
 8001fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	220f      	movs	r2, #15
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a58      	ldr	r2, [pc, #352]	; (800214c <HAL_GPIO_Init+0x32c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d037      	beq.n	800205e <HAL_GPIO_Init+0x23e>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a57      	ldr	r2, [pc, #348]	; (8002150 <HAL_GPIO_Init+0x330>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d031      	beq.n	800205a <HAL_GPIO_Init+0x23a>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a56      	ldr	r2, [pc, #344]	; (8002154 <HAL_GPIO_Init+0x334>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d02b      	beq.n	8002056 <HAL_GPIO_Init+0x236>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a55      	ldr	r2, [pc, #340]	; (8002158 <HAL_GPIO_Init+0x338>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d025      	beq.n	8002052 <HAL_GPIO_Init+0x232>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a54      	ldr	r2, [pc, #336]	; (800215c <HAL_GPIO_Init+0x33c>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d01f      	beq.n	800204e <HAL_GPIO_Init+0x22e>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a53      	ldr	r2, [pc, #332]	; (8002160 <HAL_GPIO_Init+0x340>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d019      	beq.n	800204a <HAL_GPIO_Init+0x22a>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a52      	ldr	r2, [pc, #328]	; (8002164 <HAL_GPIO_Init+0x344>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d013      	beq.n	8002046 <HAL_GPIO_Init+0x226>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a51      	ldr	r2, [pc, #324]	; (8002168 <HAL_GPIO_Init+0x348>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d00d      	beq.n	8002042 <HAL_GPIO_Init+0x222>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a50      	ldr	r2, [pc, #320]	; (800216c <HAL_GPIO_Init+0x34c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d007      	beq.n	800203e <HAL_GPIO_Init+0x21e>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a4f      	ldr	r2, [pc, #316]	; (8002170 <HAL_GPIO_Init+0x350>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d101      	bne.n	800203a <HAL_GPIO_Init+0x21a>
 8002036:	2309      	movs	r3, #9
 8002038:	e012      	b.n	8002060 <HAL_GPIO_Init+0x240>
 800203a:	230a      	movs	r3, #10
 800203c:	e010      	b.n	8002060 <HAL_GPIO_Init+0x240>
 800203e:	2308      	movs	r3, #8
 8002040:	e00e      	b.n	8002060 <HAL_GPIO_Init+0x240>
 8002042:	2307      	movs	r3, #7
 8002044:	e00c      	b.n	8002060 <HAL_GPIO_Init+0x240>
 8002046:	2306      	movs	r3, #6
 8002048:	e00a      	b.n	8002060 <HAL_GPIO_Init+0x240>
 800204a:	2305      	movs	r3, #5
 800204c:	e008      	b.n	8002060 <HAL_GPIO_Init+0x240>
 800204e:	2304      	movs	r3, #4
 8002050:	e006      	b.n	8002060 <HAL_GPIO_Init+0x240>
 8002052:	2303      	movs	r3, #3
 8002054:	e004      	b.n	8002060 <HAL_GPIO_Init+0x240>
 8002056:	2302      	movs	r3, #2
 8002058:	e002      	b.n	8002060 <HAL_GPIO_Init+0x240>
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <HAL_GPIO_Init+0x240>
 800205e:	2300      	movs	r3, #0
 8002060:	69fa      	ldr	r2, [r7, #28]
 8002062:	f002 0203 	and.w	r2, r2, #3
 8002066:	0092      	lsls	r2, r2, #2
 8002068:	4093      	lsls	r3, r2
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4313      	orrs	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002070:	4935      	ldr	r1, [pc, #212]	; (8002148 <HAL_GPIO_Init+0x328>)
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	089b      	lsrs	r3, r3, #2
 8002076:	3302      	adds	r3, #2
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800207e:	4b3d      	ldr	r3, [pc, #244]	; (8002174 <HAL_GPIO_Init+0x354>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	43db      	mvns	r3, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4013      	ands	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020a2:	4a34      	ldr	r2, [pc, #208]	; (8002174 <HAL_GPIO_Init+0x354>)
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020a8:	4b32      	ldr	r3, [pc, #200]	; (8002174 <HAL_GPIO_Init+0x354>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020cc:	4a29      	ldr	r2, [pc, #164]	; (8002174 <HAL_GPIO_Init+0x354>)
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020d2:	4b28      	ldr	r3, [pc, #160]	; (8002174 <HAL_GPIO_Init+0x354>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	43db      	mvns	r3, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4013      	ands	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020f6:	4a1f      	ldr	r2, [pc, #124]	; (8002174 <HAL_GPIO_Init+0x354>)
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020fc:	4b1d      	ldr	r3, [pc, #116]	; (8002174 <HAL_GPIO_Init+0x354>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002120:	4a14      	ldr	r2, [pc, #80]	; (8002174 <HAL_GPIO_Init+0x354>)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3301      	adds	r3, #1
 800212a:	61fb      	str	r3, [r7, #28]
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	2b0f      	cmp	r3, #15
 8002130:	f67f ae84 	bls.w	8001e3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002134:	bf00      	nop
 8002136:	bf00      	nop
 8002138:	3724      	adds	r7, #36	; 0x24
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40023800 	.word	0x40023800
 8002148:	40013800 	.word	0x40013800
 800214c:	40020000 	.word	0x40020000
 8002150:	40020400 	.word	0x40020400
 8002154:	40020800 	.word	0x40020800
 8002158:	40020c00 	.word	0x40020c00
 800215c:	40021000 	.word	0x40021000
 8002160:	40021400 	.word	0x40021400
 8002164:	40021800 	.word	0x40021800
 8002168:	40021c00 	.word	0x40021c00
 800216c:	40022000 	.word	0x40022000
 8002170:	40022400 	.word	0x40022400
 8002174:	40013c00 	.word	0x40013c00

08002178 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	691a      	ldr	r2, [r3, #16]
 8002188:	887b      	ldrh	r3, [r7, #2]
 800218a:	4013      	ands	r3, r2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d002      	beq.n	8002196 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002190:	2301      	movs	r3, #1
 8002192:	73fb      	strb	r3, [r7, #15]
 8002194:	e001      	b.n	800219a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002196:	2300      	movs	r3, #0
 8002198:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800219a:	7bfb      	ldrb	r3, [r7, #15]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	807b      	strh	r3, [r7, #2]
 80021b4:	4613      	mov	r3, r2
 80021b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021b8:	787b      	ldrb	r3, [r7, #1]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021be:	887a      	ldrh	r2, [r7, #2]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021c4:	e003      	b.n	80021ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021c6:	887b      	ldrh	r3, [r7, #2]
 80021c8:	041a      	lsls	r2, r3, #16
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	619a      	str	r2, [r3, #24]
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
	...

080021dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e267      	b.n	80026be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d075      	beq.n	80022e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021fa:	4b88      	ldr	r3, [pc, #544]	; (800241c <HAL_RCC_OscConfig+0x240>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b04      	cmp	r3, #4
 8002204:	d00c      	beq.n	8002220 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002206:	4b85      	ldr	r3, [pc, #532]	; (800241c <HAL_RCC_OscConfig+0x240>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800220e:	2b08      	cmp	r3, #8
 8002210:	d112      	bne.n	8002238 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002212:	4b82      	ldr	r3, [pc, #520]	; (800241c <HAL_RCC_OscConfig+0x240>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800221a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800221e:	d10b      	bne.n	8002238 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002220:	4b7e      	ldr	r3, [pc, #504]	; (800241c <HAL_RCC_OscConfig+0x240>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d05b      	beq.n	80022e4 <HAL_RCC_OscConfig+0x108>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d157      	bne.n	80022e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e242      	b.n	80026be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002240:	d106      	bne.n	8002250 <HAL_RCC_OscConfig+0x74>
 8002242:	4b76      	ldr	r3, [pc, #472]	; (800241c <HAL_RCC_OscConfig+0x240>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a75      	ldr	r2, [pc, #468]	; (800241c <HAL_RCC_OscConfig+0x240>)
 8002248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	e01d      	b.n	800228c <HAL_RCC_OscConfig+0xb0>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002258:	d10c      	bne.n	8002274 <HAL_RCC_OscConfig+0x98>
 800225a:	4b70      	ldr	r3, [pc, #448]	; (800241c <HAL_RCC_OscConfig+0x240>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a6f      	ldr	r2, [pc, #444]	; (800241c <HAL_RCC_OscConfig+0x240>)
 8002260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	4b6d      	ldr	r3, [pc, #436]	; (800241c <HAL_RCC_OscConfig+0x240>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a6c      	ldr	r2, [pc, #432]	; (800241c <HAL_RCC_OscConfig+0x240>)
 800226c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	e00b      	b.n	800228c <HAL_RCC_OscConfig+0xb0>
 8002274:	4b69      	ldr	r3, [pc, #420]	; (800241c <HAL_RCC_OscConfig+0x240>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a68      	ldr	r2, [pc, #416]	; (800241c <HAL_RCC_OscConfig+0x240>)
 800227a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800227e:	6013      	str	r3, [r2, #0]
 8002280:	4b66      	ldr	r3, [pc, #408]	; (800241c <HAL_RCC_OscConfig+0x240>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a65      	ldr	r2, [pc, #404]	; (800241c <HAL_RCC_OscConfig+0x240>)
 8002286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800228a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d013      	beq.n	80022bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002294:	f7ff fca6 	bl	8001be4 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800229c:	f7ff fca2 	bl	8001be4 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b64      	cmp	r3, #100	; 0x64
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e207      	b.n	80026be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ae:	4b5b      	ldr	r3, [pc, #364]	; (800241c <HAL_RCC_OscConfig+0x240>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f0      	beq.n	800229c <HAL_RCC_OscConfig+0xc0>
 80022ba:	e014      	b.n	80022e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7ff fc92 	bl	8001be4 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022c4:	f7ff fc8e 	bl	8001be4 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b64      	cmp	r3, #100	; 0x64
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e1f3      	b.n	80026be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d6:	4b51      	ldr	r3, [pc, #324]	; (800241c <HAL_RCC_OscConfig+0x240>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0xe8>
 80022e2:	e000      	b.n	80022e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d063      	beq.n	80023ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022f2:	4b4a      	ldr	r3, [pc, #296]	; (800241c <HAL_RCC_OscConfig+0x240>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 030c 	and.w	r3, r3, #12
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00b      	beq.n	8002316 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022fe:	4b47      	ldr	r3, [pc, #284]	; (800241c <HAL_RCC_OscConfig+0x240>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002306:	2b08      	cmp	r3, #8
 8002308:	d11c      	bne.n	8002344 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800230a:	4b44      	ldr	r3, [pc, #272]	; (800241c <HAL_RCC_OscConfig+0x240>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d116      	bne.n	8002344 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002316:	4b41      	ldr	r3, [pc, #260]	; (800241c <HAL_RCC_OscConfig+0x240>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d005      	beq.n	800232e <HAL_RCC_OscConfig+0x152>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d001      	beq.n	800232e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e1c7      	b.n	80026be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232e:	4b3b      	ldr	r3, [pc, #236]	; (800241c <HAL_RCC_OscConfig+0x240>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4937      	ldr	r1, [pc, #220]	; (800241c <HAL_RCC_OscConfig+0x240>)
 800233e:	4313      	orrs	r3, r2
 8002340:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002342:	e03a      	b.n	80023ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d020      	beq.n	800238e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800234c:	4b34      	ldr	r3, [pc, #208]	; (8002420 <HAL_RCC_OscConfig+0x244>)
 800234e:	2201      	movs	r2, #1
 8002350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002352:	f7ff fc47 	bl	8001be4 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800235a:	f7ff fc43 	bl	8001be4 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e1a8      	b.n	80026be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236c:	4b2b      	ldr	r3, [pc, #172]	; (800241c <HAL_RCC_OscConfig+0x240>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0f0      	beq.n	800235a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002378:	4b28      	ldr	r3, [pc, #160]	; (800241c <HAL_RCC_OscConfig+0x240>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4925      	ldr	r1, [pc, #148]	; (800241c <HAL_RCC_OscConfig+0x240>)
 8002388:	4313      	orrs	r3, r2
 800238a:	600b      	str	r3, [r1, #0]
 800238c:	e015      	b.n	80023ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800238e:	4b24      	ldr	r3, [pc, #144]	; (8002420 <HAL_RCC_OscConfig+0x244>)
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002394:	f7ff fc26 	bl	8001be4 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800239c:	f7ff fc22 	bl	8001be4 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e187      	b.n	80026be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ae:	4b1b      	ldr	r3, [pc, #108]	; (800241c <HAL_RCC_OscConfig+0x240>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f0      	bne.n	800239c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d036      	beq.n	8002434 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d016      	beq.n	80023fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ce:	4b15      	ldr	r3, [pc, #84]	; (8002424 <HAL_RCC_OscConfig+0x248>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d4:	f7ff fc06 	bl	8001be4 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023dc:	f7ff fc02 	bl	8001be4 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e167      	b.n	80026be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ee:	4b0b      	ldr	r3, [pc, #44]	; (800241c <HAL_RCC_OscConfig+0x240>)
 80023f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0f0      	beq.n	80023dc <HAL_RCC_OscConfig+0x200>
 80023fa:	e01b      	b.n	8002434 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023fc:	4b09      	ldr	r3, [pc, #36]	; (8002424 <HAL_RCC_OscConfig+0x248>)
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002402:	f7ff fbef 	bl	8001be4 <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002408:	e00e      	b.n	8002428 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800240a:	f7ff fbeb 	bl	8001be4 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d907      	bls.n	8002428 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e150      	b.n	80026be <HAL_RCC_OscConfig+0x4e2>
 800241c:	40023800 	.word	0x40023800
 8002420:	42470000 	.word	0x42470000
 8002424:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002428:	4b88      	ldr	r3, [pc, #544]	; (800264c <HAL_RCC_OscConfig+0x470>)
 800242a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1ea      	bne.n	800240a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 8097 	beq.w	8002570 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002442:	2300      	movs	r3, #0
 8002444:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002446:	4b81      	ldr	r3, [pc, #516]	; (800264c <HAL_RCC_OscConfig+0x470>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10f      	bne.n	8002472 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	4b7d      	ldr	r3, [pc, #500]	; (800264c <HAL_RCC_OscConfig+0x470>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	4a7c      	ldr	r2, [pc, #496]	; (800264c <HAL_RCC_OscConfig+0x470>)
 800245c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002460:	6413      	str	r3, [r2, #64]	; 0x40
 8002462:	4b7a      	ldr	r3, [pc, #488]	; (800264c <HAL_RCC_OscConfig+0x470>)
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800246e:	2301      	movs	r3, #1
 8002470:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002472:	4b77      	ldr	r3, [pc, #476]	; (8002650 <HAL_RCC_OscConfig+0x474>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247a:	2b00      	cmp	r3, #0
 800247c:	d118      	bne.n	80024b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800247e:	4b74      	ldr	r3, [pc, #464]	; (8002650 <HAL_RCC_OscConfig+0x474>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a73      	ldr	r2, [pc, #460]	; (8002650 <HAL_RCC_OscConfig+0x474>)
 8002484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002488:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800248a:	f7ff fbab 	bl	8001be4 <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002492:	f7ff fba7 	bl	8001be4 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e10c      	b.n	80026be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a4:	4b6a      	ldr	r3, [pc, #424]	; (8002650 <HAL_RCC_OscConfig+0x474>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0f0      	beq.n	8002492 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d106      	bne.n	80024c6 <HAL_RCC_OscConfig+0x2ea>
 80024b8:	4b64      	ldr	r3, [pc, #400]	; (800264c <HAL_RCC_OscConfig+0x470>)
 80024ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024bc:	4a63      	ldr	r2, [pc, #396]	; (800264c <HAL_RCC_OscConfig+0x470>)
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	6713      	str	r3, [r2, #112]	; 0x70
 80024c4:	e01c      	b.n	8002500 <HAL_RCC_OscConfig+0x324>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	2b05      	cmp	r3, #5
 80024cc:	d10c      	bne.n	80024e8 <HAL_RCC_OscConfig+0x30c>
 80024ce:	4b5f      	ldr	r3, [pc, #380]	; (800264c <HAL_RCC_OscConfig+0x470>)
 80024d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d2:	4a5e      	ldr	r2, [pc, #376]	; (800264c <HAL_RCC_OscConfig+0x470>)
 80024d4:	f043 0304 	orr.w	r3, r3, #4
 80024d8:	6713      	str	r3, [r2, #112]	; 0x70
 80024da:	4b5c      	ldr	r3, [pc, #368]	; (800264c <HAL_RCC_OscConfig+0x470>)
 80024dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024de:	4a5b      	ldr	r2, [pc, #364]	; (800264c <HAL_RCC_OscConfig+0x470>)
 80024e0:	f043 0301 	orr.w	r3, r3, #1
 80024e4:	6713      	str	r3, [r2, #112]	; 0x70
 80024e6:	e00b      	b.n	8002500 <HAL_RCC_OscConfig+0x324>
 80024e8:	4b58      	ldr	r3, [pc, #352]	; (800264c <HAL_RCC_OscConfig+0x470>)
 80024ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ec:	4a57      	ldr	r2, [pc, #348]	; (800264c <HAL_RCC_OscConfig+0x470>)
 80024ee:	f023 0301 	bic.w	r3, r3, #1
 80024f2:	6713      	str	r3, [r2, #112]	; 0x70
 80024f4:	4b55      	ldr	r3, [pc, #340]	; (800264c <HAL_RCC_OscConfig+0x470>)
 80024f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f8:	4a54      	ldr	r2, [pc, #336]	; (800264c <HAL_RCC_OscConfig+0x470>)
 80024fa:	f023 0304 	bic.w	r3, r3, #4
 80024fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d015      	beq.n	8002534 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002508:	f7ff fb6c 	bl	8001be4 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800250e:	e00a      	b.n	8002526 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002510:	f7ff fb68 	bl	8001be4 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	f241 3288 	movw	r2, #5000	; 0x1388
 800251e:	4293      	cmp	r3, r2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e0cb      	b.n	80026be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002526:	4b49      	ldr	r3, [pc, #292]	; (800264c <HAL_RCC_OscConfig+0x470>)
 8002528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0ee      	beq.n	8002510 <HAL_RCC_OscConfig+0x334>
 8002532:	e014      	b.n	800255e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002534:	f7ff fb56 	bl	8001be4 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800253a:	e00a      	b.n	8002552 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800253c:	f7ff fb52 	bl	8001be4 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	f241 3288 	movw	r2, #5000	; 0x1388
 800254a:	4293      	cmp	r3, r2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e0b5      	b.n	80026be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002552:	4b3e      	ldr	r3, [pc, #248]	; (800264c <HAL_RCC_OscConfig+0x470>)
 8002554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1ee      	bne.n	800253c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800255e:	7dfb      	ldrb	r3, [r7, #23]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d105      	bne.n	8002570 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002564:	4b39      	ldr	r3, [pc, #228]	; (800264c <HAL_RCC_OscConfig+0x470>)
 8002566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002568:	4a38      	ldr	r2, [pc, #224]	; (800264c <HAL_RCC_OscConfig+0x470>)
 800256a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800256e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 80a1 	beq.w	80026bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800257a:	4b34      	ldr	r3, [pc, #208]	; (800264c <HAL_RCC_OscConfig+0x470>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 030c 	and.w	r3, r3, #12
 8002582:	2b08      	cmp	r3, #8
 8002584:	d05c      	beq.n	8002640 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	2b02      	cmp	r3, #2
 800258c:	d141      	bne.n	8002612 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258e:	4b31      	ldr	r3, [pc, #196]	; (8002654 <HAL_RCC_OscConfig+0x478>)
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002594:	f7ff fb26 	bl	8001be4 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800259c:	f7ff fb22 	bl	8001be4 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e087      	b.n	80026be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ae:	4b27      	ldr	r3, [pc, #156]	; (800264c <HAL_RCC_OscConfig+0x470>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f0      	bne.n	800259c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69da      	ldr	r2, [r3, #28]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	431a      	orrs	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	019b      	lsls	r3, r3, #6
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d0:	085b      	lsrs	r3, r3, #1
 80025d2:	3b01      	subs	r3, #1
 80025d4:	041b      	lsls	r3, r3, #16
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025dc:	061b      	lsls	r3, r3, #24
 80025de:	491b      	ldr	r1, [pc, #108]	; (800264c <HAL_RCC_OscConfig+0x470>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025e4:	4b1b      	ldr	r3, [pc, #108]	; (8002654 <HAL_RCC_OscConfig+0x478>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ea:	f7ff fafb 	bl	8001be4 <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f2:	f7ff faf7 	bl	8001be4 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e05c      	b.n	80026be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002604:	4b11      	ldr	r3, [pc, #68]	; (800264c <HAL_RCC_OscConfig+0x470>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0f0      	beq.n	80025f2 <HAL_RCC_OscConfig+0x416>
 8002610:	e054      	b.n	80026bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002612:	4b10      	ldr	r3, [pc, #64]	; (8002654 <HAL_RCC_OscConfig+0x478>)
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002618:	f7ff fae4 	bl	8001be4 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002620:	f7ff fae0 	bl	8001be4 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e045      	b.n	80026be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002632:	4b06      	ldr	r3, [pc, #24]	; (800264c <HAL_RCC_OscConfig+0x470>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f0      	bne.n	8002620 <HAL_RCC_OscConfig+0x444>
 800263e:	e03d      	b.n	80026bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d107      	bne.n	8002658 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e038      	b.n	80026be <HAL_RCC_OscConfig+0x4e2>
 800264c:	40023800 	.word	0x40023800
 8002650:	40007000 	.word	0x40007000
 8002654:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002658:	4b1b      	ldr	r3, [pc, #108]	; (80026c8 <HAL_RCC_OscConfig+0x4ec>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d028      	beq.n	80026b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002670:	429a      	cmp	r2, r3
 8002672:	d121      	bne.n	80026b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800267e:	429a      	cmp	r2, r3
 8002680:	d11a      	bne.n	80026b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002688:	4013      	ands	r3, r2
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800268e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002690:	4293      	cmp	r3, r2
 8002692:	d111      	bne.n	80026b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269e:	085b      	lsrs	r3, r3, #1
 80026a0:	3b01      	subs	r3, #1
 80026a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d107      	bne.n	80026b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d001      	beq.n	80026bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e000      	b.n	80026be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40023800 	.word	0x40023800

080026cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e0cc      	b.n	800287a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026e0:	4b68      	ldr	r3, [pc, #416]	; (8002884 <HAL_RCC_ClockConfig+0x1b8>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 030f 	and.w	r3, r3, #15
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d90c      	bls.n	8002708 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ee:	4b65      	ldr	r3, [pc, #404]	; (8002884 <HAL_RCC_ClockConfig+0x1b8>)
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f6:	4b63      	ldr	r3, [pc, #396]	; (8002884 <HAL_RCC_ClockConfig+0x1b8>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	429a      	cmp	r2, r3
 8002702:	d001      	beq.n	8002708 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e0b8      	b.n	800287a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d020      	beq.n	8002756 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	d005      	beq.n	800272c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002720:	4b59      	ldr	r3, [pc, #356]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	4a58      	ldr	r2, [pc, #352]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 8002726:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800272a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0308 	and.w	r3, r3, #8
 8002734:	2b00      	cmp	r3, #0
 8002736:	d005      	beq.n	8002744 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002738:	4b53      	ldr	r3, [pc, #332]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	4a52      	ldr	r2, [pc, #328]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 800273e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002742:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002744:	4b50      	ldr	r3, [pc, #320]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	494d      	ldr	r1, [pc, #308]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	4313      	orrs	r3, r2
 8002754:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d044      	beq.n	80027ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d107      	bne.n	800277a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276a:	4b47      	ldr	r3, [pc, #284]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d119      	bne.n	80027aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e07f      	b.n	800287a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d003      	beq.n	800278a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002786:	2b03      	cmp	r3, #3
 8002788:	d107      	bne.n	800279a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800278a:	4b3f      	ldr	r3, [pc, #252]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d109      	bne.n	80027aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e06f      	b.n	800287a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279a:	4b3b      	ldr	r3, [pc, #236]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e067      	b.n	800287a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027aa:	4b37      	ldr	r3, [pc, #220]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f023 0203 	bic.w	r2, r3, #3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	4934      	ldr	r1, [pc, #208]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027bc:	f7ff fa12 	bl	8001be4 <HAL_GetTick>
 80027c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c2:	e00a      	b.n	80027da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c4:	f7ff fa0e 	bl	8001be4 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e04f      	b.n	800287a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027da:	4b2b      	ldr	r3, [pc, #172]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 020c 	and.w	r2, r3, #12
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d1eb      	bne.n	80027c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027ec:	4b25      	ldr	r3, [pc, #148]	; (8002884 <HAL_RCC_ClockConfig+0x1b8>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 030f 	and.w	r3, r3, #15
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d20c      	bcs.n	8002814 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fa:	4b22      	ldr	r3, [pc, #136]	; (8002884 <HAL_RCC_ClockConfig+0x1b8>)
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002802:	4b20      	ldr	r3, [pc, #128]	; (8002884 <HAL_RCC_ClockConfig+0x1b8>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	429a      	cmp	r2, r3
 800280e:	d001      	beq.n	8002814 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e032      	b.n	800287a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0304 	and.w	r3, r3, #4
 800281c:	2b00      	cmp	r3, #0
 800281e:	d008      	beq.n	8002832 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002820:	4b19      	ldr	r3, [pc, #100]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	4916      	ldr	r1, [pc, #88]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 800282e:	4313      	orrs	r3, r2
 8002830:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b00      	cmp	r3, #0
 800283c:	d009      	beq.n	8002852 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800283e:	4b12      	ldr	r3, [pc, #72]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	490e      	ldr	r1, [pc, #56]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 800284e:	4313      	orrs	r3, r2
 8002850:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002852:	f000 f821 	bl	8002898 <HAL_RCC_GetSysClockFreq>
 8002856:	4602      	mov	r2, r0
 8002858:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	091b      	lsrs	r3, r3, #4
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	490a      	ldr	r1, [pc, #40]	; (800288c <HAL_RCC_ClockConfig+0x1c0>)
 8002864:	5ccb      	ldrb	r3, [r1, r3]
 8002866:	fa22 f303 	lsr.w	r3, r2, r3
 800286a:	4a09      	ldr	r2, [pc, #36]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 800286c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800286e:	4b09      	ldr	r3, [pc, #36]	; (8002894 <HAL_RCC_ClockConfig+0x1c8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff f972 	bl	8001b5c <HAL_InitTick>

  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40023c00 	.word	0x40023c00
 8002888:	40023800 	.word	0x40023800
 800288c:	08007640 	.word	0x08007640
 8002890:	20000018 	.word	0x20000018
 8002894:	2000001c 	.word	0x2000001c

08002898 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800289c:	b090      	sub	sp, #64	; 0x40
 800289e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	637b      	str	r3, [r7, #52]	; 0x34
 80028a4:	2300      	movs	r3, #0
 80028a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028a8:	2300      	movs	r3, #0
 80028aa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028b0:	4b59      	ldr	r3, [pc, #356]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x180>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 030c 	and.w	r3, r3, #12
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d00d      	beq.n	80028d8 <HAL_RCC_GetSysClockFreq+0x40>
 80028bc:	2b08      	cmp	r3, #8
 80028be:	f200 80a1 	bhi.w	8002a04 <HAL_RCC_GetSysClockFreq+0x16c>
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d002      	beq.n	80028cc <HAL_RCC_GetSysClockFreq+0x34>
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d003      	beq.n	80028d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80028ca:	e09b      	b.n	8002a04 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028cc:	4b53      	ldr	r3, [pc, #332]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x184>)
 80028ce:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80028d0:	e09b      	b.n	8002a0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028d2:	4b53      	ldr	r3, [pc, #332]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x188>)
 80028d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028d6:	e098      	b.n	8002a0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028d8:	4b4f      	ldr	r3, [pc, #316]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x180>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028e0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028e2:	4b4d      	ldr	r3, [pc, #308]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x180>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d028      	beq.n	8002940 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028ee:	4b4a      	ldr	r3, [pc, #296]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x180>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	099b      	lsrs	r3, r3, #6
 80028f4:	2200      	movs	r2, #0
 80028f6:	623b      	str	r3, [r7, #32]
 80028f8:	627a      	str	r2, [r7, #36]	; 0x24
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002900:	2100      	movs	r1, #0
 8002902:	4b47      	ldr	r3, [pc, #284]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x188>)
 8002904:	fb03 f201 	mul.w	r2, r3, r1
 8002908:	2300      	movs	r3, #0
 800290a:	fb00 f303 	mul.w	r3, r0, r3
 800290e:	4413      	add	r3, r2
 8002910:	4a43      	ldr	r2, [pc, #268]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x188>)
 8002912:	fba0 1202 	umull	r1, r2, r0, r2
 8002916:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002918:	460a      	mov	r2, r1
 800291a:	62ba      	str	r2, [r7, #40]	; 0x28
 800291c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800291e:	4413      	add	r3, r2
 8002920:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002924:	2200      	movs	r2, #0
 8002926:	61bb      	str	r3, [r7, #24]
 8002928:	61fa      	str	r2, [r7, #28]
 800292a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800292e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002932:	f7fd fcad 	bl	8000290 <__aeabi_uldivmod>
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	4613      	mov	r3, r2
 800293c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800293e:	e053      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002940:	4b35      	ldr	r3, [pc, #212]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x180>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	099b      	lsrs	r3, r3, #6
 8002946:	2200      	movs	r2, #0
 8002948:	613b      	str	r3, [r7, #16]
 800294a:	617a      	str	r2, [r7, #20]
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002952:	f04f 0b00 	mov.w	fp, #0
 8002956:	4652      	mov	r2, sl
 8002958:	465b      	mov	r3, fp
 800295a:	f04f 0000 	mov.w	r0, #0
 800295e:	f04f 0100 	mov.w	r1, #0
 8002962:	0159      	lsls	r1, r3, #5
 8002964:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002968:	0150      	lsls	r0, r2, #5
 800296a:	4602      	mov	r2, r0
 800296c:	460b      	mov	r3, r1
 800296e:	ebb2 080a 	subs.w	r8, r2, sl
 8002972:	eb63 090b 	sbc.w	r9, r3, fp
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	f04f 0300 	mov.w	r3, #0
 800297e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002982:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002986:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800298a:	ebb2 0408 	subs.w	r4, r2, r8
 800298e:	eb63 0509 	sbc.w	r5, r3, r9
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	00eb      	lsls	r3, r5, #3
 800299c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029a0:	00e2      	lsls	r2, r4, #3
 80029a2:	4614      	mov	r4, r2
 80029a4:	461d      	mov	r5, r3
 80029a6:	eb14 030a 	adds.w	r3, r4, sl
 80029aa:	603b      	str	r3, [r7, #0]
 80029ac:	eb45 030b 	adc.w	r3, r5, fp
 80029b0:	607b      	str	r3, [r7, #4]
 80029b2:	f04f 0200 	mov.w	r2, #0
 80029b6:	f04f 0300 	mov.w	r3, #0
 80029ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029be:	4629      	mov	r1, r5
 80029c0:	028b      	lsls	r3, r1, #10
 80029c2:	4621      	mov	r1, r4
 80029c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029c8:	4621      	mov	r1, r4
 80029ca:	028a      	lsls	r2, r1, #10
 80029cc:	4610      	mov	r0, r2
 80029ce:	4619      	mov	r1, r3
 80029d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029d2:	2200      	movs	r2, #0
 80029d4:	60bb      	str	r3, [r7, #8]
 80029d6:	60fa      	str	r2, [r7, #12]
 80029d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029dc:	f7fd fc58 	bl	8000290 <__aeabi_uldivmod>
 80029e0:	4602      	mov	r2, r0
 80029e2:	460b      	mov	r3, r1
 80029e4:	4613      	mov	r3, r2
 80029e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029e8:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x180>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	0c1b      	lsrs	r3, r3, #16
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	3301      	adds	r3, #1
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80029f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a00:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a02:	e002      	b.n	8002a0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a04:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x184>)
 8002a06:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3740      	adds	r7, #64	; 0x40
 8002a10:	46bd      	mov	sp, r7
 8002a12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a16:	bf00      	nop
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	00f42400 	.word	0x00f42400
 8002a20:	017d7840 	.word	0x017d7840

08002a24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e07b      	b.n	8002b2e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d108      	bne.n	8002a50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a46:	d009      	beq.n	8002a5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	61da      	str	r2, [r3, #28]
 8002a4e:	e005      	b.n	8002a5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d106      	bne.n	8002a7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f7fe fe0c 	bl	8001694 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2202      	movs	r2, #2
 8002a80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002acc:	431a      	orrs	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae0:	ea42 0103 	orr.w	r1, r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	0c1b      	lsrs	r3, r3, #16
 8002afa:	f003 0104 	and.w	r1, r3, #4
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b02:	f003 0210 	and.w	r2, r3, #16
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	69da      	ldr	r2, [r3, #28]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b088      	sub	sp, #32
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	60f8      	str	r0, [r7, #12]
 8002b3e:	60b9      	str	r1, [r7, #8]
 8002b40:	603b      	str	r3, [r7, #0]
 8002b42:	4613      	mov	r3, r2
 8002b44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b46:	2300      	movs	r3, #0
 8002b48:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d101      	bne.n	8002b58 <HAL_SPI_Transmit+0x22>
 8002b54:	2302      	movs	r3, #2
 8002b56:	e126      	b.n	8002da6 <HAL_SPI_Transmit+0x270>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b60:	f7ff f840 	bl	8001be4 <HAL_GetTick>
 8002b64:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002b66:	88fb      	ldrh	r3, [r7, #6]
 8002b68:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d002      	beq.n	8002b7c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002b76:	2302      	movs	r3, #2
 8002b78:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b7a:	e10b      	b.n	8002d94 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d002      	beq.n	8002b88 <HAL_SPI_Transmit+0x52>
 8002b82:	88fb      	ldrh	r3, [r7, #6]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d102      	bne.n	8002b8e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b8c:	e102      	b.n	8002d94 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2203      	movs	r2, #3
 8002b92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	88fa      	ldrh	r2, [r7, #6]
 8002ba6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	88fa      	ldrh	r2, [r7, #6]
 8002bac:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bd4:	d10f      	bne.n	8002bf6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002be4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bf4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c00:	2b40      	cmp	r3, #64	; 0x40
 8002c02:	d007      	beq.n	8002c14 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c1c:	d14b      	bne.n	8002cb6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <HAL_SPI_Transmit+0xf6>
 8002c26:	8afb      	ldrh	r3, [r7, #22]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d13e      	bne.n	8002caa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c30:	881a      	ldrh	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3c:	1c9a      	adds	r2, r3, #2
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c50:	e02b      	b.n	8002caa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d112      	bne.n	8002c86 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c64:	881a      	ldrh	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c70:	1c9a      	adds	r2, r3, #2
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c84:	e011      	b.n	8002caa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c86:	f7fe ffad 	bl	8001be4 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d803      	bhi.n	8002c9e <HAL_SPI_Transmit+0x168>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9c:	d102      	bne.n	8002ca4 <HAL_SPI_Transmit+0x16e>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d102      	bne.n	8002caa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ca8:	e074      	b.n	8002d94 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1ce      	bne.n	8002c52 <HAL_SPI_Transmit+0x11c>
 8002cb4:	e04c      	b.n	8002d50 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d002      	beq.n	8002cc4 <HAL_SPI_Transmit+0x18e>
 8002cbe:	8afb      	ldrh	r3, [r7, #22]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d140      	bne.n	8002d46 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	330c      	adds	r3, #12
 8002cce:	7812      	ldrb	r2, [r2, #0]
 8002cd0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	1c5a      	adds	r2, r3, #1
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002cea:	e02c      	b.n	8002d46 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d113      	bne.n	8002d22 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	330c      	adds	r3, #12
 8002d04:	7812      	ldrb	r2, [r2, #0]
 8002d06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	1c5a      	adds	r2, r3, #1
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d20:	e011      	b.n	8002d46 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d22:	f7fe ff5f 	bl	8001be4 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d803      	bhi.n	8002d3a <HAL_SPI_Transmit+0x204>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d38:	d102      	bne.n	8002d40 <HAL_SPI_Transmit+0x20a>
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d102      	bne.n	8002d46 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d44:	e026      	b.n	8002d94 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1cd      	bne.n	8002cec <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	6839      	ldr	r1, [r7, #0]
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 f8b3 	bl	8002ec0 <SPI_EndRxTxTransaction>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d002      	beq.n	8002d66 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2220      	movs	r2, #32
 8002d64:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10a      	bne.n	8002d84 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d6e:	2300      	movs	r3, #0
 8002d70:	613b      	str	r3, [r7, #16]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	77fb      	strb	r3, [r7, #31]
 8002d90:	e000      	b.n	8002d94 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002d92:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002da4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3720      	adds	r7, #32
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b088      	sub	sp, #32
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	603b      	str	r3, [r7, #0]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002dc0:	f7fe ff10 	bl	8001be4 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc8:	1a9b      	subs	r3, r3, r2
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	4413      	add	r3, r2
 8002dce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002dd0:	f7fe ff08 	bl	8001be4 <HAL_GetTick>
 8002dd4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002dd6:	4b39      	ldr	r3, [pc, #228]	; (8002ebc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	015b      	lsls	r3, r3, #5
 8002ddc:	0d1b      	lsrs	r3, r3, #20
 8002dde:	69fa      	ldr	r2, [r7, #28]
 8002de0:	fb02 f303 	mul.w	r3, r2, r3
 8002de4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002de6:	e054      	b.n	8002e92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dee:	d050      	beq.n	8002e92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002df0:	f7fe fef8 	bl	8001be4 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	69fa      	ldr	r2, [r7, #28]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d902      	bls.n	8002e06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d13d      	bne.n	8002e82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e1e:	d111      	bne.n	8002e44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e28:	d004      	beq.n	8002e34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e32:	d107      	bne.n	8002e44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e4c:	d10f      	bne.n	8002e6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e017      	b.n	8002eb2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	bf0c      	ite	eq
 8002ea2:	2301      	moveq	r3, #1
 8002ea4:	2300      	movne	r3, #0
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	79fb      	ldrb	r3, [r7, #7]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d19b      	bne.n	8002de8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3720      	adds	r7, #32
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20000018 	.word	0x20000018

08002ec0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af02      	add	r7, sp, #8
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002ecc:	4b1b      	ldr	r3, [pc, #108]	; (8002f3c <SPI_EndRxTxTransaction+0x7c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a1b      	ldr	r2, [pc, #108]	; (8002f40 <SPI_EndRxTxTransaction+0x80>)
 8002ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed6:	0d5b      	lsrs	r3, r3, #21
 8002ed8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002edc:	fb02 f303 	mul.w	r3, r2, r3
 8002ee0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002eea:	d112      	bne.n	8002f12 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	2180      	movs	r1, #128	; 0x80
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f7ff ff5a 	bl	8002db0 <SPI_WaitFlagStateUntilTimeout>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d016      	beq.n	8002f30 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f06:	f043 0220 	orr.w	r2, r3, #32
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e00f      	b.n	8002f32 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00a      	beq.n	8002f2e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f28:	2b80      	cmp	r3, #128	; 0x80
 8002f2a:	d0f2      	beq.n	8002f12 <SPI_EndRxTxTransaction+0x52>
 8002f2c:	e000      	b.n	8002f30 <SPI_EndRxTxTransaction+0x70>
        break;
 8002f2e:	bf00      	nop
  }

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3718      	adds	r7, #24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	20000018 	.word	0x20000018
 8002f40:	165e9f81 	.word	0x165e9f81

08002f44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e041      	b.n	8002fda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d106      	bne.n	8002f70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7fe fd82 	bl	8001a74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2202      	movs	r2, #2
 8002f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3304      	adds	r3, #4
 8002f80:	4619      	mov	r1, r3
 8002f82:	4610      	mov	r0, r2
 8002f84:	f000 faa0 	bl	80034c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
	...

08002fe4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d001      	beq.n	8002ffc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e04e      	b.n	800309a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2202      	movs	r2, #2
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f042 0201 	orr.w	r2, r2, #1
 8003012:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a23      	ldr	r2, [pc, #140]	; (80030a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d022      	beq.n	8003064 <HAL_TIM_Base_Start_IT+0x80>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003026:	d01d      	beq.n	8003064 <HAL_TIM_Base_Start_IT+0x80>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a1f      	ldr	r2, [pc, #124]	; (80030ac <HAL_TIM_Base_Start_IT+0xc8>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d018      	beq.n	8003064 <HAL_TIM_Base_Start_IT+0x80>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a1e      	ldr	r2, [pc, #120]	; (80030b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d013      	beq.n	8003064 <HAL_TIM_Base_Start_IT+0x80>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a1c      	ldr	r2, [pc, #112]	; (80030b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d00e      	beq.n	8003064 <HAL_TIM_Base_Start_IT+0x80>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a1b      	ldr	r2, [pc, #108]	; (80030b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d009      	beq.n	8003064 <HAL_TIM_Base_Start_IT+0x80>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a19      	ldr	r2, [pc, #100]	; (80030bc <HAL_TIM_Base_Start_IT+0xd8>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d004      	beq.n	8003064 <HAL_TIM_Base_Start_IT+0x80>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a18      	ldr	r2, [pc, #96]	; (80030c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d111      	bne.n	8003088 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2b06      	cmp	r3, #6
 8003074:	d010      	beq.n	8003098 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f042 0201 	orr.w	r2, r2, #1
 8003084:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003086:	e007      	b.n	8003098 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0201 	orr.w	r2, r2, #1
 8003096:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3714      	adds	r7, #20
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	40010000 	.word	0x40010000
 80030ac:	40000400 	.word	0x40000400
 80030b0:	40000800 	.word	0x40000800
 80030b4:	40000c00 	.word	0x40000c00
 80030b8:	40010400 	.word	0x40010400
 80030bc:	40014000 	.word	0x40014000
 80030c0:	40001800 	.word	0x40001800

080030c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d122      	bne.n	8003120 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d11b      	bne.n	8003120 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f06f 0202 	mvn.w	r2, #2
 80030f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f9bf 	bl	800348a <HAL_TIM_IC_CaptureCallback>
 800310c:	e005      	b.n	800311a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f9b1 	bl	8003476 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f9c2 	bl	800349e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f003 0304 	and.w	r3, r3, #4
 800312a:	2b04      	cmp	r3, #4
 800312c:	d122      	bne.n	8003174 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b04      	cmp	r3, #4
 800313a:	d11b      	bne.n	8003174 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f06f 0204 	mvn.w	r2, #4
 8003144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2202      	movs	r2, #2
 800314a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f995 	bl	800348a <HAL_TIM_IC_CaptureCallback>
 8003160:	e005      	b.n	800316e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f987 	bl	8003476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f998 	bl	800349e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	2b08      	cmp	r3, #8
 8003180:	d122      	bne.n	80031c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b08      	cmp	r3, #8
 800318e:	d11b      	bne.n	80031c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f06f 0208 	mvn.w	r2, #8
 8003198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2204      	movs	r2, #4
 800319e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f96b 	bl	800348a <HAL_TIM_IC_CaptureCallback>
 80031b4:	e005      	b.n	80031c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f95d 	bl	8003476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f96e 	bl	800349e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	f003 0310 	and.w	r3, r3, #16
 80031d2:	2b10      	cmp	r3, #16
 80031d4:	d122      	bne.n	800321c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f003 0310 	and.w	r3, r3, #16
 80031e0:	2b10      	cmp	r3, #16
 80031e2:	d11b      	bne.n	800321c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f06f 0210 	mvn.w	r2, #16
 80031ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2208      	movs	r2, #8
 80031f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f941 	bl	800348a <HAL_TIM_IC_CaptureCallback>
 8003208:	e005      	b.n	8003216 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 f933 	bl	8003476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 f944 	bl	800349e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b01      	cmp	r3, #1
 8003228:	d10e      	bne.n	8003248 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b01      	cmp	r3, #1
 8003236:	d107      	bne.n	8003248 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f06f 0201 	mvn.w	r2, #1
 8003240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f90d 	bl	8003462 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003252:	2b80      	cmp	r3, #128	; 0x80
 8003254:	d10e      	bne.n	8003274 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003260:	2b80      	cmp	r3, #128	; 0x80
 8003262:	d107      	bne.n	8003274 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800326c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 faea 	bl	8003848 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800327e:	2b40      	cmp	r3, #64	; 0x40
 8003280:	d10e      	bne.n	80032a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328c:	2b40      	cmp	r3, #64	; 0x40
 800328e:	d107      	bne.n	80032a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f909 	bl	80034b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	f003 0320 	and.w	r3, r3, #32
 80032aa:	2b20      	cmp	r3, #32
 80032ac:	d10e      	bne.n	80032cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f003 0320 	and.w	r3, r3, #32
 80032b8:	2b20      	cmp	r3, #32
 80032ba:	d107      	bne.n	80032cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f06f 0220 	mvn.w	r2, #32
 80032c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 fab4 	bl	8003834 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032cc:	bf00      	nop
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032de:	2300      	movs	r3, #0
 80032e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d101      	bne.n	80032f0 <HAL_TIM_ConfigClockSource+0x1c>
 80032ec:	2302      	movs	r3, #2
 80032ee:	e0b4      	b.n	800345a <HAL_TIM_ConfigClockSource+0x186>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2202      	movs	r2, #2
 80032fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800330e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003316:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68ba      	ldr	r2, [r7, #8]
 800331e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003328:	d03e      	beq.n	80033a8 <HAL_TIM_ConfigClockSource+0xd4>
 800332a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800332e:	f200 8087 	bhi.w	8003440 <HAL_TIM_ConfigClockSource+0x16c>
 8003332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003336:	f000 8086 	beq.w	8003446 <HAL_TIM_ConfigClockSource+0x172>
 800333a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800333e:	d87f      	bhi.n	8003440 <HAL_TIM_ConfigClockSource+0x16c>
 8003340:	2b70      	cmp	r3, #112	; 0x70
 8003342:	d01a      	beq.n	800337a <HAL_TIM_ConfigClockSource+0xa6>
 8003344:	2b70      	cmp	r3, #112	; 0x70
 8003346:	d87b      	bhi.n	8003440 <HAL_TIM_ConfigClockSource+0x16c>
 8003348:	2b60      	cmp	r3, #96	; 0x60
 800334a:	d050      	beq.n	80033ee <HAL_TIM_ConfigClockSource+0x11a>
 800334c:	2b60      	cmp	r3, #96	; 0x60
 800334e:	d877      	bhi.n	8003440 <HAL_TIM_ConfigClockSource+0x16c>
 8003350:	2b50      	cmp	r3, #80	; 0x50
 8003352:	d03c      	beq.n	80033ce <HAL_TIM_ConfigClockSource+0xfa>
 8003354:	2b50      	cmp	r3, #80	; 0x50
 8003356:	d873      	bhi.n	8003440 <HAL_TIM_ConfigClockSource+0x16c>
 8003358:	2b40      	cmp	r3, #64	; 0x40
 800335a:	d058      	beq.n	800340e <HAL_TIM_ConfigClockSource+0x13a>
 800335c:	2b40      	cmp	r3, #64	; 0x40
 800335e:	d86f      	bhi.n	8003440 <HAL_TIM_ConfigClockSource+0x16c>
 8003360:	2b30      	cmp	r3, #48	; 0x30
 8003362:	d064      	beq.n	800342e <HAL_TIM_ConfigClockSource+0x15a>
 8003364:	2b30      	cmp	r3, #48	; 0x30
 8003366:	d86b      	bhi.n	8003440 <HAL_TIM_ConfigClockSource+0x16c>
 8003368:	2b20      	cmp	r3, #32
 800336a:	d060      	beq.n	800342e <HAL_TIM_ConfigClockSource+0x15a>
 800336c:	2b20      	cmp	r3, #32
 800336e:	d867      	bhi.n	8003440 <HAL_TIM_ConfigClockSource+0x16c>
 8003370:	2b00      	cmp	r3, #0
 8003372:	d05c      	beq.n	800342e <HAL_TIM_ConfigClockSource+0x15a>
 8003374:	2b10      	cmp	r3, #16
 8003376:	d05a      	beq.n	800342e <HAL_TIM_ConfigClockSource+0x15a>
 8003378:	e062      	b.n	8003440 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6818      	ldr	r0, [r3, #0]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	6899      	ldr	r1, [r3, #8]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f000 f9b7 	bl	80036fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800339c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	609a      	str	r2, [r3, #8]
      break;
 80033a6:	e04f      	b.n	8003448 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6818      	ldr	r0, [r3, #0]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	6899      	ldr	r1, [r3, #8]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f000 f9a0 	bl	80036fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033ca:	609a      	str	r2, [r3, #8]
      break;
 80033cc:	e03c      	b.n	8003448 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6818      	ldr	r0, [r3, #0]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	6859      	ldr	r1, [r3, #4]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	461a      	mov	r2, r3
 80033dc:	f000 f914 	bl	8003608 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2150      	movs	r1, #80	; 0x50
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 f96d 	bl	80036c6 <TIM_ITRx_SetConfig>
      break;
 80033ec:	e02c      	b.n	8003448 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6818      	ldr	r0, [r3, #0]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	6859      	ldr	r1, [r3, #4]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	461a      	mov	r2, r3
 80033fc:	f000 f933 	bl	8003666 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2160      	movs	r1, #96	; 0x60
 8003406:	4618      	mov	r0, r3
 8003408:	f000 f95d 	bl	80036c6 <TIM_ITRx_SetConfig>
      break;
 800340c:	e01c      	b.n	8003448 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6818      	ldr	r0, [r3, #0]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	6859      	ldr	r1, [r3, #4]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	461a      	mov	r2, r3
 800341c:	f000 f8f4 	bl	8003608 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2140      	movs	r1, #64	; 0x40
 8003426:	4618      	mov	r0, r3
 8003428:	f000 f94d 	bl	80036c6 <TIM_ITRx_SetConfig>
      break;
 800342c:	e00c      	b.n	8003448 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4619      	mov	r1, r3
 8003438:	4610      	mov	r0, r2
 800343a:	f000 f944 	bl	80036c6 <TIM_ITRx_SetConfig>
      break;
 800343e:	e003      	b.n	8003448 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	73fb      	strb	r3, [r7, #15]
      break;
 8003444:	e000      	b.n	8003448 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003446:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003458:	7bfb      	ldrb	r3, [r7, #15]
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003462:	b480      	push	{r7}
 8003464:	b083      	sub	sp, #12
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr

08003476 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800348a:	b480      	push	{r7}
 800348c:	b083      	sub	sp, #12
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800349e:	b480      	push	{r7}
 80034a0:	b083      	sub	sp, #12
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
	...

080034c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a40      	ldr	r2, [pc, #256]	; (80035dc <TIM_Base_SetConfig+0x114>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d013      	beq.n	8003508 <TIM_Base_SetConfig+0x40>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e6:	d00f      	beq.n	8003508 <TIM_Base_SetConfig+0x40>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a3d      	ldr	r2, [pc, #244]	; (80035e0 <TIM_Base_SetConfig+0x118>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d00b      	beq.n	8003508 <TIM_Base_SetConfig+0x40>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a3c      	ldr	r2, [pc, #240]	; (80035e4 <TIM_Base_SetConfig+0x11c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d007      	beq.n	8003508 <TIM_Base_SetConfig+0x40>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a3b      	ldr	r2, [pc, #236]	; (80035e8 <TIM_Base_SetConfig+0x120>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d003      	beq.n	8003508 <TIM_Base_SetConfig+0x40>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a3a      	ldr	r2, [pc, #232]	; (80035ec <TIM_Base_SetConfig+0x124>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d108      	bne.n	800351a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800350e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	4313      	orrs	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a2f      	ldr	r2, [pc, #188]	; (80035dc <TIM_Base_SetConfig+0x114>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d02b      	beq.n	800357a <TIM_Base_SetConfig+0xb2>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003528:	d027      	beq.n	800357a <TIM_Base_SetConfig+0xb2>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a2c      	ldr	r2, [pc, #176]	; (80035e0 <TIM_Base_SetConfig+0x118>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d023      	beq.n	800357a <TIM_Base_SetConfig+0xb2>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a2b      	ldr	r2, [pc, #172]	; (80035e4 <TIM_Base_SetConfig+0x11c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d01f      	beq.n	800357a <TIM_Base_SetConfig+0xb2>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a2a      	ldr	r2, [pc, #168]	; (80035e8 <TIM_Base_SetConfig+0x120>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d01b      	beq.n	800357a <TIM_Base_SetConfig+0xb2>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a29      	ldr	r2, [pc, #164]	; (80035ec <TIM_Base_SetConfig+0x124>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d017      	beq.n	800357a <TIM_Base_SetConfig+0xb2>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a28      	ldr	r2, [pc, #160]	; (80035f0 <TIM_Base_SetConfig+0x128>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d013      	beq.n	800357a <TIM_Base_SetConfig+0xb2>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a27      	ldr	r2, [pc, #156]	; (80035f4 <TIM_Base_SetConfig+0x12c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d00f      	beq.n	800357a <TIM_Base_SetConfig+0xb2>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a26      	ldr	r2, [pc, #152]	; (80035f8 <TIM_Base_SetConfig+0x130>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d00b      	beq.n	800357a <TIM_Base_SetConfig+0xb2>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a25      	ldr	r2, [pc, #148]	; (80035fc <TIM_Base_SetConfig+0x134>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d007      	beq.n	800357a <TIM_Base_SetConfig+0xb2>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a24      	ldr	r2, [pc, #144]	; (8003600 <TIM_Base_SetConfig+0x138>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d003      	beq.n	800357a <TIM_Base_SetConfig+0xb2>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a23      	ldr	r2, [pc, #140]	; (8003604 <TIM_Base_SetConfig+0x13c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d108      	bne.n	800358c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	4313      	orrs	r3, r2
 800358a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	4313      	orrs	r3, r2
 8003598:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a0a      	ldr	r2, [pc, #40]	; (80035dc <TIM_Base_SetConfig+0x114>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d003      	beq.n	80035c0 <TIM_Base_SetConfig+0xf8>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a0c      	ldr	r2, [pc, #48]	; (80035ec <TIM_Base_SetConfig+0x124>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d103      	bne.n	80035c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	691a      	ldr	r2, [r3, #16]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	615a      	str	r2, [r3, #20]
}
 80035ce:	bf00      	nop
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	40010000 	.word	0x40010000
 80035e0:	40000400 	.word	0x40000400
 80035e4:	40000800 	.word	0x40000800
 80035e8:	40000c00 	.word	0x40000c00
 80035ec:	40010400 	.word	0x40010400
 80035f0:	40014000 	.word	0x40014000
 80035f4:	40014400 	.word	0x40014400
 80035f8:	40014800 	.word	0x40014800
 80035fc:	40001800 	.word	0x40001800
 8003600:	40001c00 	.word	0x40001c00
 8003604:	40002000 	.word	0x40002000

08003608 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003608:	b480      	push	{r7}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	f023 0201 	bic.w	r2, r3, #1
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003632:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	4313      	orrs	r3, r2
 800363c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f023 030a 	bic.w	r3, r3, #10
 8003644:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	4313      	orrs	r3, r2
 800364c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	621a      	str	r2, [r3, #32]
}
 800365a:	bf00      	nop
 800365c:	371c      	adds	r7, #28
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003666:	b480      	push	{r7}
 8003668:	b087      	sub	sp, #28
 800366a:	af00      	add	r7, sp, #0
 800366c:	60f8      	str	r0, [r7, #12]
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	f023 0210 	bic.w	r2, r3, #16
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003690:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	031b      	lsls	r3, r3, #12
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	4313      	orrs	r3, r2
 800369a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	011b      	lsls	r3, r3, #4
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	621a      	str	r2, [r3, #32]
}
 80036ba:	bf00      	nop
 80036bc:	371c      	adds	r7, #28
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b085      	sub	sp, #20
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
 80036ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f043 0307 	orr.w	r3, r3, #7
 80036e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	609a      	str	r2, [r3, #8]
}
 80036f0:	bf00      	nop
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
 8003708:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003716:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	021a      	lsls	r2, r3, #8
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	431a      	orrs	r2, r3
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	4313      	orrs	r3, r2
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	4313      	orrs	r3, r2
 8003728:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	609a      	str	r2, [r3, #8]
}
 8003730:	bf00      	nop
 8003732:	371c      	adds	r7, #28
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800374c:	2b01      	cmp	r3, #1
 800374e:	d101      	bne.n	8003754 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003750:	2302      	movs	r3, #2
 8003752:	e05a      	b.n	800380a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2202      	movs	r2, #2
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800377a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	4313      	orrs	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a21      	ldr	r2, [pc, #132]	; (8003818 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d022      	beq.n	80037de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a0:	d01d      	beq.n	80037de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a1d      	ldr	r2, [pc, #116]	; (800381c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d018      	beq.n	80037de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a1b      	ldr	r2, [pc, #108]	; (8003820 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d013      	beq.n	80037de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a1a      	ldr	r2, [pc, #104]	; (8003824 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d00e      	beq.n	80037de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a18      	ldr	r2, [pc, #96]	; (8003828 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d009      	beq.n	80037de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a17      	ldr	r2, [pc, #92]	; (800382c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d004      	beq.n	80037de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a15      	ldr	r2, [pc, #84]	; (8003830 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d10c      	bne.n	80037f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40010000 	.word	0x40010000
 800381c:	40000400 	.word	0x40000400
 8003820:	40000800 	.word	0x40000800
 8003824:	40000c00 	.word	0x40000c00
 8003828:	40010400 	.word	0x40010400
 800382c:	40014000 	.word	0x40014000
 8003830:	40001800 	.word	0x40001800

08003834 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <__errno>:
 800385c:	4b01      	ldr	r3, [pc, #4]	; (8003864 <__errno+0x8>)
 800385e:	6818      	ldr	r0, [r3, #0]
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	20000024 	.word	0x20000024

08003868 <__libc_init_array>:
 8003868:	b570      	push	{r4, r5, r6, lr}
 800386a:	4d0d      	ldr	r5, [pc, #52]	; (80038a0 <__libc_init_array+0x38>)
 800386c:	4c0d      	ldr	r4, [pc, #52]	; (80038a4 <__libc_init_array+0x3c>)
 800386e:	1b64      	subs	r4, r4, r5
 8003870:	10a4      	asrs	r4, r4, #2
 8003872:	2600      	movs	r6, #0
 8003874:	42a6      	cmp	r6, r4
 8003876:	d109      	bne.n	800388c <__libc_init_array+0x24>
 8003878:	4d0b      	ldr	r5, [pc, #44]	; (80038a8 <__libc_init_array+0x40>)
 800387a:	4c0c      	ldr	r4, [pc, #48]	; (80038ac <__libc_init_array+0x44>)
 800387c:	f001 f8ca 	bl	8004a14 <_init>
 8003880:	1b64      	subs	r4, r4, r5
 8003882:	10a4      	asrs	r4, r4, #2
 8003884:	2600      	movs	r6, #0
 8003886:	42a6      	cmp	r6, r4
 8003888:	d105      	bne.n	8003896 <__libc_init_array+0x2e>
 800388a:	bd70      	pop	{r4, r5, r6, pc}
 800388c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003890:	4798      	blx	r3
 8003892:	3601      	adds	r6, #1
 8003894:	e7ee      	b.n	8003874 <__libc_init_array+0xc>
 8003896:	f855 3b04 	ldr.w	r3, [r5], #4
 800389a:	4798      	blx	r3
 800389c:	3601      	adds	r6, #1
 800389e:	e7f2      	b.n	8003886 <__libc_init_array+0x1e>
 80038a0:	080077a0 	.word	0x080077a0
 80038a4:	080077a0 	.word	0x080077a0
 80038a8:	080077a0 	.word	0x080077a0
 80038ac:	080077a4 	.word	0x080077a4

080038b0 <memcpy>:
 80038b0:	440a      	add	r2, r1
 80038b2:	4291      	cmp	r1, r2
 80038b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80038b8:	d100      	bne.n	80038bc <memcpy+0xc>
 80038ba:	4770      	bx	lr
 80038bc:	b510      	push	{r4, lr}
 80038be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038c6:	4291      	cmp	r1, r2
 80038c8:	d1f9      	bne.n	80038be <memcpy+0xe>
 80038ca:	bd10      	pop	{r4, pc}

080038cc <memset>:
 80038cc:	4402      	add	r2, r0
 80038ce:	4603      	mov	r3, r0
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d100      	bne.n	80038d6 <memset+0xa>
 80038d4:	4770      	bx	lr
 80038d6:	f803 1b01 	strb.w	r1, [r3], #1
 80038da:	e7f9      	b.n	80038d0 <memset+0x4>

080038dc <srand>:
 80038dc:	b538      	push	{r3, r4, r5, lr}
 80038de:	4b10      	ldr	r3, [pc, #64]	; (8003920 <srand+0x44>)
 80038e0:	681d      	ldr	r5, [r3, #0]
 80038e2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80038e4:	4604      	mov	r4, r0
 80038e6:	b9b3      	cbnz	r3, 8003916 <srand+0x3a>
 80038e8:	2018      	movs	r0, #24
 80038ea:	f000 f9b9 	bl	8003c60 <malloc>
 80038ee:	4602      	mov	r2, r0
 80038f0:	63a8      	str	r0, [r5, #56]	; 0x38
 80038f2:	b920      	cbnz	r0, 80038fe <srand+0x22>
 80038f4:	4b0b      	ldr	r3, [pc, #44]	; (8003924 <srand+0x48>)
 80038f6:	480c      	ldr	r0, [pc, #48]	; (8003928 <srand+0x4c>)
 80038f8:	2142      	movs	r1, #66	; 0x42
 80038fa:	f000 f875 	bl	80039e8 <__assert_func>
 80038fe:	490b      	ldr	r1, [pc, #44]	; (800392c <srand+0x50>)
 8003900:	4b0b      	ldr	r3, [pc, #44]	; (8003930 <srand+0x54>)
 8003902:	e9c0 1300 	strd	r1, r3, [r0]
 8003906:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <srand+0x58>)
 8003908:	6083      	str	r3, [r0, #8]
 800390a:	230b      	movs	r3, #11
 800390c:	8183      	strh	r3, [r0, #12]
 800390e:	2100      	movs	r1, #0
 8003910:	2001      	movs	r0, #1
 8003912:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003916:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003918:	2200      	movs	r2, #0
 800391a:	611c      	str	r4, [r3, #16]
 800391c:	615a      	str	r2, [r3, #20]
 800391e:	bd38      	pop	{r3, r4, r5, pc}
 8003920:	20000024 	.word	0x20000024
 8003924:	08007654 	.word	0x08007654
 8003928:	0800766b 	.word	0x0800766b
 800392c:	abcd330e 	.word	0xabcd330e
 8003930:	e66d1234 	.word	0xe66d1234
 8003934:	0005deec 	.word	0x0005deec

08003938 <rand>:
 8003938:	4b16      	ldr	r3, [pc, #88]	; (8003994 <rand+0x5c>)
 800393a:	b510      	push	{r4, lr}
 800393c:	681c      	ldr	r4, [r3, #0]
 800393e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003940:	b9b3      	cbnz	r3, 8003970 <rand+0x38>
 8003942:	2018      	movs	r0, #24
 8003944:	f000 f98c 	bl	8003c60 <malloc>
 8003948:	63a0      	str	r0, [r4, #56]	; 0x38
 800394a:	b928      	cbnz	r0, 8003958 <rand+0x20>
 800394c:	4602      	mov	r2, r0
 800394e:	4b12      	ldr	r3, [pc, #72]	; (8003998 <rand+0x60>)
 8003950:	4812      	ldr	r0, [pc, #72]	; (800399c <rand+0x64>)
 8003952:	214e      	movs	r1, #78	; 0x4e
 8003954:	f000 f848 	bl	80039e8 <__assert_func>
 8003958:	4a11      	ldr	r2, [pc, #68]	; (80039a0 <rand+0x68>)
 800395a:	4b12      	ldr	r3, [pc, #72]	; (80039a4 <rand+0x6c>)
 800395c:	e9c0 2300 	strd	r2, r3, [r0]
 8003960:	4b11      	ldr	r3, [pc, #68]	; (80039a8 <rand+0x70>)
 8003962:	6083      	str	r3, [r0, #8]
 8003964:	230b      	movs	r3, #11
 8003966:	8183      	strh	r3, [r0, #12]
 8003968:	2201      	movs	r2, #1
 800396a:	2300      	movs	r3, #0
 800396c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003970:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8003972:	4a0e      	ldr	r2, [pc, #56]	; (80039ac <rand+0x74>)
 8003974:	6920      	ldr	r0, [r4, #16]
 8003976:	6963      	ldr	r3, [r4, #20]
 8003978:	490d      	ldr	r1, [pc, #52]	; (80039b0 <rand+0x78>)
 800397a:	4342      	muls	r2, r0
 800397c:	fb01 2203 	mla	r2, r1, r3, r2
 8003980:	fba0 0101 	umull	r0, r1, r0, r1
 8003984:	1c43      	adds	r3, r0, #1
 8003986:	eb42 0001 	adc.w	r0, r2, r1
 800398a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800398e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003992:	bd10      	pop	{r4, pc}
 8003994:	20000024 	.word	0x20000024
 8003998:	08007654 	.word	0x08007654
 800399c:	0800766b 	.word	0x0800766b
 80039a0:	abcd330e 	.word	0xabcd330e
 80039a4:	e66d1234 	.word	0xe66d1234
 80039a8:	0005deec 	.word	0x0005deec
 80039ac:	5851f42d 	.word	0x5851f42d
 80039b0:	4c957f2d 	.word	0x4c957f2d

080039b4 <time>:
 80039b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80039b6:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <time+0x30>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	4669      	mov	r1, sp
 80039bc:	4604      	mov	r4, r0
 80039be:	6818      	ldr	r0, [r3, #0]
 80039c0:	f000 f938 	bl	8003c34 <_gettimeofday_r>
 80039c4:	2800      	cmp	r0, #0
 80039c6:	bfbe      	ittt	lt
 80039c8:	f04f 32ff 	movlt.w	r2, #4294967295
 80039cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80039d0:	e9cd 2300 	strdlt	r2, r3, [sp]
 80039d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80039d8:	b10c      	cbz	r4, 80039de <time+0x2a>
 80039da:	e9c4 0100 	strd	r0, r1, [r4]
 80039de:	b004      	add	sp, #16
 80039e0:	bd10      	pop	{r4, pc}
 80039e2:	bf00      	nop
 80039e4:	20000024 	.word	0x20000024

080039e8 <__assert_func>:
 80039e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80039ea:	4614      	mov	r4, r2
 80039ec:	461a      	mov	r2, r3
 80039ee:	4b09      	ldr	r3, [pc, #36]	; (8003a14 <__assert_func+0x2c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4605      	mov	r5, r0
 80039f4:	68d8      	ldr	r0, [r3, #12]
 80039f6:	b14c      	cbz	r4, 8003a0c <__assert_func+0x24>
 80039f8:	4b07      	ldr	r3, [pc, #28]	; (8003a18 <__assert_func+0x30>)
 80039fa:	9100      	str	r1, [sp, #0]
 80039fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003a00:	4906      	ldr	r1, [pc, #24]	; (8003a1c <__assert_func+0x34>)
 8003a02:	462b      	mov	r3, r5
 8003a04:	f000 f8e4 	bl	8003bd0 <fiprintf>
 8003a08:	f000 fe26 	bl	8004658 <abort>
 8003a0c:	4b04      	ldr	r3, [pc, #16]	; (8003a20 <__assert_func+0x38>)
 8003a0e:	461c      	mov	r4, r3
 8003a10:	e7f3      	b.n	80039fa <__assert_func+0x12>
 8003a12:	bf00      	nop
 8003a14:	20000024 	.word	0x20000024
 8003a18:	080076c6 	.word	0x080076c6
 8003a1c:	080076d3 	.word	0x080076d3
 8003a20:	08007701 	.word	0x08007701

08003a24 <std>:
 8003a24:	2300      	movs	r3, #0
 8003a26:	b510      	push	{r4, lr}
 8003a28:	4604      	mov	r4, r0
 8003a2a:	e9c0 3300 	strd	r3, r3, [r0]
 8003a2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a32:	6083      	str	r3, [r0, #8]
 8003a34:	8181      	strh	r1, [r0, #12]
 8003a36:	6643      	str	r3, [r0, #100]	; 0x64
 8003a38:	81c2      	strh	r2, [r0, #14]
 8003a3a:	6183      	str	r3, [r0, #24]
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	2208      	movs	r2, #8
 8003a40:	305c      	adds	r0, #92	; 0x5c
 8003a42:	f7ff ff43 	bl	80038cc <memset>
 8003a46:	4b05      	ldr	r3, [pc, #20]	; (8003a5c <std+0x38>)
 8003a48:	6263      	str	r3, [r4, #36]	; 0x24
 8003a4a:	4b05      	ldr	r3, [pc, #20]	; (8003a60 <std+0x3c>)
 8003a4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003a4e:	4b05      	ldr	r3, [pc, #20]	; (8003a64 <std+0x40>)
 8003a50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003a52:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <std+0x44>)
 8003a54:	6224      	str	r4, [r4, #32]
 8003a56:	6323      	str	r3, [r4, #48]	; 0x30
 8003a58:	bd10      	pop	{r4, pc}
 8003a5a:	bf00      	nop
 8003a5c:	0800442d 	.word	0x0800442d
 8003a60:	0800444f 	.word	0x0800444f
 8003a64:	08004487 	.word	0x08004487
 8003a68:	080044ab 	.word	0x080044ab

08003a6c <_cleanup_r>:
 8003a6c:	4901      	ldr	r1, [pc, #4]	; (8003a74 <_cleanup_r+0x8>)
 8003a6e:	f000 b8c1 	b.w	8003bf4 <_fwalk_reent>
 8003a72:	bf00      	nop
 8003a74:	08004795 	.word	0x08004795

08003a78 <__sfmoreglue>:
 8003a78:	b570      	push	{r4, r5, r6, lr}
 8003a7a:	2268      	movs	r2, #104	; 0x68
 8003a7c:	1e4d      	subs	r5, r1, #1
 8003a7e:	4355      	muls	r5, r2
 8003a80:	460e      	mov	r6, r1
 8003a82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003a86:	f000 f95f 	bl	8003d48 <_malloc_r>
 8003a8a:	4604      	mov	r4, r0
 8003a8c:	b140      	cbz	r0, 8003aa0 <__sfmoreglue+0x28>
 8003a8e:	2100      	movs	r1, #0
 8003a90:	e9c0 1600 	strd	r1, r6, [r0]
 8003a94:	300c      	adds	r0, #12
 8003a96:	60a0      	str	r0, [r4, #8]
 8003a98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003a9c:	f7ff ff16 	bl	80038cc <memset>
 8003aa0:	4620      	mov	r0, r4
 8003aa2:	bd70      	pop	{r4, r5, r6, pc}

08003aa4 <__sfp_lock_acquire>:
 8003aa4:	4801      	ldr	r0, [pc, #4]	; (8003aac <__sfp_lock_acquire+0x8>)
 8003aa6:	f000 b8d8 	b.w	8003c5a <__retarget_lock_acquire_recursive>
 8003aaa:	bf00      	nop
 8003aac:	2000026d 	.word	0x2000026d

08003ab0 <__sfp_lock_release>:
 8003ab0:	4801      	ldr	r0, [pc, #4]	; (8003ab8 <__sfp_lock_release+0x8>)
 8003ab2:	f000 b8d3 	b.w	8003c5c <__retarget_lock_release_recursive>
 8003ab6:	bf00      	nop
 8003ab8:	2000026d 	.word	0x2000026d

08003abc <__sinit_lock_acquire>:
 8003abc:	4801      	ldr	r0, [pc, #4]	; (8003ac4 <__sinit_lock_acquire+0x8>)
 8003abe:	f000 b8cc 	b.w	8003c5a <__retarget_lock_acquire_recursive>
 8003ac2:	bf00      	nop
 8003ac4:	2000026e 	.word	0x2000026e

08003ac8 <__sinit_lock_release>:
 8003ac8:	4801      	ldr	r0, [pc, #4]	; (8003ad0 <__sinit_lock_release+0x8>)
 8003aca:	f000 b8c7 	b.w	8003c5c <__retarget_lock_release_recursive>
 8003ace:	bf00      	nop
 8003ad0:	2000026e 	.word	0x2000026e

08003ad4 <__sinit>:
 8003ad4:	b510      	push	{r4, lr}
 8003ad6:	4604      	mov	r4, r0
 8003ad8:	f7ff fff0 	bl	8003abc <__sinit_lock_acquire>
 8003adc:	69a3      	ldr	r3, [r4, #24]
 8003ade:	b11b      	cbz	r3, 8003ae8 <__sinit+0x14>
 8003ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ae4:	f7ff bff0 	b.w	8003ac8 <__sinit_lock_release>
 8003ae8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003aec:	6523      	str	r3, [r4, #80]	; 0x50
 8003aee:	4b13      	ldr	r3, [pc, #76]	; (8003b3c <__sinit+0x68>)
 8003af0:	4a13      	ldr	r2, [pc, #76]	; (8003b40 <__sinit+0x6c>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	62a2      	str	r2, [r4, #40]	; 0x28
 8003af6:	42a3      	cmp	r3, r4
 8003af8:	bf04      	itt	eq
 8003afa:	2301      	moveq	r3, #1
 8003afc:	61a3      	streq	r3, [r4, #24]
 8003afe:	4620      	mov	r0, r4
 8003b00:	f000 f820 	bl	8003b44 <__sfp>
 8003b04:	6060      	str	r0, [r4, #4]
 8003b06:	4620      	mov	r0, r4
 8003b08:	f000 f81c 	bl	8003b44 <__sfp>
 8003b0c:	60a0      	str	r0, [r4, #8]
 8003b0e:	4620      	mov	r0, r4
 8003b10:	f000 f818 	bl	8003b44 <__sfp>
 8003b14:	2200      	movs	r2, #0
 8003b16:	60e0      	str	r0, [r4, #12]
 8003b18:	2104      	movs	r1, #4
 8003b1a:	6860      	ldr	r0, [r4, #4]
 8003b1c:	f7ff ff82 	bl	8003a24 <std>
 8003b20:	68a0      	ldr	r0, [r4, #8]
 8003b22:	2201      	movs	r2, #1
 8003b24:	2109      	movs	r1, #9
 8003b26:	f7ff ff7d 	bl	8003a24 <std>
 8003b2a:	68e0      	ldr	r0, [r4, #12]
 8003b2c:	2202      	movs	r2, #2
 8003b2e:	2112      	movs	r1, #18
 8003b30:	f7ff ff78 	bl	8003a24 <std>
 8003b34:	2301      	movs	r3, #1
 8003b36:	61a3      	str	r3, [r4, #24]
 8003b38:	e7d2      	b.n	8003ae0 <__sinit+0xc>
 8003b3a:	bf00      	nop
 8003b3c:	08007650 	.word	0x08007650
 8003b40:	08003a6d 	.word	0x08003a6d

08003b44 <__sfp>:
 8003b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b46:	4607      	mov	r7, r0
 8003b48:	f7ff ffac 	bl	8003aa4 <__sfp_lock_acquire>
 8003b4c:	4b1e      	ldr	r3, [pc, #120]	; (8003bc8 <__sfp+0x84>)
 8003b4e:	681e      	ldr	r6, [r3, #0]
 8003b50:	69b3      	ldr	r3, [r6, #24]
 8003b52:	b913      	cbnz	r3, 8003b5a <__sfp+0x16>
 8003b54:	4630      	mov	r0, r6
 8003b56:	f7ff ffbd 	bl	8003ad4 <__sinit>
 8003b5a:	3648      	adds	r6, #72	; 0x48
 8003b5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003b60:	3b01      	subs	r3, #1
 8003b62:	d503      	bpl.n	8003b6c <__sfp+0x28>
 8003b64:	6833      	ldr	r3, [r6, #0]
 8003b66:	b30b      	cbz	r3, 8003bac <__sfp+0x68>
 8003b68:	6836      	ldr	r6, [r6, #0]
 8003b6a:	e7f7      	b.n	8003b5c <__sfp+0x18>
 8003b6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003b70:	b9d5      	cbnz	r5, 8003ba8 <__sfp+0x64>
 8003b72:	4b16      	ldr	r3, [pc, #88]	; (8003bcc <__sfp+0x88>)
 8003b74:	60e3      	str	r3, [r4, #12]
 8003b76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003b7a:	6665      	str	r5, [r4, #100]	; 0x64
 8003b7c:	f000 f86c 	bl	8003c58 <__retarget_lock_init_recursive>
 8003b80:	f7ff ff96 	bl	8003ab0 <__sfp_lock_release>
 8003b84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003b88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003b8c:	6025      	str	r5, [r4, #0]
 8003b8e:	61a5      	str	r5, [r4, #24]
 8003b90:	2208      	movs	r2, #8
 8003b92:	4629      	mov	r1, r5
 8003b94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003b98:	f7ff fe98 	bl	80038cc <memset>
 8003b9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003ba0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ba8:	3468      	adds	r4, #104	; 0x68
 8003baa:	e7d9      	b.n	8003b60 <__sfp+0x1c>
 8003bac:	2104      	movs	r1, #4
 8003bae:	4638      	mov	r0, r7
 8003bb0:	f7ff ff62 	bl	8003a78 <__sfmoreglue>
 8003bb4:	4604      	mov	r4, r0
 8003bb6:	6030      	str	r0, [r6, #0]
 8003bb8:	2800      	cmp	r0, #0
 8003bba:	d1d5      	bne.n	8003b68 <__sfp+0x24>
 8003bbc:	f7ff ff78 	bl	8003ab0 <__sfp_lock_release>
 8003bc0:	230c      	movs	r3, #12
 8003bc2:	603b      	str	r3, [r7, #0]
 8003bc4:	e7ee      	b.n	8003ba4 <__sfp+0x60>
 8003bc6:	bf00      	nop
 8003bc8:	08007650 	.word	0x08007650
 8003bcc:	ffff0001 	.word	0xffff0001

08003bd0 <fiprintf>:
 8003bd0:	b40e      	push	{r1, r2, r3}
 8003bd2:	b503      	push	{r0, r1, lr}
 8003bd4:	4601      	mov	r1, r0
 8003bd6:	ab03      	add	r3, sp, #12
 8003bd8:	4805      	ldr	r0, [pc, #20]	; (8003bf0 <fiprintf+0x20>)
 8003bda:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bde:	6800      	ldr	r0, [r0, #0]
 8003be0:	9301      	str	r3, [sp, #4]
 8003be2:	f000 f94f 	bl	8003e84 <_vfiprintf_r>
 8003be6:	b002      	add	sp, #8
 8003be8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bec:	b003      	add	sp, #12
 8003bee:	4770      	bx	lr
 8003bf0:	20000024 	.word	0x20000024

08003bf4 <_fwalk_reent>:
 8003bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bf8:	4606      	mov	r6, r0
 8003bfa:	4688      	mov	r8, r1
 8003bfc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003c00:	2700      	movs	r7, #0
 8003c02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003c06:	f1b9 0901 	subs.w	r9, r9, #1
 8003c0a:	d505      	bpl.n	8003c18 <_fwalk_reent+0x24>
 8003c0c:	6824      	ldr	r4, [r4, #0]
 8003c0e:	2c00      	cmp	r4, #0
 8003c10:	d1f7      	bne.n	8003c02 <_fwalk_reent+0xe>
 8003c12:	4638      	mov	r0, r7
 8003c14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c18:	89ab      	ldrh	r3, [r5, #12]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d907      	bls.n	8003c2e <_fwalk_reent+0x3a>
 8003c1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c22:	3301      	adds	r3, #1
 8003c24:	d003      	beq.n	8003c2e <_fwalk_reent+0x3a>
 8003c26:	4629      	mov	r1, r5
 8003c28:	4630      	mov	r0, r6
 8003c2a:	47c0      	blx	r8
 8003c2c:	4307      	orrs	r7, r0
 8003c2e:	3568      	adds	r5, #104	; 0x68
 8003c30:	e7e9      	b.n	8003c06 <_fwalk_reent+0x12>
	...

08003c34 <_gettimeofday_r>:
 8003c34:	b538      	push	{r3, r4, r5, lr}
 8003c36:	4d07      	ldr	r5, [pc, #28]	; (8003c54 <_gettimeofday_r+0x20>)
 8003c38:	2300      	movs	r3, #0
 8003c3a:	4604      	mov	r4, r0
 8003c3c:	4608      	mov	r0, r1
 8003c3e:	4611      	mov	r1, r2
 8003c40:	602b      	str	r3, [r5, #0]
 8003c42:	f000 fedf 	bl	8004a04 <_gettimeofday>
 8003c46:	1c43      	adds	r3, r0, #1
 8003c48:	d102      	bne.n	8003c50 <_gettimeofday_r+0x1c>
 8003c4a:	682b      	ldr	r3, [r5, #0]
 8003c4c:	b103      	cbz	r3, 8003c50 <_gettimeofday_r+0x1c>
 8003c4e:	6023      	str	r3, [r4, #0]
 8003c50:	bd38      	pop	{r3, r4, r5, pc}
 8003c52:	bf00      	nop
 8003c54:	20000278 	.word	0x20000278

08003c58 <__retarget_lock_init_recursive>:
 8003c58:	4770      	bx	lr

08003c5a <__retarget_lock_acquire_recursive>:
 8003c5a:	4770      	bx	lr

08003c5c <__retarget_lock_release_recursive>:
 8003c5c:	4770      	bx	lr
	...

08003c60 <malloc>:
 8003c60:	4b02      	ldr	r3, [pc, #8]	; (8003c6c <malloc+0xc>)
 8003c62:	4601      	mov	r1, r0
 8003c64:	6818      	ldr	r0, [r3, #0]
 8003c66:	f000 b86f 	b.w	8003d48 <_malloc_r>
 8003c6a:	bf00      	nop
 8003c6c:	20000024 	.word	0x20000024

08003c70 <_free_r>:
 8003c70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c72:	2900      	cmp	r1, #0
 8003c74:	d044      	beq.n	8003d00 <_free_r+0x90>
 8003c76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c7a:	9001      	str	r0, [sp, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f1a1 0404 	sub.w	r4, r1, #4
 8003c82:	bfb8      	it	lt
 8003c84:	18e4      	addlt	r4, r4, r3
 8003c86:	f000 fe39 	bl	80048fc <__malloc_lock>
 8003c8a:	4a1e      	ldr	r2, [pc, #120]	; (8003d04 <_free_r+0x94>)
 8003c8c:	9801      	ldr	r0, [sp, #4]
 8003c8e:	6813      	ldr	r3, [r2, #0]
 8003c90:	b933      	cbnz	r3, 8003ca0 <_free_r+0x30>
 8003c92:	6063      	str	r3, [r4, #4]
 8003c94:	6014      	str	r4, [r2, #0]
 8003c96:	b003      	add	sp, #12
 8003c98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c9c:	f000 be34 	b.w	8004908 <__malloc_unlock>
 8003ca0:	42a3      	cmp	r3, r4
 8003ca2:	d908      	bls.n	8003cb6 <_free_r+0x46>
 8003ca4:	6825      	ldr	r5, [r4, #0]
 8003ca6:	1961      	adds	r1, r4, r5
 8003ca8:	428b      	cmp	r3, r1
 8003caa:	bf01      	itttt	eq
 8003cac:	6819      	ldreq	r1, [r3, #0]
 8003cae:	685b      	ldreq	r3, [r3, #4]
 8003cb0:	1949      	addeq	r1, r1, r5
 8003cb2:	6021      	streq	r1, [r4, #0]
 8003cb4:	e7ed      	b.n	8003c92 <_free_r+0x22>
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	b10b      	cbz	r3, 8003cc0 <_free_r+0x50>
 8003cbc:	42a3      	cmp	r3, r4
 8003cbe:	d9fa      	bls.n	8003cb6 <_free_r+0x46>
 8003cc0:	6811      	ldr	r1, [r2, #0]
 8003cc2:	1855      	adds	r5, r2, r1
 8003cc4:	42a5      	cmp	r5, r4
 8003cc6:	d10b      	bne.n	8003ce0 <_free_r+0x70>
 8003cc8:	6824      	ldr	r4, [r4, #0]
 8003cca:	4421      	add	r1, r4
 8003ccc:	1854      	adds	r4, r2, r1
 8003cce:	42a3      	cmp	r3, r4
 8003cd0:	6011      	str	r1, [r2, #0]
 8003cd2:	d1e0      	bne.n	8003c96 <_free_r+0x26>
 8003cd4:	681c      	ldr	r4, [r3, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	6053      	str	r3, [r2, #4]
 8003cda:	4421      	add	r1, r4
 8003cdc:	6011      	str	r1, [r2, #0]
 8003cde:	e7da      	b.n	8003c96 <_free_r+0x26>
 8003ce0:	d902      	bls.n	8003ce8 <_free_r+0x78>
 8003ce2:	230c      	movs	r3, #12
 8003ce4:	6003      	str	r3, [r0, #0]
 8003ce6:	e7d6      	b.n	8003c96 <_free_r+0x26>
 8003ce8:	6825      	ldr	r5, [r4, #0]
 8003cea:	1961      	adds	r1, r4, r5
 8003cec:	428b      	cmp	r3, r1
 8003cee:	bf04      	itt	eq
 8003cf0:	6819      	ldreq	r1, [r3, #0]
 8003cf2:	685b      	ldreq	r3, [r3, #4]
 8003cf4:	6063      	str	r3, [r4, #4]
 8003cf6:	bf04      	itt	eq
 8003cf8:	1949      	addeq	r1, r1, r5
 8003cfa:	6021      	streq	r1, [r4, #0]
 8003cfc:	6054      	str	r4, [r2, #4]
 8003cfe:	e7ca      	b.n	8003c96 <_free_r+0x26>
 8003d00:	b003      	add	sp, #12
 8003d02:	bd30      	pop	{r4, r5, pc}
 8003d04:	20000270 	.word	0x20000270

08003d08 <sbrk_aligned>:
 8003d08:	b570      	push	{r4, r5, r6, lr}
 8003d0a:	4e0e      	ldr	r6, [pc, #56]	; (8003d44 <sbrk_aligned+0x3c>)
 8003d0c:	460c      	mov	r4, r1
 8003d0e:	6831      	ldr	r1, [r6, #0]
 8003d10:	4605      	mov	r5, r0
 8003d12:	b911      	cbnz	r1, 8003d1a <sbrk_aligned+0x12>
 8003d14:	f000 fb7a 	bl	800440c <_sbrk_r>
 8003d18:	6030      	str	r0, [r6, #0]
 8003d1a:	4621      	mov	r1, r4
 8003d1c:	4628      	mov	r0, r5
 8003d1e:	f000 fb75 	bl	800440c <_sbrk_r>
 8003d22:	1c43      	adds	r3, r0, #1
 8003d24:	d00a      	beq.n	8003d3c <sbrk_aligned+0x34>
 8003d26:	1cc4      	adds	r4, r0, #3
 8003d28:	f024 0403 	bic.w	r4, r4, #3
 8003d2c:	42a0      	cmp	r0, r4
 8003d2e:	d007      	beq.n	8003d40 <sbrk_aligned+0x38>
 8003d30:	1a21      	subs	r1, r4, r0
 8003d32:	4628      	mov	r0, r5
 8003d34:	f000 fb6a 	bl	800440c <_sbrk_r>
 8003d38:	3001      	adds	r0, #1
 8003d3a:	d101      	bne.n	8003d40 <sbrk_aligned+0x38>
 8003d3c:	f04f 34ff 	mov.w	r4, #4294967295
 8003d40:	4620      	mov	r0, r4
 8003d42:	bd70      	pop	{r4, r5, r6, pc}
 8003d44:	20000274 	.word	0x20000274

08003d48 <_malloc_r>:
 8003d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d4c:	1ccd      	adds	r5, r1, #3
 8003d4e:	f025 0503 	bic.w	r5, r5, #3
 8003d52:	3508      	adds	r5, #8
 8003d54:	2d0c      	cmp	r5, #12
 8003d56:	bf38      	it	cc
 8003d58:	250c      	movcc	r5, #12
 8003d5a:	2d00      	cmp	r5, #0
 8003d5c:	4607      	mov	r7, r0
 8003d5e:	db01      	blt.n	8003d64 <_malloc_r+0x1c>
 8003d60:	42a9      	cmp	r1, r5
 8003d62:	d905      	bls.n	8003d70 <_malloc_r+0x28>
 8003d64:	230c      	movs	r3, #12
 8003d66:	603b      	str	r3, [r7, #0]
 8003d68:	2600      	movs	r6, #0
 8003d6a:	4630      	mov	r0, r6
 8003d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d70:	4e2e      	ldr	r6, [pc, #184]	; (8003e2c <_malloc_r+0xe4>)
 8003d72:	f000 fdc3 	bl	80048fc <__malloc_lock>
 8003d76:	6833      	ldr	r3, [r6, #0]
 8003d78:	461c      	mov	r4, r3
 8003d7a:	bb34      	cbnz	r4, 8003dca <_malloc_r+0x82>
 8003d7c:	4629      	mov	r1, r5
 8003d7e:	4638      	mov	r0, r7
 8003d80:	f7ff ffc2 	bl	8003d08 <sbrk_aligned>
 8003d84:	1c43      	adds	r3, r0, #1
 8003d86:	4604      	mov	r4, r0
 8003d88:	d14d      	bne.n	8003e26 <_malloc_r+0xde>
 8003d8a:	6834      	ldr	r4, [r6, #0]
 8003d8c:	4626      	mov	r6, r4
 8003d8e:	2e00      	cmp	r6, #0
 8003d90:	d140      	bne.n	8003e14 <_malloc_r+0xcc>
 8003d92:	6823      	ldr	r3, [r4, #0]
 8003d94:	4631      	mov	r1, r6
 8003d96:	4638      	mov	r0, r7
 8003d98:	eb04 0803 	add.w	r8, r4, r3
 8003d9c:	f000 fb36 	bl	800440c <_sbrk_r>
 8003da0:	4580      	cmp	r8, r0
 8003da2:	d13a      	bne.n	8003e1a <_malloc_r+0xd2>
 8003da4:	6821      	ldr	r1, [r4, #0]
 8003da6:	3503      	adds	r5, #3
 8003da8:	1a6d      	subs	r5, r5, r1
 8003daa:	f025 0503 	bic.w	r5, r5, #3
 8003dae:	3508      	adds	r5, #8
 8003db0:	2d0c      	cmp	r5, #12
 8003db2:	bf38      	it	cc
 8003db4:	250c      	movcc	r5, #12
 8003db6:	4629      	mov	r1, r5
 8003db8:	4638      	mov	r0, r7
 8003dba:	f7ff ffa5 	bl	8003d08 <sbrk_aligned>
 8003dbe:	3001      	adds	r0, #1
 8003dc0:	d02b      	beq.n	8003e1a <_malloc_r+0xd2>
 8003dc2:	6823      	ldr	r3, [r4, #0]
 8003dc4:	442b      	add	r3, r5
 8003dc6:	6023      	str	r3, [r4, #0]
 8003dc8:	e00e      	b.n	8003de8 <_malloc_r+0xa0>
 8003dca:	6822      	ldr	r2, [r4, #0]
 8003dcc:	1b52      	subs	r2, r2, r5
 8003dce:	d41e      	bmi.n	8003e0e <_malloc_r+0xc6>
 8003dd0:	2a0b      	cmp	r2, #11
 8003dd2:	d916      	bls.n	8003e02 <_malloc_r+0xba>
 8003dd4:	1961      	adds	r1, r4, r5
 8003dd6:	42a3      	cmp	r3, r4
 8003dd8:	6025      	str	r5, [r4, #0]
 8003dda:	bf18      	it	ne
 8003ddc:	6059      	strne	r1, [r3, #4]
 8003dde:	6863      	ldr	r3, [r4, #4]
 8003de0:	bf08      	it	eq
 8003de2:	6031      	streq	r1, [r6, #0]
 8003de4:	5162      	str	r2, [r4, r5]
 8003de6:	604b      	str	r3, [r1, #4]
 8003de8:	4638      	mov	r0, r7
 8003dea:	f104 060b 	add.w	r6, r4, #11
 8003dee:	f000 fd8b 	bl	8004908 <__malloc_unlock>
 8003df2:	f026 0607 	bic.w	r6, r6, #7
 8003df6:	1d23      	adds	r3, r4, #4
 8003df8:	1af2      	subs	r2, r6, r3
 8003dfa:	d0b6      	beq.n	8003d6a <_malloc_r+0x22>
 8003dfc:	1b9b      	subs	r3, r3, r6
 8003dfe:	50a3      	str	r3, [r4, r2]
 8003e00:	e7b3      	b.n	8003d6a <_malloc_r+0x22>
 8003e02:	6862      	ldr	r2, [r4, #4]
 8003e04:	42a3      	cmp	r3, r4
 8003e06:	bf0c      	ite	eq
 8003e08:	6032      	streq	r2, [r6, #0]
 8003e0a:	605a      	strne	r2, [r3, #4]
 8003e0c:	e7ec      	b.n	8003de8 <_malloc_r+0xa0>
 8003e0e:	4623      	mov	r3, r4
 8003e10:	6864      	ldr	r4, [r4, #4]
 8003e12:	e7b2      	b.n	8003d7a <_malloc_r+0x32>
 8003e14:	4634      	mov	r4, r6
 8003e16:	6876      	ldr	r6, [r6, #4]
 8003e18:	e7b9      	b.n	8003d8e <_malloc_r+0x46>
 8003e1a:	230c      	movs	r3, #12
 8003e1c:	603b      	str	r3, [r7, #0]
 8003e1e:	4638      	mov	r0, r7
 8003e20:	f000 fd72 	bl	8004908 <__malloc_unlock>
 8003e24:	e7a1      	b.n	8003d6a <_malloc_r+0x22>
 8003e26:	6025      	str	r5, [r4, #0]
 8003e28:	e7de      	b.n	8003de8 <_malloc_r+0xa0>
 8003e2a:	bf00      	nop
 8003e2c:	20000270 	.word	0x20000270

08003e30 <__sfputc_r>:
 8003e30:	6893      	ldr	r3, [r2, #8]
 8003e32:	3b01      	subs	r3, #1
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	b410      	push	{r4}
 8003e38:	6093      	str	r3, [r2, #8]
 8003e3a:	da08      	bge.n	8003e4e <__sfputc_r+0x1e>
 8003e3c:	6994      	ldr	r4, [r2, #24]
 8003e3e:	42a3      	cmp	r3, r4
 8003e40:	db01      	blt.n	8003e46 <__sfputc_r+0x16>
 8003e42:	290a      	cmp	r1, #10
 8003e44:	d103      	bne.n	8003e4e <__sfputc_r+0x1e>
 8003e46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e4a:	f000 bb33 	b.w	80044b4 <__swbuf_r>
 8003e4e:	6813      	ldr	r3, [r2, #0]
 8003e50:	1c58      	adds	r0, r3, #1
 8003e52:	6010      	str	r0, [r2, #0]
 8003e54:	7019      	strb	r1, [r3, #0]
 8003e56:	4608      	mov	r0, r1
 8003e58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <__sfputs_r>:
 8003e5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e60:	4606      	mov	r6, r0
 8003e62:	460f      	mov	r7, r1
 8003e64:	4614      	mov	r4, r2
 8003e66:	18d5      	adds	r5, r2, r3
 8003e68:	42ac      	cmp	r4, r5
 8003e6a:	d101      	bne.n	8003e70 <__sfputs_r+0x12>
 8003e6c:	2000      	movs	r0, #0
 8003e6e:	e007      	b.n	8003e80 <__sfputs_r+0x22>
 8003e70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e74:	463a      	mov	r2, r7
 8003e76:	4630      	mov	r0, r6
 8003e78:	f7ff ffda 	bl	8003e30 <__sfputc_r>
 8003e7c:	1c43      	adds	r3, r0, #1
 8003e7e:	d1f3      	bne.n	8003e68 <__sfputs_r+0xa>
 8003e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e84 <_vfiprintf_r>:
 8003e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e88:	460d      	mov	r5, r1
 8003e8a:	b09d      	sub	sp, #116	; 0x74
 8003e8c:	4614      	mov	r4, r2
 8003e8e:	4698      	mov	r8, r3
 8003e90:	4606      	mov	r6, r0
 8003e92:	b118      	cbz	r0, 8003e9c <_vfiprintf_r+0x18>
 8003e94:	6983      	ldr	r3, [r0, #24]
 8003e96:	b90b      	cbnz	r3, 8003e9c <_vfiprintf_r+0x18>
 8003e98:	f7ff fe1c 	bl	8003ad4 <__sinit>
 8003e9c:	4b89      	ldr	r3, [pc, #548]	; (80040c4 <_vfiprintf_r+0x240>)
 8003e9e:	429d      	cmp	r5, r3
 8003ea0:	d11b      	bne.n	8003eda <_vfiprintf_r+0x56>
 8003ea2:	6875      	ldr	r5, [r6, #4]
 8003ea4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ea6:	07d9      	lsls	r1, r3, #31
 8003ea8:	d405      	bmi.n	8003eb6 <_vfiprintf_r+0x32>
 8003eaa:	89ab      	ldrh	r3, [r5, #12]
 8003eac:	059a      	lsls	r2, r3, #22
 8003eae:	d402      	bmi.n	8003eb6 <_vfiprintf_r+0x32>
 8003eb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003eb2:	f7ff fed2 	bl	8003c5a <__retarget_lock_acquire_recursive>
 8003eb6:	89ab      	ldrh	r3, [r5, #12]
 8003eb8:	071b      	lsls	r3, r3, #28
 8003eba:	d501      	bpl.n	8003ec0 <_vfiprintf_r+0x3c>
 8003ebc:	692b      	ldr	r3, [r5, #16]
 8003ebe:	b9eb      	cbnz	r3, 8003efc <_vfiprintf_r+0x78>
 8003ec0:	4629      	mov	r1, r5
 8003ec2:	4630      	mov	r0, r6
 8003ec4:	f000 fb5a 	bl	800457c <__swsetup_r>
 8003ec8:	b1c0      	cbz	r0, 8003efc <_vfiprintf_r+0x78>
 8003eca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ecc:	07dc      	lsls	r4, r3, #31
 8003ece:	d50e      	bpl.n	8003eee <_vfiprintf_r+0x6a>
 8003ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed4:	b01d      	add	sp, #116	; 0x74
 8003ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eda:	4b7b      	ldr	r3, [pc, #492]	; (80040c8 <_vfiprintf_r+0x244>)
 8003edc:	429d      	cmp	r5, r3
 8003ede:	d101      	bne.n	8003ee4 <_vfiprintf_r+0x60>
 8003ee0:	68b5      	ldr	r5, [r6, #8]
 8003ee2:	e7df      	b.n	8003ea4 <_vfiprintf_r+0x20>
 8003ee4:	4b79      	ldr	r3, [pc, #484]	; (80040cc <_vfiprintf_r+0x248>)
 8003ee6:	429d      	cmp	r5, r3
 8003ee8:	bf08      	it	eq
 8003eea:	68f5      	ldreq	r5, [r6, #12]
 8003eec:	e7da      	b.n	8003ea4 <_vfiprintf_r+0x20>
 8003eee:	89ab      	ldrh	r3, [r5, #12]
 8003ef0:	0598      	lsls	r0, r3, #22
 8003ef2:	d4ed      	bmi.n	8003ed0 <_vfiprintf_r+0x4c>
 8003ef4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ef6:	f7ff feb1 	bl	8003c5c <__retarget_lock_release_recursive>
 8003efa:	e7e9      	b.n	8003ed0 <_vfiprintf_r+0x4c>
 8003efc:	2300      	movs	r3, #0
 8003efe:	9309      	str	r3, [sp, #36]	; 0x24
 8003f00:	2320      	movs	r3, #32
 8003f02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f06:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f0a:	2330      	movs	r3, #48	; 0x30
 8003f0c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80040d0 <_vfiprintf_r+0x24c>
 8003f10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f14:	f04f 0901 	mov.w	r9, #1
 8003f18:	4623      	mov	r3, r4
 8003f1a:	469a      	mov	sl, r3
 8003f1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f20:	b10a      	cbz	r2, 8003f26 <_vfiprintf_r+0xa2>
 8003f22:	2a25      	cmp	r2, #37	; 0x25
 8003f24:	d1f9      	bne.n	8003f1a <_vfiprintf_r+0x96>
 8003f26:	ebba 0b04 	subs.w	fp, sl, r4
 8003f2a:	d00b      	beq.n	8003f44 <_vfiprintf_r+0xc0>
 8003f2c:	465b      	mov	r3, fp
 8003f2e:	4622      	mov	r2, r4
 8003f30:	4629      	mov	r1, r5
 8003f32:	4630      	mov	r0, r6
 8003f34:	f7ff ff93 	bl	8003e5e <__sfputs_r>
 8003f38:	3001      	adds	r0, #1
 8003f3a:	f000 80aa 	beq.w	8004092 <_vfiprintf_r+0x20e>
 8003f3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f40:	445a      	add	r2, fp
 8003f42:	9209      	str	r2, [sp, #36]	; 0x24
 8003f44:	f89a 3000 	ldrb.w	r3, [sl]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 80a2 	beq.w	8004092 <_vfiprintf_r+0x20e>
 8003f4e:	2300      	movs	r3, #0
 8003f50:	f04f 32ff 	mov.w	r2, #4294967295
 8003f54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f58:	f10a 0a01 	add.w	sl, sl, #1
 8003f5c:	9304      	str	r3, [sp, #16]
 8003f5e:	9307      	str	r3, [sp, #28]
 8003f60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f64:	931a      	str	r3, [sp, #104]	; 0x68
 8003f66:	4654      	mov	r4, sl
 8003f68:	2205      	movs	r2, #5
 8003f6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f6e:	4858      	ldr	r0, [pc, #352]	; (80040d0 <_vfiprintf_r+0x24c>)
 8003f70:	f7fc f93e 	bl	80001f0 <memchr>
 8003f74:	9a04      	ldr	r2, [sp, #16]
 8003f76:	b9d8      	cbnz	r0, 8003fb0 <_vfiprintf_r+0x12c>
 8003f78:	06d1      	lsls	r1, r2, #27
 8003f7a:	bf44      	itt	mi
 8003f7c:	2320      	movmi	r3, #32
 8003f7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f82:	0713      	lsls	r3, r2, #28
 8003f84:	bf44      	itt	mi
 8003f86:	232b      	movmi	r3, #43	; 0x2b
 8003f88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f8c:	f89a 3000 	ldrb.w	r3, [sl]
 8003f90:	2b2a      	cmp	r3, #42	; 0x2a
 8003f92:	d015      	beq.n	8003fc0 <_vfiprintf_r+0x13c>
 8003f94:	9a07      	ldr	r2, [sp, #28]
 8003f96:	4654      	mov	r4, sl
 8003f98:	2000      	movs	r0, #0
 8003f9a:	f04f 0c0a 	mov.w	ip, #10
 8003f9e:	4621      	mov	r1, r4
 8003fa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fa4:	3b30      	subs	r3, #48	; 0x30
 8003fa6:	2b09      	cmp	r3, #9
 8003fa8:	d94e      	bls.n	8004048 <_vfiprintf_r+0x1c4>
 8003faa:	b1b0      	cbz	r0, 8003fda <_vfiprintf_r+0x156>
 8003fac:	9207      	str	r2, [sp, #28]
 8003fae:	e014      	b.n	8003fda <_vfiprintf_r+0x156>
 8003fb0:	eba0 0308 	sub.w	r3, r0, r8
 8003fb4:	fa09 f303 	lsl.w	r3, r9, r3
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	9304      	str	r3, [sp, #16]
 8003fbc:	46a2      	mov	sl, r4
 8003fbe:	e7d2      	b.n	8003f66 <_vfiprintf_r+0xe2>
 8003fc0:	9b03      	ldr	r3, [sp, #12]
 8003fc2:	1d19      	adds	r1, r3, #4
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	9103      	str	r1, [sp, #12]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	bfbb      	ittet	lt
 8003fcc:	425b      	neglt	r3, r3
 8003fce:	f042 0202 	orrlt.w	r2, r2, #2
 8003fd2:	9307      	strge	r3, [sp, #28]
 8003fd4:	9307      	strlt	r3, [sp, #28]
 8003fd6:	bfb8      	it	lt
 8003fd8:	9204      	strlt	r2, [sp, #16]
 8003fda:	7823      	ldrb	r3, [r4, #0]
 8003fdc:	2b2e      	cmp	r3, #46	; 0x2e
 8003fde:	d10c      	bne.n	8003ffa <_vfiprintf_r+0x176>
 8003fe0:	7863      	ldrb	r3, [r4, #1]
 8003fe2:	2b2a      	cmp	r3, #42	; 0x2a
 8003fe4:	d135      	bne.n	8004052 <_vfiprintf_r+0x1ce>
 8003fe6:	9b03      	ldr	r3, [sp, #12]
 8003fe8:	1d1a      	adds	r2, r3, #4
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	9203      	str	r2, [sp, #12]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	bfb8      	it	lt
 8003ff2:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ff6:	3402      	adds	r4, #2
 8003ff8:	9305      	str	r3, [sp, #20]
 8003ffa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80040e0 <_vfiprintf_r+0x25c>
 8003ffe:	7821      	ldrb	r1, [r4, #0]
 8004000:	2203      	movs	r2, #3
 8004002:	4650      	mov	r0, sl
 8004004:	f7fc f8f4 	bl	80001f0 <memchr>
 8004008:	b140      	cbz	r0, 800401c <_vfiprintf_r+0x198>
 800400a:	2340      	movs	r3, #64	; 0x40
 800400c:	eba0 000a 	sub.w	r0, r0, sl
 8004010:	fa03 f000 	lsl.w	r0, r3, r0
 8004014:	9b04      	ldr	r3, [sp, #16]
 8004016:	4303      	orrs	r3, r0
 8004018:	3401      	adds	r4, #1
 800401a:	9304      	str	r3, [sp, #16]
 800401c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004020:	482c      	ldr	r0, [pc, #176]	; (80040d4 <_vfiprintf_r+0x250>)
 8004022:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004026:	2206      	movs	r2, #6
 8004028:	f7fc f8e2 	bl	80001f0 <memchr>
 800402c:	2800      	cmp	r0, #0
 800402e:	d03f      	beq.n	80040b0 <_vfiprintf_r+0x22c>
 8004030:	4b29      	ldr	r3, [pc, #164]	; (80040d8 <_vfiprintf_r+0x254>)
 8004032:	bb1b      	cbnz	r3, 800407c <_vfiprintf_r+0x1f8>
 8004034:	9b03      	ldr	r3, [sp, #12]
 8004036:	3307      	adds	r3, #7
 8004038:	f023 0307 	bic.w	r3, r3, #7
 800403c:	3308      	adds	r3, #8
 800403e:	9303      	str	r3, [sp, #12]
 8004040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004042:	443b      	add	r3, r7
 8004044:	9309      	str	r3, [sp, #36]	; 0x24
 8004046:	e767      	b.n	8003f18 <_vfiprintf_r+0x94>
 8004048:	fb0c 3202 	mla	r2, ip, r2, r3
 800404c:	460c      	mov	r4, r1
 800404e:	2001      	movs	r0, #1
 8004050:	e7a5      	b.n	8003f9e <_vfiprintf_r+0x11a>
 8004052:	2300      	movs	r3, #0
 8004054:	3401      	adds	r4, #1
 8004056:	9305      	str	r3, [sp, #20]
 8004058:	4619      	mov	r1, r3
 800405a:	f04f 0c0a 	mov.w	ip, #10
 800405e:	4620      	mov	r0, r4
 8004060:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004064:	3a30      	subs	r2, #48	; 0x30
 8004066:	2a09      	cmp	r2, #9
 8004068:	d903      	bls.n	8004072 <_vfiprintf_r+0x1ee>
 800406a:	2b00      	cmp	r3, #0
 800406c:	d0c5      	beq.n	8003ffa <_vfiprintf_r+0x176>
 800406e:	9105      	str	r1, [sp, #20]
 8004070:	e7c3      	b.n	8003ffa <_vfiprintf_r+0x176>
 8004072:	fb0c 2101 	mla	r1, ip, r1, r2
 8004076:	4604      	mov	r4, r0
 8004078:	2301      	movs	r3, #1
 800407a:	e7f0      	b.n	800405e <_vfiprintf_r+0x1da>
 800407c:	ab03      	add	r3, sp, #12
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	462a      	mov	r2, r5
 8004082:	4b16      	ldr	r3, [pc, #88]	; (80040dc <_vfiprintf_r+0x258>)
 8004084:	a904      	add	r1, sp, #16
 8004086:	4630      	mov	r0, r6
 8004088:	f3af 8000 	nop.w
 800408c:	4607      	mov	r7, r0
 800408e:	1c78      	adds	r0, r7, #1
 8004090:	d1d6      	bne.n	8004040 <_vfiprintf_r+0x1bc>
 8004092:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004094:	07d9      	lsls	r1, r3, #31
 8004096:	d405      	bmi.n	80040a4 <_vfiprintf_r+0x220>
 8004098:	89ab      	ldrh	r3, [r5, #12]
 800409a:	059a      	lsls	r2, r3, #22
 800409c:	d402      	bmi.n	80040a4 <_vfiprintf_r+0x220>
 800409e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040a0:	f7ff fddc 	bl	8003c5c <__retarget_lock_release_recursive>
 80040a4:	89ab      	ldrh	r3, [r5, #12]
 80040a6:	065b      	lsls	r3, r3, #25
 80040a8:	f53f af12 	bmi.w	8003ed0 <_vfiprintf_r+0x4c>
 80040ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040ae:	e711      	b.n	8003ed4 <_vfiprintf_r+0x50>
 80040b0:	ab03      	add	r3, sp, #12
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	462a      	mov	r2, r5
 80040b6:	4b09      	ldr	r3, [pc, #36]	; (80040dc <_vfiprintf_r+0x258>)
 80040b8:	a904      	add	r1, sp, #16
 80040ba:	4630      	mov	r0, r6
 80040bc:	f000 f880 	bl	80041c0 <_printf_i>
 80040c0:	e7e4      	b.n	800408c <_vfiprintf_r+0x208>
 80040c2:	bf00      	nop
 80040c4:	08007724 	.word	0x08007724
 80040c8:	08007744 	.word	0x08007744
 80040cc:	08007704 	.word	0x08007704
 80040d0:	08007764 	.word	0x08007764
 80040d4:	0800776e 	.word	0x0800776e
 80040d8:	00000000 	.word	0x00000000
 80040dc:	08003e5f 	.word	0x08003e5f
 80040e0:	0800776a 	.word	0x0800776a

080040e4 <_printf_common>:
 80040e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040e8:	4616      	mov	r6, r2
 80040ea:	4699      	mov	r9, r3
 80040ec:	688a      	ldr	r2, [r1, #8]
 80040ee:	690b      	ldr	r3, [r1, #16]
 80040f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040f4:	4293      	cmp	r3, r2
 80040f6:	bfb8      	it	lt
 80040f8:	4613      	movlt	r3, r2
 80040fa:	6033      	str	r3, [r6, #0]
 80040fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004100:	4607      	mov	r7, r0
 8004102:	460c      	mov	r4, r1
 8004104:	b10a      	cbz	r2, 800410a <_printf_common+0x26>
 8004106:	3301      	adds	r3, #1
 8004108:	6033      	str	r3, [r6, #0]
 800410a:	6823      	ldr	r3, [r4, #0]
 800410c:	0699      	lsls	r1, r3, #26
 800410e:	bf42      	ittt	mi
 8004110:	6833      	ldrmi	r3, [r6, #0]
 8004112:	3302      	addmi	r3, #2
 8004114:	6033      	strmi	r3, [r6, #0]
 8004116:	6825      	ldr	r5, [r4, #0]
 8004118:	f015 0506 	ands.w	r5, r5, #6
 800411c:	d106      	bne.n	800412c <_printf_common+0x48>
 800411e:	f104 0a19 	add.w	sl, r4, #25
 8004122:	68e3      	ldr	r3, [r4, #12]
 8004124:	6832      	ldr	r2, [r6, #0]
 8004126:	1a9b      	subs	r3, r3, r2
 8004128:	42ab      	cmp	r3, r5
 800412a:	dc26      	bgt.n	800417a <_printf_common+0x96>
 800412c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004130:	1e13      	subs	r3, r2, #0
 8004132:	6822      	ldr	r2, [r4, #0]
 8004134:	bf18      	it	ne
 8004136:	2301      	movne	r3, #1
 8004138:	0692      	lsls	r2, r2, #26
 800413a:	d42b      	bmi.n	8004194 <_printf_common+0xb0>
 800413c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004140:	4649      	mov	r1, r9
 8004142:	4638      	mov	r0, r7
 8004144:	47c0      	blx	r8
 8004146:	3001      	adds	r0, #1
 8004148:	d01e      	beq.n	8004188 <_printf_common+0xa4>
 800414a:	6823      	ldr	r3, [r4, #0]
 800414c:	68e5      	ldr	r5, [r4, #12]
 800414e:	6832      	ldr	r2, [r6, #0]
 8004150:	f003 0306 	and.w	r3, r3, #6
 8004154:	2b04      	cmp	r3, #4
 8004156:	bf08      	it	eq
 8004158:	1aad      	subeq	r5, r5, r2
 800415a:	68a3      	ldr	r3, [r4, #8]
 800415c:	6922      	ldr	r2, [r4, #16]
 800415e:	bf0c      	ite	eq
 8004160:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004164:	2500      	movne	r5, #0
 8004166:	4293      	cmp	r3, r2
 8004168:	bfc4      	itt	gt
 800416a:	1a9b      	subgt	r3, r3, r2
 800416c:	18ed      	addgt	r5, r5, r3
 800416e:	2600      	movs	r6, #0
 8004170:	341a      	adds	r4, #26
 8004172:	42b5      	cmp	r5, r6
 8004174:	d11a      	bne.n	80041ac <_printf_common+0xc8>
 8004176:	2000      	movs	r0, #0
 8004178:	e008      	b.n	800418c <_printf_common+0xa8>
 800417a:	2301      	movs	r3, #1
 800417c:	4652      	mov	r2, sl
 800417e:	4649      	mov	r1, r9
 8004180:	4638      	mov	r0, r7
 8004182:	47c0      	blx	r8
 8004184:	3001      	adds	r0, #1
 8004186:	d103      	bne.n	8004190 <_printf_common+0xac>
 8004188:	f04f 30ff 	mov.w	r0, #4294967295
 800418c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004190:	3501      	adds	r5, #1
 8004192:	e7c6      	b.n	8004122 <_printf_common+0x3e>
 8004194:	18e1      	adds	r1, r4, r3
 8004196:	1c5a      	adds	r2, r3, #1
 8004198:	2030      	movs	r0, #48	; 0x30
 800419a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800419e:	4422      	add	r2, r4
 80041a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041a8:	3302      	adds	r3, #2
 80041aa:	e7c7      	b.n	800413c <_printf_common+0x58>
 80041ac:	2301      	movs	r3, #1
 80041ae:	4622      	mov	r2, r4
 80041b0:	4649      	mov	r1, r9
 80041b2:	4638      	mov	r0, r7
 80041b4:	47c0      	blx	r8
 80041b6:	3001      	adds	r0, #1
 80041b8:	d0e6      	beq.n	8004188 <_printf_common+0xa4>
 80041ba:	3601      	adds	r6, #1
 80041bc:	e7d9      	b.n	8004172 <_printf_common+0x8e>
	...

080041c0 <_printf_i>:
 80041c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041c4:	7e0f      	ldrb	r7, [r1, #24]
 80041c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80041c8:	2f78      	cmp	r7, #120	; 0x78
 80041ca:	4691      	mov	r9, r2
 80041cc:	4680      	mov	r8, r0
 80041ce:	460c      	mov	r4, r1
 80041d0:	469a      	mov	sl, r3
 80041d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80041d6:	d807      	bhi.n	80041e8 <_printf_i+0x28>
 80041d8:	2f62      	cmp	r7, #98	; 0x62
 80041da:	d80a      	bhi.n	80041f2 <_printf_i+0x32>
 80041dc:	2f00      	cmp	r7, #0
 80041de:	f000 80d8 	beq.w	8004392 <_printf_i+0x1d2>
 80041e2:	2f58      	cmp	r7, #88	; 0x58
 80041e4:	f000 80a3 	beq.w	800432e <_printf_i+0x16e>
 80041e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80041f0:	e03a      	b.n	8004268 <_printf_i+0xa8>
 80041f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041f6:	2b15      	cmp	r3, #21
 80041f8:	d8f6      	bhi.n	80041e8 <_printf_i+0x28>
 80041fa:	a101      	add	r1, pc, #4	; (adr r1, 8004200 <_printf_i+0x40>)
 80041fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004200:	08004259 	.word	0x08004259
 8004204:	0800426d 	.word	0x0800426d
 8004208:	080041e9 	.word	0x080041e9
 800420c:	080041e9 	.word	0x080041e9
 8004210:	080041e9 	.word	0x080041e9
 8004214:	080041e9 	.word	0x080041e9
 8004218:	0800426d 	.word	0x0800426d
 800421c:	080041e9 	.word	0x080041e9
 8004220:	080041e9 	.word	0x080041e9
 8004224:	080041e9 	.word	0x080041e9
 8004228:	080041e9 	.word	0x080041e9
 800422c:	08004379 	.word	0x08004379
 8004230:	0800429d 	.word	0x0800429d
 8004234:	0800435b 	.word	0x0800435b
 8004238:	080041e9 	.word	0x080041e9
 800423c:	080041e9 	.word	0x080041e9
 8004240:	0800439b 	.word	0x0800439b
 8004244:	080041e9 	.word	0x080041e9
 8004248:	0800429d 	.word	0x0800429d
 800424c:	080041e9 	.word	0x080041e9
 8004250:	080041e9 	.word	0x080041e9
 8004254:	08004363 	.word	0x08004363
 8004258:	682b      	ldr	r3, [r5, #0]
 800425a:	1d1a      	adds	r2, r3, #4
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	602a      	str	r2, [r5, #0]
 8004260:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004264:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004268:	2301      	movs	r3, #1
 800426a:	e0a3      	b.n	80043b4 <_printf_i+0x1f4>
 800426c:	6820      	ldr	r0, [r4, #0]
 800426e:	6829      	ldr	r1, [r5, #0]
 8004270:	0606      	lsls	r6, r0, #24
 8004272:	f101 0304 	add.w	r3, r1, #4
 8004276:	d50a      	bpl.n	800428e <_printf_i+0xce>
 8004278:	680e      	ldr	r6, [r1, #0]
 800427a:	602b      	str	r3, [r5, #0]
 800427c:	2e00      	cmp	r6, #0
 800427e:	da03      	bge.n	8004288 <_printf_i+0xc8>
 8004280:	232d      	movs	r3, #45	; 0x2d
 8004282:	4276      	negs	r6, r6
 8004284:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004288:	485e      	ldr	r0, [pc, #376]	; (8004404 <_printf_i+0x244>)
 800428a:	230a      	movs	r3, #10
 800428c:	e019      	b.n	80042c2 <_printf_i+0x102>
 800428e:	680e      	ldr	r6, [r1, #0]
 8004290:	602b      	str	r3, [r5, #0]
 8004292:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004296:	bf18      	it	ne
 8004298:	b236      	sxthne	r6, r6
 800429a:	e7ef      	b.n	800427c <_printf_i+0xbc>
 800429c:	682b      	ldr	r3, [r5, #0]
 800429e:	6820      	ldr	r0, [r4, #0]
 80042a0:	1d19      	adds	r1, r3, #4
 80042a2:	6029      	str	r1, [r5, #0]
 80042a4:	0601      	lsls	r1, r0, #24
 80042a6:	d501      	bpl.n	80042ac <_printf_i+0xec>
 80042a8:	681e      	ldr	r6, [r3, #0]
 80042aa:	e002      	b.n	80042b2 <_printf_i+0xf2>
 80042ac:	0646      	lsls	r6, r0, #25
 80042ae:	d5fb      	bpl.n	80042a8 <_printf_i+0xe8>
 80042b0:	881e      	ldrh	r6, [r3, #0]
 80042b2:	4854      	ldr	r0, [pc, #336]	; (8004404 <_printf_i+0x244>)
 80042b4:	2f6f      	cmp	r7, #111	; 0x6f
 80042b6:	bf0c      	ite	eq
 80042b8:	2308      	moveq	r3, #8
 80042ba:	230a      	movne	r3, #10
 80042bc:	2100      	movs	r1, #0
 80042be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042c2:	6865      	ldr	r5, [r4, #4]
 80042c4:	60a5      	str	r5, [r4, #8]
 80042c6:	2d00      	cmp	r5, #0
 80042c8:	bfa2      	ittt	ge
 80042ca:	6821      	ldrge	r1, [r4, #0]
 80042cc:	f021 0104 	bicge.w	r1, r1, #4
 80042d0:	6021      	strge	r1, [r4, #0]
 80042d2:	b90e      	cbnz	r6, 80042d8 <_printf_i+0x118>
 80042d4:	2d00      	cmp	r5, #0
 80042d6:	d04d      	beq.n	8004374 <_printf_i+0x1b4>
 80042d8:	4615      	mov	r5, r2
 80042da:	fbb6 f1f3 	udiv	r1, r6, r3
 80042de:	fb03 6711 	mls	r7, r3, r1, r6
 80042e2:	5dc7      	ldrb	r7, [r0, r7]
 80042e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80042e8:	4637      	mov	r7, r6
 80042ea:	42bb      	cmp	r3, r7
 80042ec:	460e      	mov	r6, r1
 80042ee:	d9f4      	bls.n	80042da <_printf_i+0x11a>
 80042f0:	2b08      	cmp	r3, #8
 80042f2:	d10b      	bne.n	800430c <_printf_i+0x14c>
 80042f4:	6823      	ldr	r3, [r4, #0]
 80042f6:	07de      	lsls	r6, r3, #31
 80042f8:	d508      	bpl.n	800430c <_printf_i+0x14c>
 80042fa:	6923      	ldr	r3, [r4, #16]
 80042fc:	6861      	ldr	r1, [r4, #4]
 80042fe:	4299      	cmp	r1, r3
 8004300:	bfde      	ittt	le
 8004302:	2330      	movle	r3, #48	; 0x30
 8004304:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004308:	f105 35ff 	addle.w	r5, r5, #4294967295
 800430c:	1b52      	subs	r2, r2, r5
 800430e:	6122      	str	r2, [r4, #16]
 8004310:	f8cd a000 	str.w	sl, [sp]
 8004314:	464b      	mov	r3, r9
 8004316:	aa03      	add	r2, sp, #12
 8004318:	4621      	mov	r1, r4
 800431a:	4640      	mov	r0, r8
 800431c:	f7ff fee2 	bl	80040e4 <_printf_common>
 8004320:	3001      	adds	r0, #1
 8004322:	d14c      	bne.n	80043be <_printf_i+0x1fe>
 8004324:	f04f 30ff 	mov.w	r0, #4294967295
 8004328:	b004      	add	sp, #16
 800432a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800432e:	4835      	ldr	r0, [pc, #212]	; (8004404 <_printf_i+0x244>)
 8004330:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004334:	6829      	ldr	r1, [r5, #0]
 8004336:	6823      	ldr	r3, [r4, #0]
 8004338:	f851 6b04 	ldr.w	r6, [r1], #4
 800433c:	6029      	str	r1, [r5, #0]
 800433e:	061d      	lsls	r5, r3, #24
 8004340:	d514      	bpl.n	800436c <_printf_i+0x1ac>
 8004342:	07df      	lsls	r7, r3, #31
 8004344:	bf44      	itt	mi
 8004346:	f043 0320 	orrmi.w	r3, r3, #32
 800434a:	6023      	strmi	r3, [r4, #0]
 800434c:	b91e      	cbnz	r6, 8004356 <_printf_i+0x196>
 800434e:	6823      	ldr	r3, [r4, #0]
 8004350:	f023 0320 	bic.w	r3, r3, #32
 8004354:	6023      	str	r3, [r4, #0]
 8004356:	2310      	movs	r3, #16
 8004358:	e7b0      	b.n	80042bc <_printf_i+0xfc>
 800435a:	6823      	ldr	r3, [r4, #0]
 800435c:	f043 0320 	orr.w	r3, r3, #32
 8004360:	6023      	str	r3, [r4, #0]
 8004362:	2378      	movs	r3, #120	; 0x78
 8004364:	4828      	ldr	r0, [pc, #160]	; (8004408 <_printf_i+0x248>)
 8004366:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800436a:	e7e3      	b.n	8004334 <_printf_i+0x174>
 800436c:	0659      	lsls	r1, r3, #25
 800436e:	bf48      	it	mi
 8004370:	b2b6      	uxthmi	r6, r6
 8004372:	e7e6      	b.n	8004342 <_printf_i+0x182>
 8004374:	4615      	mov	r5, r2
 8004376:	e7bb      	b.n	80042f0 <_printf_i+0x130>
 8004378:	682b      	ldr	r3, [r5, #0]
 800437a:	6826      	ldr	r6, [r4, #0]
 800437c:	6961      	ldr	r1, [r4, #20]
 800437e:	1d18      	adds	r0, r3, #4
 8004380:	6028      	str	r0, [r5, #0]
 8004382:	0635      	lsls	r5, r6, #24
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	d501      	bpl.n	800438c <_printf_i+0x1cc>
 8004388:	6019      	str	r1, [r3, #0]
 800438a:	e002      	b.n	8004392 <_printf_i+0x1d2>
 800438c:	0670      	lsls	r0, r6, #25
 800438e:	d5fb      	bpl.n	8004388 <_printf_i+0x1c8>
 8004390:	8019      	strh	r1, [r3, #0]
 8004392:	2300      	movs	r3, #0
 8004394:	6123      	str	r3, [r4, #16]
 8004396:	4615      	mov	r5, r2
 8004398:	e7ba      	b.n	8004310 <_printf_i+0x150>
 800439a:	682b      	ldr	r3, [r5, #0]
 800439c:	1d1a      	adds	r2, r3, #4
 800439e:	602a      	str	r2, [r5, #0]
 80043a0:	681d      	ldr	r5, [r3, #0]
 80043a2:	6862      	ldr	r2, [r4, #4]
 80043a4:	2100      	movs	r1, #0
 80043a6:	4628      	mov	r0, r5
 80043a8:	f7fb ff22 	bl	80001f0 <memchr>
 80043ac:	b108      	cbz	r0, 80043b2 <_printf_i+0x1f2>
 80043ae:	1b40      	subs	r0, r0, r5
 80043b0:	6060      	str	r0, [r4, #4]
 80043b2:	6863      	ldr	r3, [r4, #4]
 80043b4:	6123      	str	r3, [r4, #16]
 80043b6:	2300      	movs	r3, #0
 80043b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043bc:	e7a8      	b.n	8004310 <_printf_i+0x150>
 80043be:	6923      	ldr	r3, [r4, #16]
 80043c0:	462a      	mov	r2, r5
 80043c2:	4649      	mov	r1, r9
 80043c4:	4640      	mov	r0, r8
 80043c6:	47d0      	blx	sl
 80043c8:	3001      	adds	r0, #1
 80043ca:	d0ab      	beq.n	8004324 <_printf_i+0x164>
 80043cc:	6823      	ldr	r3, [r4, #0]
 80043ce:	079b      	lsls	r3, r3, #30
 80043d0:	d413      	bmi.n	80043fa <_printf_i+0x23a>
 80043d2:	68e0      	ldr	r0, [r4, #12]
 80043d4:	9b03      	ldr	r3, [sp, #12]
 80043d6:	4298      	cmp	r0, r3
 80043d8:	bfb8      	it	lt
 80043da:	4618      	movlt	r0, r3
 80043dc:	e7a4      	b.n	8004328 <_printf_i+0x168>
 80043de:	2301      	movs	r3, #1
 80043e0:	4632      	mov	r2, r6
 80043e2:	4649      	mov	r1, r9
 80043e4:	4640      	mov	r0, r8
 80043e6:	47d0      	blx	sl
 80043e8:	3001      	adds	r0, #1
 80043ea:	d09b      	beq.n	8004324 <_printf_i+0x164>
 80043ec:	3501      	adds	r5, #1
 80043ee:	68e3      	ldr	r3, [r4, #12]
 80043f0:	9903      	ldr	r1, [sp, #12]
 80043f2:	1a5b      	subs	r3, r3, r1
 80043f4:	42ab      	cmp	r3, r5
 80043f6:	dcf2      	bgt.n	80043de <_printf_i+0x21e>
 80043f8:	e7eb      	b.n	80043d2 <_printf_i+0x212>
 80043fa:	2500      	movs	r5, #0
 80043fc:	f104 0619 	add.w	r6, r4, #25
 8004400:	e7f5      	b.n	80043ee <_printf_i+0x22e>
 8004402:	bf00      	nop
 8004404:	08007775 	.word	0x08007775
 8004408:	08007786 	.word	0x08007786

0800440c <_sbrk_r>:
 800440c:	b538      	push	{r3, r4, r5, lr}
 800440e:	4d06      	ldr	r5, [pc, #24]	; (8004428 <_sbrk_r+0x1c>)
 8004410:	2300      	movs	r3, #0
 8004412:	4604      	mov	r4, r0
 8004414:	4608      	mov	r0, r1
 8004416:	602b      	str	r3, [r5, #0]
 8004418:	f7fd fa94 	bl	8001944 <_sbrk>
 800441c:	1c43      	adds	r3, r0, #1
 800441e:	d102      	bne.n	8004426 <_sbrk_r+0x1a>
 8004420:	682b      	ldr	r3, [r5, #0]
 8004422:	b103      	cbz	r3, 8004426 <_sbrk_r+0x1a>
 8004424:	6023      	str	r3, [r4, #0]
 8004426:	bd38      	pop	{r3, r4, r5, pc}
 8004428:	20000278 	.word	0x20000278

0800442c <__sread>:
 800442c:	b510      	push	{r4, lr}
 800442e:	460c      	mov	r4, r1
 8004430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004434:	f000 fa6e 	bl	8004914 <_read_r>
 8004438:	2800      	cmp	r0, #0
 800443a:	bfab      	itete	ge
 800443c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800443e:	89a3      	ldrhlt	r3, [r4, #12]
 8004440:	181b      	addge	r3, r3, r0
 8004442:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004446:	bfac      	ite	ge
 8004448:	6563      	strge	r3, [r4, #84]	; 0x54
 800444a:	81a3      	strhlt	r3, [r4, #12]
 800444c:	bd10      	pop	{r4, pc}

0800444e <__swrite>:
 800444e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004452:	461f      	mov	r7, r3
 8004454:	898b      	ldrh	r3, [r1, #12]
 8004456:	05db      	lsls	r3, r3, #23
 8004458:	4605      	mov	r5, r0
 800445a:	460c      	mov	r4, r1
 800445c:	4616      	mov	r6, r2
 800445e:	d505      	bpl.n	800446c <__swrite+0x1e>
 8004460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004464:	2302      	movs	r3, #2
 8004466:	2200      	movs	r2, #0
 8004468:	f000 f9d0 	bl	800480c <_lseek_r>
 800446c:	89a3      	ldrh	r3, [r4, #12]
 800446e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004472:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004476:	81a3      	strh	r3, [r4, #12]
 8004478:	4632      	mov	r2, r6
 800447a:	463b      	mov	r3, r7
 800447c:	4628      	mov	r0, r5
 800447e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004482:	f000 b869 	b.w	8004558 <_write_r>

08004486 <__sseek>:
 8004486:	b510      	push	{r4, lr}
 8004488:	460c      	mov	r4, r1
 800448a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800448e:	f000 f9bd 	bl	800480c <_lseek_r>
 8004492:	1c43      	adds	r3, r0, #1
 8004494:	89a3      	ldrh	r3, [r4, #12]
 8004496:	bf15      	itete	ne
 8004498:	6560      	strne	r0, [r4, #84]	; 0x54
 800449a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800449e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80044a2:	81a3      	strheq	r3, [r4, #12]
 80044a4:	bf18      	it	ne
 80044a6:	81a3      	strhne	r3, [r4, #12]
 80044a8:	bd10      	pop	{r4, pc}

080044aa <__sclose>:
 80044aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044ae:	f000 b8db 	b.w	8004668 <_close_r>
	...

080044b4 <__swbuf_r>:
 80044b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b6:	460e      	mov	r6, r1
 80044b8:	4614      	mov	r4, r2
 80044ba:	4605      	mov	r5, r0
 80044bc:	b118      	cbz	r0, 80044c6 <__swbuf_r+0x12>
 80044be:	6983      	ldr	r3, [r0, #24]
 80044c0:	b90b      	cbnz	r3, 80044c6 <__swbuf_r+0x12>
 80044c2:	f7ff fb07 	bl	8003ad4 <__sinit>
 80044c6:	4b21      	ldr	r3, [pc, #132]	; (800454c <__swbuf_r+0x98>)
 80044c8:	429c      	cmp	r4, r3
 80044ca:	d12b      	bne.n	8004524 <__swbuf_r+0x70>
 80044cc:	686c      	ldr	r4, [r5, #4]
 80044ce:	69a3      	ldr	r3, [r4, #24]
 80044d0:	60a3      	str	r3, [r4, #8]
 80044d2:	89a3      	ldrh	r3, [r4, #12]
 80044d4:	071a      	lsls	r2, r3, #28
 80044d6:	d52f      	bpl.n	8004538 <__swbuf_r+0x84>
 80044d8:	6923      	ldr	r3, [r4, #16]
 80044da:	b36b      	cbz	r3, 8004538 <__swbuf_r+0x84>
 80044dc:	6923      	ldr	r3, [r4, #16]
 80044de:	6820      	ldr	r0, [r4, #0]
 80044e0:	1ac0      	subs	r0, r0, r3
 80044e2:	6963      	ldr	r3, [r4, #20]
 80044e4:	b2f6      	uxtb	r6, r6
 80044e6:	4283      	cmp	r3, r0
 80044e8:	4637      	mov	r7, r6
 80044ea:	dc04      	bgt.n	80044f6 <__swbuf_r+0x42>
 80044ec:	4621      	mov	r1, r4
 80044ee:	4628      	mov	r0, r5
 80044f0:	f000 f950 	bl	8004794 <_fflush_r>
 80044f4:	bb30      	cbnz	r0, 8004544 <__swbuf_r+0x90>
 80044f6:	68a3      	ldr	r3, [r4, #8]
 80044f8:	3b01      	subs	r3, #1
 80044fa:	60a3      	str	r3, [r4, #8]
 80044fc:	6823      	ldr	r3, [r4, #0]
 80044fe:	1c5a      	adds	r2, r3, #1
 8004500:	6022      	str	r2, [r4, #0]
 8004502:	701e      	strb	r6, [r3, #0]
 8004504:	6963      	ldr	r3, [r4, #20]
 8004506:	3001      	adds	r0, #1
 8004508:	4283      	cmp	r3, r0
 800450a:	d004      	beq.n	8004516 <__swbuf_r+0x62>
 800450c:	89a3      	ldrh	r3, [r4, #12]
 800450e:	07db      	lsls	r3, r3, #31
 8004510:	d506      	bpl.n	8004520 <__swbuf_r+0x6c>
 8004512:	2e0a      	cmp	r6, #10
 8004514:	d104      	bne.n	8004520 <__swbuf_r+0x6c>
 8004516:	4621      	mov	r1, r4
 8004518:	4628      	mov	r0, r5
 800451a:	f000 f93b 	bl	8004794 <_fflush_r>
 800451e:	b988      	cbnz	r0, 8004544 <__swbuf_r+0x90>
 8004520:	4638      	mov	r0, r7
 8004522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004524:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <__swbuf_r+0x9c>)
 8004526:	429c      	cmp	r4, r3
 8004528:	d101      	bne.n	800452e <__swbuf_r+0x7a>
 800452a:	68ac      	ldr	r4, [r5, #8]
 800452c:	e7cf      	b.n	80044ce <__swbuf_r+0x1a>
 800452e:	4b09      	ldr	r3, [pc, #36]	; (8004554 <__swbuf_r+0xa0>)
 8004530:	429c      	cmp	r4, r3
 8004532:	bf08      	it	eq
 8004534:	68ec      	ldreq	r4, [r5, #12]
 8004536:	e7ca      	b.n	80044ce <__swbuf_r+0x1a>
 8004538:	4621      	mov	r1, r4
 800453a:	4628      	mov	r0, r5
 800453c:	f000 f81e 	bl	800457c <__swsetup_r>
 8004540:	2800      	cmp	r0, #0
 8004542:	d0cb      	beq.n	80044dc <__swbuf_r+0x28>
 8004544:	f04f 37ff 	mov.w	r7, #4294967295
 8004548:	e7ea      	b.n	8004520 <__swbuf_r+0x6c>
 800454a:	bf00      	nop
 800454c:	08007724 	.word	0x08007724
 8004550:	08007744 	.word	0x08007744
 8004554:	08007704 	.word	0x08007704

08004558 <_write_r>:
 8004558:	b538      	push	{r3, r4, r5, lr}
 800455a:	4d07      	ldr	r5, [pc, #28]	; (8004578 <_write_r+0x20>)
 800455c:	4604      	mov	r4, r0
 800455e:	4608      	mov	r0, r1
 8004560:	4611      	mov	r1, r2
 8004562:	2200      	movs	r2, #0
 8004564:	602a      	str	r2, [r5, #0]
 8004566:	461a      	mov	r2, r3
 8004568:	f7fd f99b 	bl	80018a2 <_write>
 800456c:	1c43      	adds	r3, r0, #1
 800456e:	d102      	bne.n	8004576 <_write_r+0x1e>
 8004570:	682b      	ldr	r3, [r5, #0]
 8004572:	b103      	cbz	r3, 8004576 <_write_r+0x1e>
 8004574:	6023      	str	r3, [r4, #0]
 8004576:	bd38      	pop	{r3, r4, r5, pc}
 8004578:	20000278 	.word	0x20000278

0800457c <__swsetup_r>:
 800457c:	4b32      	ldr	r3, [pc, #200]	; (8004648 <__swsetup_r+0xcc>)
 800457e:	b570      	push	{r4, r5, r6, lr}
 8004580:	681d      	ldr	r5, [r3, #0]
 8004582:	4606      	mov	r6, r0
 8004584:	460c      	mov	r4, r1
 8004586:	b125      	cbz	r5, 8004592 <__swsetup_r+0x16>
 8004588:	69ab      	ldr	r3, [r5, #24]
 800458a:	b913      	cbnz	r3, 8004592 <__swsetup_r+0x16>
 800458c:	4628      	mov	r0, r5
 800458e:	f7ff faa1 	bl	8003ad4 <__sinit>
 8004592:	4b2e      	ldr	r3, [pc, #184]	; (800464c <__swsetup_r+0xd0>)
 8004594:	429c      	cmp	r4, r3
 8004596:	d10f      	bne.n	80045b8 <__swsetup_r+0x3c>
 8004598:	686c      	ldr	r4, [r5, #4]
 800459a:	89a3      	ldrh	r3, [r4, #12]
 800459c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80045a0:	0719      	lsls	r1, r3, #28
 80045a2:	d42c      	bmi.n	80045fe <__swsetup_r+0x82>
 80045a4:	06dd      	lsls	r5, r3, #27
 80045a6:	d411      	bmi.n	80045cc <__swsetup_r+0x50>
 80045a8:	2309      	movs	r3, #9
 80045aa:	6033      	str	r3, [r6, #0]
 80045ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80045b0:	81a3      	strh	r3, [r4, #12]
 80045b2:	f04f 30ff 	mov.w	r0, #4294967295
 80045b6:	e03e      	b.n	8004636 <__swsetup_r+0xba>
 80045b8:	4b25      	ldr	r3, [pc, #148]	; (8004650 <__swsetup_r+0xd4>)
 80045ba:	429c      	cmp	r4, r3
 80045bc:	d101      	bne.n	80045c2 <__swsetup_r+0x46>
 80045be:	68ac      	ldr	r4, [r5, #8]
 80045c0:	e7eb      	b.n	800459a <__swsetup_r+0x1e>
 80045c2:	4b24      	ldr	r3, [pc, #144]	; (8004654 <__swsetup_r+0xd8>)
 80045c4:	429c      	cmp	r4, r3
 80045c6:	bf08      	it	eq
 80045c8:	68ec      	ldreq	r4, [r5, #12]
 80045ca:	e7e6      	b.n	800459a <__swsetup_r+0x1e>
 80045cc:	0758      	lsls	r0, r3, #29
 80045ce:	d512      	bpl.n	80045f6 <__swsetup_r+0x7a>
 80045d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045d2:	b141      	cbz	r1, 80045e6 <__swsetup_r+0x6a>
 80045d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045d8:	4299      	cmp	r1, r3
 80045da:	d002      	beq.n	80045e2 <__swsetup_r+0x66>
 80045dc:	4630      	mov	r0, r6
 80045de:	f7ff fb47 	bl	8003c70 <_free_r>
 80045e2:	2300      	movs	r3, #0
 80045e4:	6363      	str	r3, [r4, #52]	; 0x34
 80045e6:	89a3      	ldrh	r3, [r4, #12]
 80045e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80045ec:	81a3      	strh	r3, [r4, #12]
 80045ee:	2300      	movs	r3, #0
 80045f0:	6063      	str	r3, [r4, #4]
 80045f2:	6923      	ldr	r3, [r4, #16]
 80045f4:	6023      	str	r3, [r4, #0]
 80045f6:	89a3      	ldrh	r3, [r4, #12]
 80045f8:	f043 0308 	orr.w	r3, r3, #8
 80045fc:	81a3      	strh	r3, [r4, #12]
 80045fe:	6923      	ldr	r3, [r4, #16]
 8004600:	b94b      	cbnz	r3, 8004616 <__swsetup_r+0x9a>
 8004602:	89a3      	ldrh	r3, [r4, #12]
 8004604:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800460c:	d003      	beq.n	8004616 <__swsetup_r+0x9a>
 800460e:	4621      	mov	r1, r4
 8004610:	4630      	mov	r0, r6
 8004612:	f000 f933 	bl	800487c <__smakebuf_r>
 8004616:	89a0      	ldrh	r0, [r4, #12]
 8004618:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800461c:	f010 0301 	ands.w	r3, r0, #1
 8004620:	d00a      	beq.n	8004638 <__swsetup_r+0xbc>
 8004622:	2300      	movs	r3, #0
 8004624:	60a3      	str	r3, [r4, #8]
 8004626:	6963      	ldr	r3, [r4, #20]
 8004628:	425b      	negs	r3, r3
 800462a:	61a3      	str	r3, [r4, #24]
 800462c:	6923      	ldr	r3, [r4, #16]
 800462e:	b943      	cbnz	r3, 8004642 <__swsetup_r+0xc6>
 8004630:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004634:	d1ba      	bne.n	80045ac <__swsetup_r+0x30>
 8004636:	bd70      	pop	{r4, r5, r6, pc}
 8004638:	0781      	lsls	r1, r0, #30
 800463a:	bf58      	it	pl
 800463c:	6963      	ldrpl	r3, [r4, #20]
 800463e:	60a3      	str	r3, [r4, #8]
 8004640:	e7f4      	b.n	800462c <__swsetup_r+0xb0>
 8004642:	2000      	movs	r0, #0
 8004644:	e7f7      	b.n	8004636 <__swsetup_r+0xba>
 8004646:	bf00      	nop
 8004648:	20000024 	.word	0x20000024
 800464c:	08007724 	.word	0x08007724
 8004650:	08007744 	.word	0x08007744
 8004654:	08007704 	.word	0x08007704

08004658 <abort>:
 8004658:	b508      	push	{r3, lr}
 800465a:	2006      	movs	r0, #6
 800465c:	f000 f994 	bl	8004988 <raise>
 8004660:	2001      	movs	r0, #1
 8004662:	f7fd f8f7 	bl	8001854 <_exit>
	...

08004668 <_close_r>:
 8004668:	b538      	push	{r3, r4, r5, lr}
 800466a:	4d06      	ldr	r5, [pc, #24]	; (8004684 <_close_r+0x1c>)
 800466c:	2300      	movs	r3, #0
 800466e:	4604      	mov	r4, r0
 8004670:	4608      	mov	r0, r1
 8004672:	602b      	str	r3, [r5, #0]
 8004674:	f7fd f931 	bl	80018da <_close>
 8004678:	1c43      	adds	r3, r0, #1
 800467a:	d102      	bne.n	8004682 <_close_r+0x1a>
 800467c:	682b      	ldr	r3, [r5, #0]
 800467e:	b103      	cbz	r3, 8004682 <_close_r+0x1a>
 8004680:	6023      	str	r3, [r4, #0]
 8004682:	bd38      	pop	{r3, r4, r5, pc}
 8004684:	20000278 	.word	0x20000278

08004688 <__sflush_r>:
 8004688:	898a      	ldrh	r2, [r1, #12]
 800468a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800468e:	4605      	mov	r5, r0
 8004690:	0710      	lsls	r0, r2, #28
 8004692:	460c      	mov	r4, r1
 8004694:	d458      	bmi.n	8004748 <__sflush_r+0xc0>
 8004696:	684b      	ldr	r3, [r1, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	dc05      	bgt.n	80046a8 <__sflush_r+0x20>
 800469c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800469e:	2b00      	cmp	r3, #0
 80046a0:	dc02      	bgt.n	80046a8 <__sflush_r+0x20>
 80046a2:	2000      	movs	r0, #0
 80046a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80046aa:	2e00      	cmp	r6, #0
 80046ac:	d0f9      	beq.n	80046a2 <__sflush_r+0x1a>
 80046ae:	2300      	movs	r3, #0
 80046b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80046b4:	682f      	ldr	r7, [r5, #0]
 80046b6:	602b      	str	r3, [r5, #0]
 80046b8:	d032      	beq.n	8004720 <__sflush_r+0x98>
 80046ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80046bc:	89a3      	ldrh	r3, [r4, #12]
 80046be:	075a      	lsls	r2, r3, #29
 80046c0:	d505      	bpl.n	80046ce <__sflush_r+0x46>
 80046c2:	6863      	ldr	r3, [r4, #4]
 80046c4:	1ac0      	subs	r0, r0, r3
 80046c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80046c8:	b10b      	cbz	r3, 80046ce <__sflush_r+0x46>
 80046ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80046cc:	1ac0      	subs	r0, r0, r3
 80046ce:	2300      	movs	r3, #0
 80046d0:	4602      	mov	r2, r0
 80046d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80046d4:	6a21      	ldr	r1, [r4, #32]
 80046d6:	4628      	mov	r0, r5
 80046d8:	47b0      	blx	r6
 80046da:	1c43      	adds	r3, r0, #1
 80046dc:	89a3      	ldrh	r3, [r4, #12]
 80046de:	d106      	bne.n	80046ee <__sflush_r+0x66>
 80046e0:	6829      	ldr	r1, [r5, #0]
 80046e2:	291d      	cmp	r1, #29
 80046e4:	d82c      	bhi.n	8004740 <__sflush_r+0xb8>
 80046e6:	4a2a      	ldr	r2, [pc, #168]	; (8004790 <__sflush_r+0x108>)
 80046e8:	40ca      	lsrs	r2, r1
 80046ea:	07d6      	lsls	r6, r2, #31
 80046ec:	d528      	bpl.n	8004740 <__sflush_r+0xb8>
 80046ee:	2200      	movs	r2, #0
 80046f0:	6062      	str	r2, [r4, #4]
 80046f2:	04d9      	lsls	r1, r3, #19
 80046f4:	6922      	ldr	r2, [r4, #16]
 80046f6:	6022      	str	r2, [r4, #0]
 80046f8:	d504      	bpl.n	8004704 <__sflush_r+0x7c>
 80046fa:	1c42      	adds	r2, r0, #1
 80046fc:	d101      	bne.n	8004702 <__sflush_r+0x7a>
 80046fe:	682b      	ldr	r3, [r5, #0]
 8004700:	b903      	cbnz	r3, 8004704 <__sflush_r+0x7c>
 8004702:	6560      	str	r0, [r4, #84]	; 0x54
 8004704:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004706:	602f      	str	r7, [r5, #0]
 8004708:	2900      	cmp	r1, #0
 800470a:	d0ca      	beq.n	80046a2 <__sflush_r+0x1a>
 800470c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004710:	4299      	cmp	r1, r3
 8004712:	d002      	beq.n	800471a <__sflush_r+0x92>
 8004714:	4628      	mov	r0, r5
 8004716:	f7ff faab 	bl	8003c70 <_free_r>
 800471a:	2000      	movs	r0, #0
 800471c:	6360      	str	r0, [r4, #52]	; 0x34
 800471e:	e7c1      	b.n	80046a4 <__sflush_r+0x1c>
 8004720:	6a21      	ldr	r1, [r4, #32]
 8004722:	2301      	movs	r3, #1
 8004724:	4628      	mov	r0, r5
 8004726:	47b0      	blx	r6
 8004728:	1c41      	adds	r1, r0, #1
 800472a:	d1c7      	bne.n	80046bc <__sflush_r+0x34>
 800472c:	682b      	ldr	r3, [r5, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d0c4      	beq.n	80046bc <__sflush_r+0x34>
 8004732:	2b1d      	cmp	r3, #29
 8004734:	d001      	beq.n	800473a <__sflush_r+0xb2>
 8004736:	2b16      	cmp	r3, #22
 8004738:	d101      	bne.n	800473e <__sflush_r+0xb6>
 800473a:	602f      	str	r7, [r5, #0]
 800473c:	e7b1      	b.n	80046a2 <__sflush_r+0x1a>
 800473e:	89a3      	ldrh	r3, [r4, #12]
 8004740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004744:	81a3      	strh	r3, [r4, #12]
 8004746:	e7ad      	b.n	80046a4 <__sflush_r+0x1c>
 8004748:	690f      	ldr	r7, [r1, #16]
 800474a:	2f00      	cmp	r7, #0
 800474c:	d0a9      	beq.n	80046a2 <__sflush_r+0x1a>
 800474e:	0793      	lsls	r3, r2, #30
 8004750:	680e      	ldr	r6, [r1, #0]
 8004752:	bf08      	it	eq
 8004754:	694b      	ldreq	r3, [r1, #20]
 8004756:	600f      	str	r7, [r1, #0]
 8004758:	bf18      	it	ne
 800475a:	2300      	movne	r3, #0
 800475c:	eba6 0807 	sub.w	r8, r6, r7
 8004760:	608b      	str	r3, [r1, #8]
 8004762:	f1b8 0f00 	cmp.w	r8, #0
 8004766:	dd9c      	ble.n	80046a2 <__sflush_r+0x1a>
 8004768:	6a21      	ldr	r1, [r4, #32]
 800476a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800476c:	4643      	mov	r3, r8
 800476e:	463a      	mov	r2, r7
 8004770:	4628      	mov	r0, r5
 8004772:	47b0      	blx	r6
 8004774:	2800      	cmp	r0, #0
 8004776:	dc06      	bgt.n	8004786 <__sflush_r+0xfe>
 8004778:	89a3      	ldrh	r3, [r4, #12]
 800477a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800477e:	81a3      	strh	r3, [r4, #12]
 8004780:	f04f 30ff 	mov.w	r0, #4294967295
 8004784:	e78e      	b.n	80046a4 <__sflush_r+0x1c>
 8004786:	4407      	add	r7, r0
 8004788:	eba8 0800 	sub.w	r8, r8, r0
 800478c:	e7e9      	b.n	8004762 <__sflush_r+0xda>
 800478e:	bf00      	nop
 8004790:	20400001 	.word	0x20400001

08004794 <_fflush_r>:
 8004794:	b538      	push	{r3, r4, r5, lr}
 8004796:	690b      	ldr	r3, [r1, #16]
 8004798:	4605      	mov	r5, r0
 800479a:	460c      	mov	r4, r1
 800479c:	b913      	cbnz	r3, 80047a4 <_fflush_r+0x10>
 800479e:	2500      	movs	r5, #0
 80047a0:	4628      	mov	r0, r5
 80047a2:	bd38      	pop	{r3, r4, r5, pc}
 80047a4:	b118      	cbz	r0, 80047ae <_fflush_r+0x1a>
 80047a6:	6983      	ldr	r3, [r0, #24]
 80047a8:	b90b      	cbnz	r3, 80047ae <_fflush_r+0x1a>
 80047aa:	f7ff f993 	bl	8003ad4 <__sinit>
 80047ae:	4b14      	ldr	r3, [pc, #80]	; (8004800 <_fflush_r+0x6c>)
 80047b0:	429c      	cmp	r4, r3
 80047b2:	d11b      	bne.n	80047ec <_fflush_r+0x58>
 80047b4:	686c      	ldr	r4, [r5, #4]
 80047b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d0ef      	beq.n	800479e <_fflush_r+0xa>
 80047be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80047c0:	07d0      	lsls	r0, r2, #31
 80047c2:	d404      	bmi.n	80047ce <_fflush_r+0x3a>
 80047c4:	0599      	lsls	r1, r3, #22
 80047c6:	d402      	bmi.n	80047ce <_fflush_r+0x3a>
 80047c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047ca:	f7ff fa46 	bl	8003c5a <__retarget_lock_acquire_recursive>
 80047ce:	4628      	mov	r0, r5
 80047d0:	4621      	mov	r1, r4
 80047d2:	f7ff ff59 	bl	8004688 <__sflush_r>
 80047d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047d8:	07da      	lsls	r2, r3, #31
 80047da:	4605      	mov	r5, r0
 80047dc:	d4e0      	bmi.n	80047a0 <_fflush_r+0xc>
 80047de:	89a3      	ldrh	r3, [r4, #12]
 80047e0:	059b      	lsls	r3, r3, #22
 80047e2:	d4dd      	bmi.n	80047a0 <_fflush_r+0xc>
 80047e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047e6:	f7ff fa39 	bl	8003c5c <__retarget_lock_release_recursive>
 80047ea:	e7d9      	b.n	80047a0 <_fflush_r+0xc>
 80047ec:	4b05      	ldr	r3, [pc, #20]	; (8004804 <_fflush_r+0x70>)
 80047ee:	429c      	cmp	r4, r3
 80047f0:	d101      	bne.n	80047f6 <_fflush_r+0x62>
 80047f2:	68ac      	ldr	r4, [r5, #8]
 80047f4:	e7df      	b.n	80047b6 <_fflush_r+0x22>
 80047f6:	4b04      	ldr	r3, [pc, #16]	; (8004808 <_fflush_r+0x74>)
 80047f8:	429c      	cmp	r4, r3
 80047fa:	bf08      	it	eq
 80047fc:	68ec      	ldreq	r4, [r5, #12]
 80047fe:	e7da      	b.n	80047b6 <_fflush_r+0x22>
 8004800:	08007724 	.word	0x08007724
 8004804:	08007744 	.word	0x08007744
 8004808:	08007704 	.word	0x08007704

0800480c <_lseek_r>:
 800480c:	b538      	push	{r3, r4, r5, lr}
 800480e:	4d07      	ldr	r5, [pc, #28]	; (800482c <_lseek_r+0x20>)
 8004810:	4604      	mov	r4, r0
 8004812:	4608      	mov	r0, r1
 8004814:	4611      	mov	r1, r2
 8004816:	2200      	movs	r2, #0
 8004818:	602a      	str	r2, [r5, #0]
 800481a:	461a      	mov	r2, r3
 800481c:	f7fd f884 	bl	8001928 <_lseek>
 8004820:	1c43      	adds	r3, r0, #1
 8004822:	d102      	bne.n	800482a <_lseek_r+0x1e>
 8004824:	682b      	ldr	r3, [r5, #0]
 8004826:	b103      	cbz	r3, 800482a <_lseek_r+0x1e>
 8004828:	6023      	str	r3, [r4, #0]
 800482a:	bd38      	pop	{r3, r4, r5, pc}
 800482c:	20000278 	.word	0x20000278

08004830 <__swhatbuf_r>:
 8004830:	b570      	push	{r4, r5, r6, lr}
 8004832:	460e      	mov	r6, r1
 8004834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004838:	2900      	cmp	r1, #0
 800483a:	b096      	sub	sp, #88	; 0x58
 800483c:	4614      	mov	r4, r2
 800483e:	461d      	mov	r5, r3
 8004840:	da08      	bge.n	8004854 <__swhatbuf_r+0x24>
 8004842:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	602a      	str	r2, [r5, #0]
 800484a:	061a      	lsls	r2, r3, #24
 800484c:	d410      	bmi.n	8004870 <__swhatbuf_r+0x40>
 800484e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004852:	e00e      	b.n	8004872 <__swhatbuf_r+0x42>
 8004854:	466a      	mov	r2, sp
 8004856:	f000 f8b3 	bl	80049c0 <_fstat_r>
 800485a:	2800      	cmp	r0, #0
 800485c:	dbf1      	blt.n	8004842 <__swhatbuf_r+0x12>
 800485e:	9a01      	ldr	r2, [sp, #4]
 8004860:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004864:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004868:	425a      	negs	r2, r3
 800486a:	415a      	adcs	r2, r3
 800486c:	602a      	str	r2, [r5, #0]
 800486e:	e7ee      	b.n	800484e <__swhatbuf_r+0x1e>
 8004870:	2340      	movs	r3, #64	; 0x40
 8004872:	2000      	movs	r0, #0
 8004874:	6023      	str	r3, [r4, #0]
 8004876:	b016      	add	sp, #88	; 0x58
 8004878:	bd70      	pop	{r4, r5, r6, pc}
	...

0800487c <__smakebuf_r>:
 800487c:	898b      	ldrh	r3, [r1, #12]
 800487e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004880:	079d      	lsls	r5, r3, #30
 8004882:	4606      	mov	r6, r0
 8004884:	460c      	mov	r4, r1
 8004886:	d507      	bpl.n	8004898 <__smakebuf_r+0x1c>
 8004888:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800488c:	6023      	str	r3, [r4, #0]
 800488e:	6123      	str	r3, [r4, #16]
 8004890:	2301      	movs	r3, #1
 8004892:	6163      	str	r3, [r4, #20]
 8004894:	b002      	add	sp, #8
 8004896:	bd70      	pop	{r4, r5, r6, pc}
 8004898:	ab01      	add	r3, sp, #4
 800489a:	466a      	mov	r2, sp
 800489c:	f7ff ffc8 	bl	8004830 <__swhatbuf_r>
 80048a0:	9900      	ldr	r1, [sp, #0]
 80048a2:	4605      	mov	r5, r0
 80048a4:	4630      	mov	r0, r6
 80048a6:	f7ff fa4f 	bl	8003d48 <_malloc_r>
 80048aa:	b948      	cbnz	r0, 80048c0 <__smakebuf_r+0x44>
 80048ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048b0:	059a      	lsls	r2, r3, #22
 80048b2:	d4ef      	bmi.n	8004894 <__smakebuf_r+0x18>
 80048b4:	f023 0303 	bic.w	r3, r3, #3
 80048b8:	f043 0302 	orr.w	r3, r3, #2
 80048bc:	81a3      	strh	r3, [r4, #12]
 80048be:	e7e3      	b.n	8004888 <__smakebuf_r+0xc>
 80048c0:	4b0d      	ldr	r3, [pc, #52]	; (80048f8 <__smakebuf_r+0x7c>)
 80048c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80048c4:	89a3      	ldrh	r3, [r4, #12]
 80048c6:	6020      	str	r0, [r4, #0]
 80048c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048cc:	81a3      	strh	r3, [r4, #12]
 80048ce:	9b00      	ldr	r3, [sp, #0]
 80048d0:	6163      	str	r3, [r4, #20]
 80048d2:	9b01      	ldr	r3, [sp, #4]
 80048d4:	6120      	str	r0, [r4, #16]
 80048d6:	b15b      	cbz	r3, 80048f0 <__smakebuf_r+0x74>
 80048d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048dc:	4630      	mov	r0, r6
 80048de:	f000 f881 	bl	80049e4 <_isatty_r>
 80048e2:	b128      	cbz	r0, 80048f0 <__smakebuf_r+0x74>
 80048e4:	89a3      	ldrh	r3, [r4, #12]
 80048e6:	f023 0303 	bic.w	r3, r3, #3
 80048ea:	f043 0301 	orr.w	r3, r3, #1
 80048ee:	81a3      	strh	r3, [r4, #12]
 80048f0:	89a0      	ldrh	r0, [r4, #12]
 80048f2:	4305      	orrs	r5, r0
 80048f4:	81a5      	strh	r5, [r4, #12]
 80048f6:	e7cd      	b.n	8004894 <__smakebuf_r+0x18>
 80048f8:	08003a6d 	.word	0x08003a6d

080048fc <__malloc_lock>:
 80048fc:	4801      	ldr	r0, [pc, #4]	; (8004904 <__malloc_lock+0x8>)
 80048fe:	f7ff b9ac 	b.w	8003c5a <__retarget_lock_acquire_recursive>
 8004902:	bf00      	nop
 8004904:	2000026c 	.word	0x2000026c

08004908 <__malloc_unlock>:
 8004908:	4801      	ldr	r0, [pc, #4]	; (8004910 <__malloc_unlock+0x8>)
 800490a:	f7ff b9a7 	b.w	8003c5c <__retarget_lock_release_recursive>
 800490e:	bf00      	nop
 8004910:	2000026c 	.word	0x2000026c

08004914 <_read_r>:
 8004914:	b538      	push	{r3, r4, r5, lr}
 8004916:	4d07      	ldr	r5, [pc, #28]	; (8004934 <_read_r+0x20>)
 8004918:	4604      	mov	r4, r0
 800491a:	4608      	mov	r0, r1
 800491c:	4611      	mov	r1, r2
 800491e:	2200      	movs	r2, #0
 8004920:	602a      	str	r2, [r5, #0]
 8004922:	461a      	mov	r2, r3
 8004924:	f7fc ffa0 	bl	8001868 <_read>
 8004928:	1c43      	adds	r3, r0, #1
 800492a:	d102      	bne.n	8004932 <_read_r+0x1e>
 800492c:	682b      	ldr	r3, [r5, #0]
 800492e:	b103      	cbz	r3, 8004932 <_read_r+0x1e>
 8004930:	6023      	str	r3, [r4, #0]
 8004932:	bd38      	pop	{r3, r4, r5, pc}
 8004934:	20000278 	.word	0x20000278

08004938 <_raise_r>:
 8004938:	291f      	cmp	r1, #31
 800493a:	b538      	push	{r3, r4, r5, lr}
 800493c:	4604      	mov	r4, r0
 800493e:	460d      	mov	r5, r1
 8004940:	d904      	bls.n	800494c <_raise_r+0x14>
 8004942:	2316      	movs	r3, #22
 8004944:	6003      	str	r3, [r0, #0]
 8004946:	f04f 30ff 	mov.w	r0, #4294967295
 800494a:	bd38      	pop	{r3, r4, r5, pc}
 800494c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800494e:	b112      	cbz	r2, 8004956 <_raise_r+0x1e>
 8004950:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004954:	b94b      	cbnz	r3, 800496a <_raise_r+0x32>
 8004956:	4620      	mov	r0, r4
 8004958:	f000 f830 	bl	80049bc <_getpid_r>
 800495c:	462a      	mov	r2, r5
 800495e:	4601      	mov	r1, r0
 8004960:	4620      	mov	r0, r4
 8004962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004966:	f000 b817 	b.w	8004998 <_kill_r>
 800496a:	2b01      	cmp	r3, #1
 800496c:	d00a      	beq.n	8004984 <_raise_r+0x4c>
 800496e:	1c59      	adds	r1, r3, #1
 8004970:	d103      	bne.n	800497a <_raise_r+0x42>
 8004972:	2316      	movs	r3, #22
 8004974:	6003      	str	r3, [r0, #0]
 8004976:	2001      	movs	r0, #1
 8004978:	e7e7      	b.n	800494a <_raise_r+0x12>
 800497a:	2400      	movs	r4, #0
 800497c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004980:	4628      	mov	r0, r5
 8004982:	4798      	blx	r3
 8004984:	2000      	movs	r0, #0
 8004986:	e7e0      	b.n	800494a <_raise_r+0x12>

08004988 <raise>:
 8004988:	4b02      	ldr	r3, [pc, #8]	; (8004994 <raise+0xc>)
 800498a:	4601      	mov	r1, r0
 800498c:	6818      	ldr	r0, [r3, #0]
 800498e:	f7ff bfd3 	b.w	8004938 <_raise_r>
 8004992:	bf00      	nop
 8004994:	20000024 	.word	0x20000024

08004998 <_kill_r>:
 8004998:	b538      	push	{r3, r4, r5, lr}
 800499a:	4d07      	ldr	r5, [pc, #28]	; (80049b8 <_kill_r+0x20>)
 800499c:	2300      	movs	r3, #0
 800499e:	4604      	mov	r4, r0
 80049a0:	4608      	mov	r0, r1
 80049a2:	4611      	mov	r1, r2
 80049a4:	602b      	str	r3, [r5, #0]
 80049a6:	f7fc ff45 	bl	8001834 <_kill>
 80049aa:	1c43      	adds	r3, r0, #1
 80049ac:	d102      	bne.n	80049b4 <_kill_r+0x1c>
 80049ae:	682b      	ldr	r3, [r5, #0]
 80049b0:	b103      	cbz	r3, 80049b4 <_kill_r+0x1c>
 80049b2:	6023      	str	r3, [r4, #0]
 80049b4:	bd38      	pop	{r3, r4, r5, pc}
 80049b6:	bf00      	nop
 80049b8:	20000278 	.word	0x20000278

080049bc <_getpid_r>:
 80049bc:	f7fc bf32 	b.w	8001824 <_getpid>

080049c0 <_fstat_r>:
 80049c0:	b538      	push	{r3, r4, r5, lr}
 80049c2:	4d07      	ldr	r5, [pc, #28]	; (80049e0 <_fstat_r+0x20>)
 80049c4:	2300      	movs	r3, #0
 80049c6:	4604      	mov	r4, r0
 80049c8:	4608      	mov	r0, r1
 80049ca:	4611      	mov	r1, r2
 80049cc:	602b      	str	r3, [r5, #0]
 80049ce:	f7fc ff90 	bl	80018f2 <_fstat>
 80049d2:	1c43      	adds	r3, r0, #1
 80049d4:	d102      	bne.n	80049dc <_fstat_r+0x1c>
 80049d6:	682b      	ldr	r3, [r5, #0]
 80049d8:	b103      	cbz	r3, 80049dc <_fstat_r+0x1c>
 80049da:	6023      	str	r3, [r4, #0]
 80049dc:	bd38      	pop	{r3, r4, r5, pc}
 80049de:	bf00      	nop
 80049e0:	20000278 	.word	0x20000278

080049e4 <_isatty_r>:
 80049e4:	b538      	push	{r3, r4, r5, lr}
 80049e6:	4d06      	ldr	r5, [pc, #24]	; (8004a00 <_isatty_r+0x1c>)
 80049e8:	2300      	movs	r3, #0
 80049ea:	4604      	mov	r4, r0
 80049ec:	4608      	mov	r0, r1
 80049ee:	602b      	str	r3, [r5, #0]
 80049f0:	f7fc ff8f 	bl	8001912 <_isatty>
 80049f4:	1c43      	adds	r3, r0, #1
 80049f6:	d102      	bne.n	80049fe <_isatty_r+0x1a>
 80049f8:	682b      	ldr	r3, [r5, #0]
 80049fa:	b103      	cbz	r3, 80049fe <_isatty_r+0x1a>
 80049fc:	6023      	str	r3, [r4, #0]
 80049fe:	bd38      	pop	{r3, r4, r5, pc}
 8004a00:	20000278 	.word	0x20000278

08004a04 <_gettimeofday>:
 8004a04:	4b02      	ldr	r3, [pc, #8]	; (8004a10 <_gettimeofday+0xc>)
 8004a06:	2258      	movs	r2, #88	; 0x58
 8004a08:	601a      	str	r2, [r3, #0]
 8004a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a0e:	4770      	bx	lr
 8004a10:	20000278 	.word	0x20000278

08004a14 <_init>:
 8004a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a16:	bf00      	nop
 8004a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a1a:	bc08      	pop	{r3}
 8004a1c:	469e      	mov	lr, r3
 8004a1e:	4770      	bx	lr

08004a20 <_fini>:
 8004a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a22:	bf00      	nop
 8004a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a26:	bc08      	pop	{r3}
 8004a28:	469e      	mov	lr, r3
 8004a2a:	4770      	bx	lr
